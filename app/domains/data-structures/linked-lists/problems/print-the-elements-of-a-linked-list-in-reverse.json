{
    "status": true, 
    "model": {
        "tagAncestry": [], 
        "solved_count": 62917, 
        "can_solve": true, 
        "dynamic": true, 
        "epoch_starttime": null, 
        "difficulty_name": "Easy", 
        "compile_and_test": true, 
        "submit_disabled": false, 
        "company_id": null, 
        "languages": [
            "csharp", 
            "cpp", 
            "cpp14", 
            "java", 
            "javascript", 
            "python", 
            "python3"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": null, 
        "factor": 5, 
        "default_language": null, 
        "moderator_or_support": false, 
        "leaderboard_out_of_sync": null, 
        "contest_slug": "master", 
        "python3_template": "\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n\n  \n  \n  \n  \n    ", 
        "name": "Print in Reverse", 
        "level": 13, 
        "success_ratio": 0.9761989728631053, 
        "total_count": 64451, 
        "javascript_template_head": "", 
        "codechecker_handle": "", 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "is_skip_band_challenge": false, 
        "public_test_cases": true, 
        "available_translations": [], 
        "cpp_template": "/*\n  Print elements of a linked list in reverse order as standard output\n  head pointer could be NULL as well for empty list\n  Node is defined as \n  struct Node\n  {\n     int data;\n     struct Node *next;\n  }\n*/\nvoid ReversePrint(Node *head)\n{\n  // This is a \"method-only\" submission. \n  // You only need to complete this method. \n}", 
        "is_preview_contest": false, 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "can_be_viewed": true, 
        "submitted_hackers_count": 64451, 
        "public_solutions": true, 
        "deleted": false, 
        "real_dynamic": false, 
        "difficulty_score": "0.029", 
        "difficulty": 0.9714188499489622, 
        "active": true, 
        "slug": "print-the-elements-of-a-linked-list-in-reverse", 
        "show_skeliton": false, 
        "player_count": 2, 
        "is_editorial_available": true, 
        "epoch_endtime": null, 
        "author_avatar": "https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg", 
        "judgebot_language": null, 
        "requirements_description": null, 
        "java_template": "/*\n  Print elements of a linked list in reverse order \n  head pointer input could be NULL as well for empty list\n  Node is defined as \n  class Node {\n     int data;\n     Node next;\n  }\n*/\n    // This is a \"method-only\" submission. \n    // You only need to complete this method. \n\nvoid ReversePrint(Node head) {\n  // This is a \"method-only\" submission. \n  // You only need to complete this method. \n\n}", 
        "python_template": "\"\"\"\n Print elements of a linked list in reverse order as standard output\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n \n\"\"\"\n\ndef ReversePrint(head):\n\n\n  \n  \n  \n  ", 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "cpp14_template": "/*\n  Print elements of a linked list in reverse order as standard output\n  head pointer could be NULL as well for empty list\n  Node is defined as \n  struct Node\n  {\n     int data;\n     struct Node *next;\n  }\n*/\nvoid ReversePrint(Node *head)\n{\n  // This is a \"method-only\" submission. \n  // You only need to complete this method. \n}", 
        "kind": "code", 
        "is_custom": false, 
        "csharp_template_head": "", 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "custom": false, 
        "preview": "Print the elements of a linked list in reverse order, from tail to head", 
        "company": null, 
        "is_text": false, 
        "require_unlock": true, 
        "csharp_template": "    /*\n      Print linked list from the end to the begin\n      head can be NULL\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static void ReversePrint(Node head)\n    {\n        \n    }\n", 
        "has_started": true, 
        "judgebot": null, 
        "custom_checker_language": "", 
        "custom_case": true, 
        "topics": [], 
        "updated_at": "2017-07-27T12:36:37.000Z", 
        "author_name": "harsha_s", 
        "onboarding": null, 
        "id": 1147, 
        "has_ended": false, 
        "javascript_template": "/*\n    Print elements of a linked list in reverse order as standard output\n    head pointer could be NULL as well for empty list\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.next = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction reversePrint(head) {\n    \n}", 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "status": null, 
        "category": "ai", 
        "track": {
            "name": "Linked Lists", 
            "taxonomy": 1, 
            "track_slug": "data-structures", 
            "track_id": 17, 
            "track_name": "Data Structures", 
            "id": 39, 
            "rewards_system_enabled": null, 
            "slug": "linked-lists"
        }, 
        "javascript_template_tail": "", 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p><sub>This challenge is part of a tutorial track by <a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a> and is accompanied by a video lesson.</sub></p>\n\n<p>You are given the pointer to the head node of a linked list and you need to print all its elements in reverse order from tail to head, one element per line. The head pointer may be null meaning that the list is empty - in that case, do not print anything!</p>\n\n<p><strong>Input Format</strong> <br>\nYou have to complete the <code>void ReversePrint(Node* head)</code> method which takes one argument - the head of the linked list. You should NOT read any input from stdin/console.</p>\n\n<p><strong>Output Format</strong> <br>\nPrint the elements of the linked list in reverse order to stdout/console (using <code>printf</code> or <code>cout</code>) , one per line.</p>\n\n<p><strong>Sample Input</strong></p>\n\n<p>1 --&gt; 2 --&gt; NULL <br>\n2 --&gt; 1 --&gt; 4 --&gt;  5 --&gt; NULL   </p>\n\n<p><strong>Sample Output</strong></p>\n\n<pre><code>2\n1\n5\n4\n1\n2\n</code></pre>\n\n<p><strong>Explanation</strong> <br>\n1. First list is printed from tail to head hence 2,1 <br>\n2. Similarly second list is also printed from tail to head. </p>\n\n<p><strong>Video lesson</strong>  </p>\n\n</div></div></div>", 
        "max_score": 5, 
        "user_score": 0, 
        "created_at": "2013-10-22T14:09:33.000Z", 
        "countdown_time": 0, 
        "csharp_template_tail": ""
    }
}
{
    "status": true, 
    "model": {
        "onboarding": null, 
        "python_template": "\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n  \n  \n  \n  \n  \n  \n  \n  ", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "solved_count": 26080, 
        "javascript_template": "/*\n    Reverse a doubly linked list, input list may also be empty\n    Node is defined as\n    var Node = function(data) {\n        this.data = data;\n        this.next = null;\n        this.prev = null;\n    }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction reverse(head) {\n\n}\n\n", 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2017-05-15T16:31:01.000Z", 
        "author_name": "harsha_s", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Easy", 
        "python3_template": "\"\"\"\n Reverse a doubly linked list\n head could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None, prev_node = None):\n       self.data = data\n       self.next = next_node\n       self.prev = prev_node\n\n return the head node of the updated list \n\"\"\"\ndef Reverse(head):\n  \n  \n  \n  \n  \n  \n  \n  ", 
        "require_unlock": true, 
        "cpp_template": "/*\n   Reverse a doubly linked list, input list may also be empty\n   Node is defined as\n   struct Node\n   {\n     int data;\n     Node *next;\n     Node *prev;\n   }\n*/\nNode* Reverse(Node* head)\n{\n    // Complete this function\n    // Do not write the main method. \n}", 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p><sub>This challenge is part of a tutorial track by <a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a></sub></p>\n\n<p>You\u2019re given the pointer to the head node of a doubly linked list. Reverse the order of the nodes in the list. The head node might be NULL to indicate that the list is empty.</p>\n\n<p><strong>Input Format</strong> <br>\nYou have to complete the <code>Node* Reverse(Node* head)</code> method which takes one argument - the head of the doubly linked list. You should NOT read any input from stdin/console.</p>\n\n<p><strong>Output Format</strong> <br>\nChange the <code>next</code> and <code>prev</code> pointers of all the nodes so that the direction of the list is reversed. Then <code>return</code> the head node of the reversed list. Do NOT print anything to stdout/console.</p>\n\n<p><strong>Sample Input</strong>  </p>\n\n<p>NULL <br>\nNULL &lt;-- 2 &lt;--&gt; 4 &lt;--&gt; 6 --&gt; NULL </p>\n\n<p><strong>Sample Output</strong></p>\n\n<pre><code>NULL\nNULL &lt;-- 6 &lt;--&gt; 4 &lt;--&gt; 2 --&gt; NULL\n</code></pre>\n\n<p><strong>Explanation</strong> <br>\n1. Empty list, so nothing to do. <br>\n2. 2,4,6 become 6,4,2 o reversing in the given doubly linked list. </p></div></div></div>", 
        "cpp14_template": "/*\n   Reverse a doubly linked list, input list may also be empty\n   Node is defined as\n   struct Node\n   {\n     int data;\n     Node *next;\n     Node *prev;\n   }\n*/\nNode* Reverse(Node* head)\n{\n    // Complete this function\n    // Do not write the main method. \n}", 
        "id": 1169, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "cpp", 
            "cpp14", 
            "java", 
            "javascript", 
            "python", 
            "python3"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": false, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "tagAncestry": [], 
        "custom": false, 
        "can_be_viewed": true, 
        "track": {
            "name": "Linked Lists", 
            "taxonomy": 1, 
            "track_slug": "data-structures", 
            "track_id": 17, 
            "track_name": "Data Structures", 
            "id": 39, 
            "rewards_system_enabled": null, 
            "slug": "linked-lists"
        }, 
        "primary_contest": null, 
        "factor": 5, 
        "moderator_or_support": false, 
        "is_solution_unlocked": false, 
        "preview": "Given the head node of a doubly linked list, reverse it.", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "java_template": "/*\n  Insert Node at the end of a linked list \n  head pointer input could be NULL as well for empty list\n  Node is defined as \n  class Node {\n     int data;\n     Node next;\n     Node prev;\n  }\n*/\n\nNode Reverse(Node head) {\n\n}", 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "javascript_template_tail": "", 
        "is_text": false, 
        "javascript_template_head": "", 
        "solved_score": 0.5, 
        "difficulty_score": "0.029", 
        "difficulty": 0.9731081926203877, 
        "active": true, 
        "show_skeliton": false, 
        "max_score": 5, 
        "slug": "reverse-a-doubly-linked-list", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 26629, 
        "name": "Reverse a doubly linked list", 
        "is_preview_contest": false, 
        "level": 23, 
        "success_ratio": 0.9793833790228698, 
        "total_count": 26629, 
        "created_at": "2013-10-24T18:53:52.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": "", 
        "countdown_time": 0, 
        "author_avatar": "https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": false, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
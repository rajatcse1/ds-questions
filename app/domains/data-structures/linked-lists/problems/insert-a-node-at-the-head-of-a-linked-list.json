{
    "status": true, 
    "model": {
        "tagAncestry": [], 
        "solved_count": 83826, 
        "can_solve": true, 
        "dynamic": true, 
        "epoch_starttime": null, 
        "difficulty_name": "Easy", 
        "compile_and_test": true, 
        "submit_disabled": false, 
        "company_id": null, 
        "languages": [
            "csharp", 
            "cpp", 
            "cpp14", 
            "java", 
            "javascript", 
            "python", 
            "python3"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": null, 
        "factor": 5, 
        "default_language": null, 
        "moderator_or_support": false, 
        "leaderboard_out_of_sync": null, 
        "contest_slug": "master", 
        "python3_template": "\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n\n \n\n\n", 
        "name": "Insert a node at the head of a linked list", 
        "level": 11, 
        "success_ratio": 0.9940588423636557, 
        "total_count": 84327, 
        "javascript_template_head": "", 
        "codechecker_handle": "", 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "is_skip_band_challenge": false, 
        "public_test_cases": true, 
        "available_translations": [], 
        "cpp_template": "/*\n  Insert Node at the begining of a linked list\n  Initially head pointer argument could be NULL for empty list\n  Node is defined as \n  struct Node\n  {\n     int data;\n     struct Node *next;\n  }\nreturn back the pointer to the head of the linked list in the below method.\n*/\nNode* Insert(Node *head,int data)\n{\n  // Complete this method\n}", 
        "is_preview_contest": false, 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "can_be_viewed": true, 
        "submitted_hackers_count": 84327, 
        "public_solutions": true, 
        "deleted": false, 
        "real_dynamic": false, 
        "difficulty_score": "0.013", 
        "difficulty": 0.9867938371239912, 
        "active": true, 
        "slug": "insert-a-node-at-the-head-of-a-linked-list", 
        "show_skeliton": null, 
        "player_count": 2, 
        "is_editorial_available": true, 
        "epoch_endtime": null, 
        "author_avatar": "https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg", 
        "judgebot_language": null, 
        "requirements_description": null, 
        "java_template": "/*\n  Insert Node at the beginning of a linked list \n  head pointer input could be NULL as well for empty list\n  Node is defined as \n  class Node {\n     int data;\n     Node next;\n  }\n*/\n// This is a \"method-only\" submission. \n// You only need to complete this method. \n\nNode Insert(Node head,int x) {\n    \n}", 
        "python_template": "\"\"\"\n Insert Node at the begining of a linked list\n head input could be None as well for empty list\n Node is defined as\n \n class Node(object):\n \n   def __init__(self, data=None, next_node=None):\n       self.data = data\n       self.next = next_node\n\n return back the head of the linked list in the below method. \n\"\"\"\n\ndef Insert(head, data):\n\n \n\n\n", 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "cpp14_template": "/*\n  Insert Node at the begining of a linked list\n  Initially head pointer argument could be NULL for empty list\n  Node is defined as \n  struct Node\n  {\n     int data;\n     struct Node *next;\n  }\nreturn back the pointer to the head of the linked list in the below method.\n*/\nNode* Insert(Node *head,int data)\n{\n  // Complete this method\n}", 
        "kind": "code", 
        "is_custom": false, 
        "csharp_template_head": "", 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "custom": false, 
        "preview": "Create and insert a new node at the head of a linked list", 
        "company": null, 
        "is_text": false, 
        "require_unlock": true, 
        "csharp_template": "    /*\n      Insert Node at the beginning of a linked list\n      head pointer input could be NULL as well for empty list\n      Node is defined as\n      class Node {\n         int Data;\n         Node Next;\n      }\n    */\n    // This is a \"method-only\" submission.\n    // You only need to complete this method.\n\n    public static Node Insert(Node head, int x)\n    {\n        \n    }\n", 
        "has_started": true, 
        "judgebot": null, 
        "custom_checker_language": null, 
        "custom_case": false, 
        "topics": [], 
        "updated_at": "2017-07-27T12:33:08.000Z", 
        "author_name": "harsha_s", 
        "onboarding": null, 
        "id": 1085, 
        "has_ended": false, 
        "javascript_template": "\n/*\n  Insert Node at the beginning of a linked list\n  head pointer input could be NULL as well for empty list\n  Node is defined as\n  var Node = function(data) {\n      this.data = data;\n      this.next = null;\n  }\n*/\n\n// This is a \"method-only\" submission.\n// You only need to complete this method.\n\nfunction insert(head, data) {\n\n}\n", 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "status": null, 
        "category": "ai", 
        "track": {
            "name": "Linked Lists", 
            "taxonomy": 1, 
            "track_slug": "data-structures", 
            "track_id": 17, 
            "track_name": "Data Structures", 
            "id": 39, 
            "rewards_system_enabled": null, 
            "slug": "linked-lists"
        }, 
        "javascript_template_tail": "", 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p><sub>This challenge is part of a tutorial track by <a href=\"http://www.youtube.com/mycodeschool\">MyCodeSchool</a> and is accompanied by a video lesson.</sub> </p>\n\n<p>You\u2019re given the pointer to the head node of a linked list and an integer to add to the list. Create a new node with the given integer, insert this node at the head of the linked list and return the new head node. The head pointer given may be null meaning that the initial list is empty.</p>\n\n<p><strong>Input Format</strong> <br>\nYou have to complete the <code>Node* Insert(Node* head, int data)</code> method which takes two arguments - the head of the linked list and the integer to insert. You should NOT read any input from stdin/console.</p>\n\n<p><strong>Output Format</strong> <br>\nInsert the new node at the head and <code>return</code> the head of the updated linked list. Do NOT print anything to stdout/console.</p>\n\n<p><strong>Sample Input</strong></p>\n\n<p>NULL  , data = 1 <br>\n1 --&gt; NULL , data = 2</p>\n\n<p><strong>Sample Output</strong>  </p>\n\n<pre><code>1 --&gt; NULL\n2 --&gt; 1 --&gt; NULL\n</code></pre>\n\n<p><strong>Explanation</strong> <br>\n1. We have an empty list, on inserting 1, 1 becomes new head. <br>\n2. We have a list with 1 as head, on inserting 2, 2 becomes the new head. </p>\n\n<p><strong>Video lesson</strong>  </p>\n\n</div></div></div>", 
        "max_score": 5, 
        "user_score": 0, 
        "created_at": "2013-10-16T12:05:08.000Z", 
        "countdown_time": 0, 
        "csharp_template_tail": ""
    }
}
{
    "status": true, 
    "model": {
        "solved_count": 2859, 
        "can_solve": true, 
        "dynamic": true, 
        "epoch_starttime": null, 
        "difficulty_name": "Medium", 
        "compile_and_test": true, 
        "submit_disabled": false, 
        "company_id": null, 
        "languages": [
            "cpp", 
            "java", 
            "cpp14"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": null, 
        "factor": 50, 
        "default_language": null, 
        "leaderboard_out_of_sync": null, 
        "contest_slug": "master", 
        "name": "Self Balancing Tree", 
        "moderator_or_support": false, 
        "success_ratio": 0.6897466827503016, 
        "total_count": 4145, 
        "level": 45, 
        "codechecker_handle": null, 
        "java_template_tail": "", 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "cpp14_template_head": "", 
        "is_skip_band_challenge": false, 
        "public_test_cases": true, 
        "available_translations": [], 
        "cpp_template": "/* Node is defined as :\ntypedef struct node\n{\n    int val;\n    struct node* left;\n    struct node* right;\n    int ht;\n} node; */\n\n\nnode * insert(node * root,int val)\n{\n\t\n  \n}", 
        "is_preview_contest": false, 
        "cpp_template_tail": "", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "can_be_viewed": true, 
        "submitted_hackers_count": 4145, 
        "public_solutions": true, 
        "deleted": false, 
        "real_dynamic": false, 
        "difficulty_score": "0.0", 
        "difficulty": 0.7, 
        "active": true, 
        "slug": "self-balancing-tree", 
        "show_skeliton": null, 
        "player_count": 2, 
        "is_editorial_available": false, 
        "epoch_endtime": null, 
        "cpp_template_head": "", 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/8d3fabd9-2280-4e75-8cca-9ea9d80415b1/150x150.png", 
        "judgebot_language": null, 
        "requirements_description": null, 
        "java_template": "\t/* Class node is defined as :\n    class Node \n    \tint val;\t//Value\n    \tint ht;\t\t//Height\n    \tNode left;\t//Left child\n    \tNode right;\t//Right child\n\n\t*/\n\n\tstatic Node insert(Node root,int val)\n    {\n    \t\n    }", 
        "tagAncestry": [], 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "cpp14_template": "/* Node is defined as :\ntypedef struct node\n{\n    int val;\n    struct node* left;\n    struct node* right;\n    int ht;\n} node; */\n\n\nnode * insert(node * root,int val)\n{\n\t\n  \n}", 
        "kind": "code", 
        "is_custom": false, 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "custom": false, 
        "preview": "Insert values in a self balancing binary search tree.", 
        "cpp14_template_tail": "", 
        "company": null, 
        "is_text": false, 
        "java_template_head": "", 
        "require_unlock": true, 
        "has_started": true, 
        "judgebot": null, 
        "custom_checker_language": null, 
        "custom_case": true, 
        "topics": [], 
        "updated_at": "2017-02-15T09:36:40.000Z", 
        "author_name": "vatsalchanana", 
        "onboarding": null, 
        "id": 9191, 
        "has_ended": false, 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "status": null, 
        "category": "ai", 
        "track": {
            "name": "Balanced Trees", 
            "taxonomy": 1, 
            "track_slug": "data-structures", 
            "track_id": 17, 
            "track_name": "Data Structures", 
            "id": 119, 
            "rewards_system_enabled": null, 
            "slug": "balanced-trees"
        }, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>An AVL tree (Georgy Adelson-Velsky and Landis' tree, named after the inventors) is a self-balancing binary search tree.  In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property.</p>\n\n<p>We define balance factor for each node as :</p>\n\n<pre><code>balanceFactor = height(left subtree) - height(right subtree)\n</code></pre>\n\n<p>The balance factor of any node of an AVL tree is in the integer range [-1,+1]. If after any modification in the tree, the balance factor becomes less than \u22121 or greater than +1, the subtree rooted at this node is unbalanced, and a rotation is needed.</p>\n\n<p><img src=\"https://s3.amazonaws.com/hr-challenge-images/0/1436854305-b167cc766c-AVL_Tree_Rebalancing.svg.png\" title=\"AVL_Tree_Rebalancing.svg.png\"></p>\n\n<p>(<a href=\"https://en.wikipedia.org/wiki/AVL_tree\">https://en.wikipedia.org/wiki/AVL_tree</a>)        </p>\n\n<p>You are given a pointer to the root of an AVL tree. You need to insert a value into this tree and perform the necessary rotations to ensure that it remains balanced. </p>\n\n<p><strong>Input Format</strong>  </p>\n\n<p>You are given a function,</p>\n\n<pre><code>node *insert(node * root,int new_val)\n{\n\n\n}\n</code></pre>\n\n<p>'node' is defined as :</p>\n\n<pre><code>struct node\n{\nint val;            //value\nstruct node* left;  //left child\nstruct node* right; //right child\nint ht;             //height of the node\n} node;\n</code></pre>\n\n<p>You only need to complete the function.     </p>\n\n<p>Note: All the values in the tree will be distinct. Height of a Null node is -1 and the height of the leaf node is 0.</p>\n\n<p><br>\n<strong>Output Format</strong>  </p>\n\n<p>Insert the new value into the tree and return a pointer to the root of the tree. Ensure that the tree remains balanced.</p>\n\n<p><strong>Sample Input</strong>  </p>\n\n<pre><code>    3\n  /  \\\n 2    4\n       \\\n        5\n</code></pre>\n\n<p>The value to be inserted is 6.</p>\n\n<p><strong>Sample Output</strong></p>\n\n<pre><code>    3\n  /  \\\n 2    5\n     / \\\n    4   6\n</code></pre>\n\n<p><strong>Explanation</strong></p>\n\n<p>After inserting 6 in the tree. the tree becomes:</p>\n\n<pre><code>    3 (Balance Factor = -2)\n  /  \\\n 2    4 (Balance Factor = -2)\n       \\\n        5 (Balance Factor = -1)\n         \\\n          6 (Balance Factor = 0)\n</code></pre>\n\n<p>Balance Factor of nodes 3 and 4 is no longer in the range [-1,1]. We need to perform a rotation to balance the tree. This is the right right case. We perform a single rotation to balance the tree.</p>\n\n<p>After performing the rotation, the tree becomes : </p>\n\n<pre><code>                              3 (Balance Factor = -1)\n                            /   \\\n      (Balance Factor = 0) 2     5 (Balance Factor = 0)\n                                / \\\n           (Balance Factor = 0)4   6 (Balance Factor = 0)\n</code></pre></div></div></div>", 
        "max_score": 50, 
        "user_score": 0, 
        "created_at": "2015-07-14T06:26:11.000Z", 
        "countdown_time": 0
    }
}
{
    "status": true, 
    "model": {
        "tagAncestry": [], 
        "solved_count": 57523, 
        "python_template_head": "class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n", 
        "can_solve": true, 
        "dynamic": true, 
        "epoch_starttime": null, 
        "python3_skeliton_head": "class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n", 
        "difficulty_name": "Easy", 
        "compile_and_test": true, 
        "submit_disabled": false, 
        "company_id": null, 
        "languages": [
            "cpp", 
            "cpp14", 
            "java", 
            "java8", 
            "python", 
            "python3", 
            "swift"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": null, 
        "factor": 10, 
        "default_language": null, 
        "leaderboard_out_of_sync": null, 
        "java8_skeliton_tail": "\tpublic static Node insert(Node root, int data) {\n        if(root == null){\n            return new Node(data);\n        }\n        else {\n            Node cur;\n            if(data <= root.data){\n                cur = insert(root.left, data);\n                root.left = cur;\n            }\n            else{\n                cur = insert(root.right, data);\n                root.right = cur;\n            }\n            return root;\n        }\n    }\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        Node root = null;\n        while(t-- > 0){\n            int data = scan.nextInt();\n            root = insert(root, data);\n        }\n        scan.close();\n        int height = height(root);\n        System.out.println(height);\n    }\t\n}", 
        "python_skeliton_head": "class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n", 
        "contest_slug": "master", 
        "swift_skeliton_tail": "\n} // End of Tree class\n\nvar root: Node?\nlet tree = Tree()\n\nlet t = Int(readLine()!)!\n\nfor _ in 0..<t {\n    root = tree.insert(root: root, data: Int(readLine()!)!)\n}\n\nprint(tree.getHeight(root: root))\n", 
        "python3_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    ", 
        "name": "Tree: Height of a Binary Tree", 
        "level": 12, 
        "success_ratio": 0.9620356897964645, 
        "total_count": 59793, 
        "moderator_or_support": false, 
        "codechecker_handle": null, 
        "java_template_tail": "\tpublic static Node insert(Node root, int data) {\n        if(root == null){\n            return new Node(data);\n        }\n        else {\n            Node cur;\n            if(data <= root.data){\n                cur = insert(root.left, data);\n                root.left = cur;\n            }\n            else{\n                cur = insert(root.right, data);\n                root.right = cur;\n            }\n            return root;\n        }\n    }\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        Node root = null;\n        while(t-- > 0){\n            int data = scan.nextInt();\n            root = insert(root, data);\n        }\n        scan.close();\n        int height = height(root);\n        System.out.println(height);\n    }\t\n}", 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "cpp14_template_head": "#include <iostream>\n#include <cstddef>\n\nusing namespace std;\t\n\nclass Node{\n    public:\n        int data;\n        Node *left;\n        Node *right;\n        Node(int d){\n            data = d;\n            left = NULL;\n            right = NULL;\n        }\n};\n\nclass Solution {\n    public:\n  \t\tNode* insert(Node* root, int data) {\n            if(root == NULL) {\n                return new Node(data);\n            }\n            else {\n                Node* cur;\n                if(data <= root->data){\n                    cur = insert(root->left, data);\n                    root->left = cur;\n                }\n                else{\n                    cur = insert(root->right, data);\n                    root->right = cur;\n               }\n\n               return root;\n           }\n        }", 
        "java8_template_head": "import java.util.*;\nimport java.io.*;\nclass Node {\n    Node left;\n    Node right;\n    int data;\n    \n    Node(int data) {\n        this.data = data;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {", 
        "is_skip_band_challenge": false, 
        "python_template_tail": "\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n", 
        "public_test_cases": true, 
        "available_translations": [], 
        "swift_skeliton_head": "// Start of Node class\nclass Node {\n    var data: Int\n    var left: Node?\n    var right: Node?\n\n    init(d : Int) {\n        data  = d\n    }\n} // End of Node class\n\n// Start of Tree class\nclass Tree {\n    func insert(root: Node?, data: Int) -> Node? {\n        if root == nil {\n            return Node(d: data)\n        }\n\n        if data <= (root?.data)! {\n            root?.left = insert(root: root?.left, data: data)\n        } else {\n            root?.right = insert(root: root?.right, data: data)\n        }\n\n        return root\n    }\n    ", 
        "cpp_template": "\n/*The tree node has data, left child and right child \nclass Node {\n    int data;\n    Node* left;\n    Node* right;\n};\n\n*/\n    int height(Node* root) {\n        // Write your code here.\n    }\n  ", 
        "is_preview_contest": false, 
        "cpp_template_tail": "}; //End of Solution\n\nint main() {\n    Solution myTree;\n    Node* root = NULL;\n    int t;\n    int data;\n\n    cin >> t;\n\n    while(t-- > 0){\n        cin >> data;\n        root = myTree.insert(root, data);\n    }\n    int height = myTree.height(root);\n    cout << height;\n\n    return 0;\n}\n", 
        "category": "ai", 
        "php_template": "\tpublic function getHeight($root){\n        // Write your code here\n    }\n", 
        "can_be_viewed": true, 
        "swift_template_head": "// Start of Node class\nclass Node {\n    var data: Int\n    var left: Node?\n    var right: Node?\n\n    init(d : Int) {\n        data  = d\n    }\n} // End of Node class\n\n// Start of Tree class\nclass Tree {\n    func insert(root: Node?, data: Int) -> Node? {\n        if root == nil {\n            return Node(d: data)\n        }\n\n        if data <= (root?.data)! {\n            root?.left = insert(root: root?.left, data: data)\n        } else {\n            root?.right = insert(root: root?.right, data: data)\n        }\n\n        return root\n    }\n    ", 
        "java8_template_tail": "\tpublic static Node insert(Node root, int data) {\n        if(root == null){\n            return new Node(data);\n        }\n        else {\n            Node cur;\n            if(data <= root.data){\n                cur = insert(root.left, data);\n                root.left = cur;\n            }\n            else{\n                cur = insert(root.right, data);\n                root.right = cur;\n            }\n            return root;\n        }\n    }\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        Node root = null;\n        while(t-- > 0){\n            int data = scan.nextInt();\n            root = insert(root, data);\n        }\n        scan.close();\n        int height = height(root);\n        System.out.println(height);\n    }\t\n}", 
        "public_solutions": true, 
        "deleted": false, 
        "real_dynamic": false, 
        "difficulty_score": "0.0", 
        "difficulty": 0.9, 
        "active": true, 
        "slug": "tree-height-of-a-binary-tree", 
        "show_skeliton": true, 
        "player_count": 2, 
        "is_editorial_available": true, 
        "submitted_hackers_count": 59793, 
        "epoch_endtime": null, 
        "cpp_template_head": "#include <iostream>\n#include <cstddef>\n\nusing namespace std;\t\n\nclass Node{\n    public:\n        int data;\n        Node *left;\n        Node *right;\n        Node(int d){\n            data = d;\n            left = NULL;\n            right = NULL;\n        }\n};\n\nclass Solution {\n    public:\n  \t\tNode* insert(Node* root, int data) {\n            if(root == NULL) {\n                return new Node(data);\n            }\n            else {\n                Node* cur;\n                if(data <= root->data){\n                    cur = insert(root->left, data);\n                    root->left = cur;\n                }\n                else{\n                    cur = insert(root->right, data);\n                    root->right = cur;\n               }\n\n               return root;\n           }\n        }", 
        "cpp14_skeliton_head": "#include <iostream>\n#include <cstddef>\n\nusing namespace std;\t\n\nclass Node{\n    public:\n        int data;\n        Node *left;\n        Node *right;\n        Node(int d){\n            data = d;\n            left = NULL;\n            right = NULL;\n        }\n};\n\nclass Solution {\n    public:\n  \t\tNode* insert(Node* root, int data) {\n            if(root == NULL) {\n                return new Node(data);\n            }\n            else {\n                Node* cur;\n                if(data <= root->data){\n                    cur = insert(root->left, data);\n                    root->left = cur;\n                }\n                else{\n                    cur = insert(root->right, data);\n                    root->right = cur;\n               }\n\n               return root;\n           }\n        }", 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/8d3fabd9-2280-4e75-8cca-9ea9d80415b1/150x150.png", 
        "judgebot_language": null, 
        "requirements_description": null, 
        "java_template": "\t/*\n    class Node \n    \tint data;\n    \tNode left;\n    \tNode right;\n\t*/\n\tstatic int height(Node root) {\n      \t// Write your code here.\n    }\n", 
        "python3_template_tail": "\n\ntree = BinarySearchTree()\nt = int(input())\n\nfor _ in range(t):\n    x = int(input())\n    tree.create(x)\n\nprint(height(tree.root))\n", 
        "python_template": "# Enter your code here. Read input from STDIN. Print output to STDOUT\n'''\nclass Node:\n      def __init__(self,info): \n          self.info = info  \n          self.left = None  \n          self.right = None \n           \n\n       // this is a node of the tree , which contains info as data, left , right\n'''\ndef height(root):\n    ", 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "cpp14_template": "\n/*The tree node has data, left child and right child \nclass Node {\n    int data;\n    Node* left;\n    Node* right;\n};\n\n*/\n    int height(Node* root) {\n        // Write your code here.\n    }", 
        "kind": "code", 
        "is_custom": false, 
        "ruby_template": "    def getHeight(root)\n      #Write your code here\n    end\nend\n", 
        "java8_template": "\t/*\n    class Node \n    \tint data;\n    \tNode left;\n    \tNode right;\n\t*/\n\tstatic int height(Node root) {\n      \t// Write your code here.\n    }\n", 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "custom": false, 
        "preview": "Given a binary tree, print its height.", 
        "cpp14_template_tail": "}; //End of Solution\n\nint main() {\n    Solution myTree;\n    Node* root = NULL;\n    int t;\n    int data;\n\n    cin >> t;\n\n    while(t-- > 0){\n        cin >> data;\n        root = myTree.insert(root, data);\n    }\n    int height = myTree.height(root);\n    cout << height;\n\n    return 0;\n}\n\n", 
        "company": null, 
        "java_skeliton_head": "import java.util.*;\nimport java.io.*;\nclass Node {\n    Node left;\n    Node right;\n    int data;\n    \n    Node(int data) {\n        this.data = data;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {", 
        "python3_template_head": "class Node:\n    def __init__(self,info): \n        self.info = info  \n        self.left = None  \n        self.right = None \n        self.level = None \n\n    def __str__(self):\n        return str(self.info) \n\nclass BinarySearchTree:\n    def __init__(self): \n        self.root = None\n\n    def create(self, val):  \n        if self.root == None:\n            self.root = Node(val)\n        else:\n            current = self.root\n         \n            while True:\n                if val < current.info:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(val)\n                        break\n                elif val > current.info:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(val)\n                        break\n                else:\n                    break\n\n", 
        "java_template_head": "import java.util.*;\nimport java.io.*;\nclass Node {\n    Node left;\n    Node right;\n    int data;\n    \n    Node(int data) {\n        this.data = data;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {", 
        "python3_skeliton_tail": "\n\ntree = BinarySearchTree()\nt = int(input())\n\nfor _ in range(t):\n    x = int(input())\n    tree.create(x)\n\nprint(height(tree.root))\n", 
        "cpp_skeliton_head": "#include <iostream>\n#include <cstddef>\n\nusing namespace std;\t\n\nclass Node{\n    public:\n        int data;\n        Node *left;\n        Node *right;\n        Node(int d){\n            data = d;\n            left = NULL;\n            right = NULL;\n        }\n};\n\nclass Solution {\n    public:\n  \t\tNode* insert(Node* root, int data) {\n            if(root == NULL) {\n                return new Node(data);\n            }\n            else {\n                Node* cur;\n                if(data <= root->data){\n                    cur = insert(root->left, data);\n                    root->left = cur;\n                }\n                else{\n                    cur = insert(root->right, data);\n                    root->right = cur;\n               }\n\n               return root;\n           }\n        }", 
        "require_unlock": true, 
        "csharp_template": "\tstatic int getHeight(Node root){\n        // Write your code here\n    }", 
        "has_started": true, 
        "judgebot": null, 
        "swift_template_tail": "\n} // End of Tree class\n\nvar root: Node?\nlet tree = Tree()\n\nlet t = Int(readLine()!)!\n\nfor _ in 0..<t {\n    root = tree.insert(root: root, data: Int(readLine()!)!)\n}\n\nprint(tree.getHeight(root: root))\n", 
        "custom_checker_language": null, 
        "custom_case": true, 
        "topics": [], 
        "updated_at": "2017-06-08T09:59:44.000Z", 
        "author_name": "vatsalchanana", 
        "onboarding": null, 
        "id": 8793, 
        "has_ended": false, 
        "java8_skeliton_head": "import java.util.*;\nimport java.io.*;\nclass Node {\n    Node left;\n    Node right;\n    int data;\n    \n    Node(int data) {\n        this.data = data;\n        left = null;\n        right = null;\n    }\n}\n\nclass Solution {", 
        "javascript_template": "        // Write your code here", 
        "java_skeliton_tail": "\tpublic static Node insert(Node root, int data) {\n        if(root == null){\n            return new Node(data);\n        }\n        else {\n            Node cur;\n            if(data <= root.data){\n                cur = insert(root.left, data);\n                root.left = cur;\n            }\n            else{\n                cur = insert(root.right, data);\n                root.right = cur;\n            }\n            return root;\n        }\n    }\n    public static void main(String[] args) {\n        Scanner scan = new Scanner(System.in);\n        int t = scan.nextInt();\n        Node root = null;\n        while(t-- > 0){\n            int data = scan.nextInt();\n            root = insert(root, data);\n        }\n        scan.close();\n        int height = height(root);\n        System.out.println(height);\n    }\t\n}", 
        "cpp_skeliton_tail": "}; //End of Solution\n\nint main() {\n    Solution myTree;\n    Node* root = NULL;\n    int t;\n    int data;\n\n    cin >> t;\n\n    while(t-- > 0){\n        cin >> data;\n        root = myTree.insert(root, data);\n    }\n    int height = myTree.height(root);\n    cout << height;\n\n    return 0;\n}\n", 
        "c_template": "int getHeight(Node* root){\n    // Write your code here\n}", 
        "python_skeliton_tail": "\n\ntree = BinarySearchTree()\nt = int(raw_input())\n\nfor _ in xrange(t):\n    x = int(raw_input())\n    tree.create(x)\n\nprint height(tree.root)\n", 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "status": null, 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "track": {
            "name": "Trees", 
            "taxonomy": 1, 
            "track_slug": "data-structures", 
            "track_id": 17, 
            "track_name": "Data Structures", 
            "id": 96, 
            "rewards_system_enabled": null, 
            "slug": "trees"
        }, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>The height of a binary tree is the number of edges between the tree's root and its furthest leaf. This means that a tree containing a single node has a height of <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"></path></g></svg></span>.</p>\n\n<p>Complete the <em>getHeight</em> function provided in your editor so that it returns the height of a binary tree. This function has a parameter, <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.143ex\" height=\"2.009ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -719.6 1784 865.1\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path><g transform=\"translate(451,0)\"><path stroke-width=\"1\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g transform=\"translate(937,0)\"><path stroke-width=\"1\" d=\"M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z\"></path></g><g transform=\"translate(1422,0)\"><path stroke-width=\"1\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g></g></svg></span>, which is a pointer to the root node of a binary tree. <br>\n<strong>Note</strong> -The Height of binary tree with single node is taken as zero.  </p></div></div></div><div class='challenge_input_format'><div class='msB challenge_input_format_title'><p><strong>Input Format</strong></p></div><div class='msB challenge_input_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>You do not need to read any input from stdin. Our grader will pass the root node of a binary tree to your <em>getHeight</em> function.</p></div></div></div><div class='challenge_output_format'><div class='msB challenge_output_format_title'><p><strong>Output Format</strong></p></div><div class='msB challenge_output_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Your function should return a single integer denoting the height of the binary tree.</p></div></div></div><div class='challenge_sample_input'><div class='msB challenge_sample_input_title'><p><strong>Sample Input</strong></p></div><div class='msB challenge_sample_input_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p><img src=\"https://s3.amazonaws.com/hr-challenge-images/17175/1459894869-6bb53ce6eb-BST.png\" alt=\"BST.png\" title=\"\"></p>\n\n<p><strong>Note:</strong> A <em>binary search tree</em> is a binary tree in which the value of each parent node's left child is less than the value the parent node, and the value of the parent node is less than the value of its right child.</p></div></div></div><div class='challenge_sample_output'><div class='msB challenge_sample_output_title'><p><strong>Sample Output</strong></p></div><div class='msB challenge_sample_output_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>3\n</code></pre></div></div></div><div class='challenge_explanation'><div class='msB challenge_explanation_title'><p><strong>Explanation</strong></p></div><div class='msB challenge_explanation_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>The longest root-to-leaf path is shown below:</p>\n\n<p><img src=\"https://s3.amazonaws.com/hr-challenge-images/17175/1459895368-4955f9ce74-LongestRTL.png\" alt=\"Longest RTL.png\" title=\"\"></p>\n\n<p>There are <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></svg></span> nodes in this path that are connected by <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></svg></span> edges, meaning our binary tree's <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.78ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -791.3 4641.6 1080.4\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path><g transform=\"translate(576,0)\"><path stroke-width=\"1\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g transform=\"translate(1043,0)\"><path stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g transform=\"translate(1388,0)\"><path stroke-width=\"1\" d=\"M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z\"></path></g><g transform=\"translate(1869,0)\"><path stroke-width=\"1\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g transform=\"translate(2445,0)\"><path stroke-width=\"1\" d=\"M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z\"></path></g><g transform=\"translate(3084,0)\"><path stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g transform=\"translate(4141,0)\"><path stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></g></svg></span>. Thus, we print <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"></path></g></svg></span> as our answer.</p></div></div></div>", 
        "is_text": false, 
        "cpp14_skeliton_tail": "}; //End of Solution\n\nint main() {\n    Solution myTree;\n    Node* root = NULL;\n    int t;\n    int data;\n\n    cin >> t;\n\n    while(t-- > 0){\n        cin >> data;\n        root = myTree.insert(root, data);\n    }\n    int height = myTree.height(root);\n    cout << height;\n\n    return 0;\n}\n\n", 
        "max_score": 10, 
        "user_score": 0, 
        "created_at": "2015-06-17T03:49:28.000Z", 
        "countdown_time": 0, 
        "swift_template": "\n\n    func getHeight(root: Node?) -> Int {\n    \t// Complete the function\n    } // End of getHeight function"
    }
}
{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 81, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2017-07-11T15:46:40.000Z", 
        "author_name": "devuy11", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Advanced", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Jaggu is a little kid and he likes playing with water balloons. He took 1 million ( 10<sup>6</sup> ) empty buckets and he filled the bucket with water balloons under the instruction of his sister Ishika. <br>\nHis sister gives him two types of commands:<br></p>\n\n<p><code>R pos1 pos2</code> which implies that jaggu needs to tell her what is the total number of water balloons in the bucket from pos1 to pos2 (both included).</p>\n\n<p><code>U pos M plus</code> which implies that he has to work like the function </p>\n\n<p>Update(pos,M,plus)</p>\n\n<pre><code>void Update(int pos,int M,int plus)\n{\n    int N=1000000;  //1 million\n    for (int i=1;i&lt;=50;i++)\n    {\n        int back = pos\n        for(int j=1;j&lt;=1000;j++)\n        {\n            add M water ballons at bucket pos\n            int s,in=__builtin_popcount(pos);\n            for(int k=0;;k++)\n            {\n                s=pos+pow(2,k)\n                if( __builtin_popcount(s) &lt;= in )\n                {\n                    in = __builtin_popcount(s)\n                    pos = s;\n                    if(pos&gt;N)       break;\n                    add M water ballons at bucket pos\n                }\n            }\n            pos = pos - N\n        }\n        pos = back+plus;\n        if(pos&gt;N) pos-=N;\n    }\n}\n</code></pre>\n\n<p>Jaggu is too lazy to put the water ballons in the bucket. Afraid that he might be caught for not doing what his sister told him to do so, he asks your help to provide correct answers  for each of his sister's query. .</p>\n\n<p><strong>Input Format</strong></p>\n\n<p>First line contains Q, number of queries to follow.</p>\n\n<p>Next Q line follows , which can be either an Update Query or Report Query.Each Update Query is followed by atleast 1 report query.</p>\n\n<p><strong>Output Format</strong></p>\n\n<p>For each report query , output the answer in a separate line.</p>\n\n<p><strong>Constraints</strong></p>\n\n<p>1 \u2264 Q \u2264 2 * 10<sup>5</sup></p>\n\n<p>1 \u2264 pos1,pos2,pos \u2264 10<sup>6</sup></p>\n\n<p>pos1 \u2264 pos2</p>\n\n<p>1 \u2264 M \u2264 10</p>\n\n<p>1 \u2264 plus \u2264 999999</p>\n\n<p><strong>Sample Input</strong></p>\n\n<pre><code>2\nU 692778 7 291188\nR 636916 747794\n</code></pre>\n\n<p><strong>Sample Output</strong></p>\n\n<pre><code>378 \n</code></pre>\n\n<p><strong>Explanation</strong></p>\n\n<p>Follow the code above to get the answer.</p>\n\n<p><strong>Note</strong> </p>\n\n<ol>\n<li><p>Input is randomly generated.</p></li>\n<li><p>__builtin_popcount(x) gives the number of set bits in binary representation of x.</p></li>\n<li><p>pow(2,k) denotes 2 raised to k , i.e. exponentiation of 2.</p></li>\n</ol>\n\n<p>Timelimit is 3 times the timelimit mentioned <a href=\"https://www.hackerrank.com/environment\">here</a></p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 2580, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "whitespace", 
            "sbcl", 
            "java8", 
            "octave", 
            "racket", 
            "rust", 
            "bash", 
            "r", 
            "swift", 
            "fortran", 
            "cpp14", 
            "coffeescript", 
            "ada", 
            "pypy", 
            "pypy3", 
            "elixir", 
            "kotlin", 
            "julia"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": null, 
        "can_be_viewed": true, 
        "track": {
            "name": "Advanced", 
            "taxonomy": 1, 
            "track_slug": "data-structures", 
            "track_id": 17, 
            "track_name": "Data Structures", 
            "id": 32, 
            "rewards_system_enabled": null, 
            "slug": "data-structures"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-08-07T15:02:49.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1402934400, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 945, 
            "primary_track_id": 3, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": null, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "1 challenge every day! ", 
            "effective_epoch_endtime": 1403539200, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Algorithms", 
                "id": 3, 
                "priority": 14, 
                "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
                "rewards_system_enabled": true, 
                "slug": "algorithms"
            }, 
            "primary_tag_id": 3081, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -99816593.88270009, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "Welcome to the Week 5 of our daily challenges! Each day you'll get to solve a challenge whose difficulty level increases as the week progresses! <br />\n\nTo solve the final challenge, you're given an entire weekend . <br />\n\nThere are 5 challenges in total!!  <br /> <br />\n\nTie-breaking rule is a little different for this contest. For each challenge, we calculate your <em>solved time, t</em>  <br />\n\n<em> t = submit - open </em> <br />\n\nwhere <em>submit</em> is the time you submitted the solution, and <em>open</em> is the time you opened the challenge. This way, you do not have to worry about solving the challenge as soon as it becomes available. <br />\n\nRead more about this contest  <a href=\"/blog/daily-challenge\">here</a>.", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -99816593.8753282, 
            "challenges_count": 5, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2014-06-23T16:00:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "w5", 
            "hide_leaderboard": null, 
            "kind": "weekly", 
            "comment_live_sync": null, 
            "name": "Weekly Challenges - Week 5", 
            "is_multi_round": false, 
            "created_at": "2014-05-26T10:19:42.000Z", 
            "epoch_endtime": 1403539200, 
            "company_associated_contest": null, 
            "rating_category": "Algorithms", 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-06-16T16:00:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 103
        }, 
        "factor": 150, 
        "is_solution_unlocked": false, 
        "preview": "Given 1 million empty buckets you have to do two kinds of operations. Add water balloons given some conditions and report number of ballonns in a given range.", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.613", 
        "difficulty": 0.39814814814814814, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 150, 
        "slug": "jagia-playing-with-numbers", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 162, 
        "name": "Jaggu Playing with Balloons", 
        "is_preview_contest": false, 
        "level": 97, 
        "success_ratio": 0.5, 
        "total_count": 162, 
        "created_at": "2014-06-07T18:32:08.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [
            {
                "body": "**\u041b\u0435\u0433\u0435\u043d\u0434\u0430**\n\n\u041b\u0435\u0433\u0435\u043d\u0434\u0430, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u0430\u044f \u0434\u0430\u043b\u0435\u0435, \u043f\u0435\u0440\u0435\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0430\n\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0447\u0438\u043a\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0433 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043b\u0435\u0433\u0435\u043d\u0434\u0443 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\n\u043a\u043e\u043d\u0442\u0435\u0441\u0442\u0435.\n\n\u0412\u0430\u043c \u0437\u0430\u0434\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 10<sup>6</sup> \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, A[1..10<sup>6</sup>]. \u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\n\u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u0430\u0432\u043d\u044b \u043d\u0443\u043b\u044e. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c Q \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0432\u0443\u0445 \u0442\u0438\u043f\u043e\u0432:\n\n\u00abR pos1 pos2\u00bb: \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 A[pos1] + A[pos1 + 1] + \u2026 + A[pos2]  \n\u00abU pos M plus\u00bb: \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e  \n\n\tvoid Update(int pos,int M,int plus)\n    {\n    \tint N=1000000;\t//1 million\n        for (int i=1;i<=50;i++)\n        {\n        \tint back = pos\n            for(int j=1;j<=1000;j++)\n            {\n                add M water ballons at bucket pos\n                int s,x=0,in=__builtin_popcount(pos);\n                for(int k=0;;k++)\n                {\n                    s=pos+2^k\n                    if( __builtin_popcount(s) <= in )\n                    {\n                        in = __builtin_popcount(s)\n                        pos = s;\n                        if(pos>N)       break;\n                        add M water ballons at bucket pos\n                    }\n                }\n                pos = pos - N\n            }\n            pos = back+plus;\n            if(pos>N) pos-=N;\n        }\n\t}\n\n\u0417\u0434\u0435\u0441\u044c __\\builtin\\_popcount(x)\n\n \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0445 \u0431\u0438\u0442\u043e\u0432 \n1\u0432 \u0431\u0438\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0447\u0438\u0441\u043b\u0430 x.\n\u0412\u0430\u043c \u0437\u0430\u0434\u0430\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435\n\u0438\u0445. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0432\u044b\u0432\u043e\u0434 \u0441\u0443\u043c\u043c\u044b.\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445**  \n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e Q, \u0434\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 Q \u0441\u0442\u0440\u043e\u043a, \u0432\n\u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u0430\u043a \u0432\n\u043b\u0435\u0433\u0435\u043d\u0434\u0435 \u0437\u0430\u0434\u0430\u0447\u0438)\n. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0435.\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445** \n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0432\u044b\u0432\u043e\u0434 \u0441\u0443\u043c\u043c\u044b, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0441\u043a\u043e\u043c\u0443\u044e \u0441\u0443\u043c\u043c\u0443.\n\n**\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f** \n1 \u2264 Q \u2264 200000  \n1 \u2264 pos1, pos2, pos \u2264 1000000  \npos1 \u2264 pos2  \n1 \u2264 M \u2264 10  \n1 \u2264 plus \u2264 999999  \n\n**\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445**\n\n    2\n    U 692778 7 291188\n    R 636916 747794\n\n**\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445**\n\n    378\n\nTimelimit is 3 times the timelimit mentioned [here](https://www.hackerrank.com/environment)", 
                "problem_statement_fields": {
                    "sample_output": " ", 
                    "problem_statement": "**\u041b\u0435\u0433\u0435\u043d\u0434\u0430**\n\n\u041b\u0435\u0433\u0435\u043d\u0434\u0430, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u0430\u044f \u0434\u0430\u043b\u0435\u0435, \u043f\u0435\u0440\u0435\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0430\n\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0447\u0438\u043a\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0433 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043b\u0435\u0433\u0435\u043d\u0434\u0443 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\n\u043a\u043e\u043d\u0442\u0435\u0441\u0442\u0435.\n\n\u0412\u0430\u043c \u0437\u0430\u0434\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 10<sup>6</sup> \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, A[1..10<sup>6</sup>]. \u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\n\u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u0430\u0432\u043d\u044b \u043d\u0443\u043b\u044e. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c Q \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0432\u0443\u0445 \u0442\u0438\u043f\u043e\u0432:\n\n\u00abR pos1 pos2\u00bb: \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 A[pos1] + A[pos1 + 1] + \u2026 + A[pos2]  \n\u00abU pos M plus\u00bb: \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e  \n\n\tvoid Update(int pos,int M,int plus)\n    {\n    \tint N=1000000;\t//1 million\n        for (int i=1;i<=50;i++)\n        {\n        \tint back = pos\n            for(int j=1;j<=1000;j++)\n            {\n                add M water ballons at bucket pos\n                int s,x=0,in=__builtin_popcount(pos);\n                for(int k=0;;k++)\n                {\n                    s=pos+2^k\n                    if( __builtin_popcount(s) <= in )\n                    {\n                        in = __builtin_popcount(s)\n                        pos = s;\n                        if(pos>N)       break;\n                        add M water ballons at bucket pos\n                    }\n                }\n                pos = pos - N\n            }\n            pos = back+plus;\n            if(pos>N) pos-=N;\n        }\n\t}\n\n\u0417\u0434\u0435\u0441\u044c __\\builtin\\_popcount(x)\n\n \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0445 \u0431\u0438\u0442\u043e\u0432 \n1\u0432 \u0431\u0438\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0447\u0438\u0441\u043b\u0430 x.\n\u0412\u0430\u043c \u0437\u0430\u0434\u0430\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435\n\u0438\u0445. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0432\u044b\u0432\u043e\u0434 \u0441\u0443\u043c\u043c\u044b.\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445**  \n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e Q, \u0434\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 Q \u0441\u0442\u0440\u043e\u043a, \u0432\n\u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u0430\u043a \u0432\n\u043b\u0435\u0433\u0435\u043d\u0434\u0435 \u0437\u0430\u0434\u0430\u0447\u0438)\n. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0435.\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445** \n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0432\u044b\u0432\u043e\u0434 \u0441\u0443\u043c\u043c\u044b, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0441\u043a\u043e\u043c\u0443\u044e \u0441\u0443\u043c\u043c\u0443.\n\n**\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f** \n1 \u2264 Q \u2264 200000  \n1 \u2264 pos1, pos2, pos \u2264 1000000  \npos1 \u2264 pos2  \n1 \u2264 M \u2264 10  \n1 \u2264 plus \u2264 999999  \n\n**\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445**\n\n    2\n    U 692778 7 291188\n    R 636916 747794\n\n**\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445**\n\n    378\n\nTimelimit is 3 times the timelimit mentioned [here](https://www.hackerrank.com/environment)", 
                    "input_format": " ", 
                    "explanation": " ", 
                    "sample_input": " ", 
                    "output_format": " "
                }, 
                "name": "\u041c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u0439 \u0414\u0436\u0430\u0433\u0443", 
                "language": "Russian", 
                "challenge_id": 2580, 
                "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p><strong>\u041b\u0435\u0433\u0435\u043d\u0434\u0430</strong></p>\n\n<p>\u041b\u0435\u0433\u0435\u043d\u0434\u0430, \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u0430\u044f \u0434\u0430\u043b\u0435\u0435, \u043f\u0435\u0440\u0435\u0444\u043e\u0440\u043c\u0443\u043b\u0438\u0440\u043e\u0432\u0430\u043d\u0430 \u0438 \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0430\n\u043f\u0435\u0440\u0435\u0432\u043e\u0434\u0447\u0438\u043a\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0447\u0438\u0442\u0430\u0442\u0435\u043b\u044c \u043c\u043e\u0433 \u043b\u0443\u0447\u0448\u0435 \u043f\u043e\u043d\u044f\u0442\u044c \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0437\u0430\u0434\u0430\u0447\u0438.\n\u041e\u0440\u0438\u0433\u0438\u043d\u0430\u043b\u044c\u043d\u0443\u044e \u043b\u0435\u0433\u0435\u043d\u0434\u0443 \u0432\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u043f\u0440\u043e\u0447\u0438\u0442\u0430\u0442\u044c \u043d\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435 \u0437\u0430\u0434\u0430\u0447\u0438 \u0432\n\u043a\u043e\u043d\u0442\u0435\u0441\u0442\u0435.</p>\n\n<p>\u0412\u0430\u043c \u0437\u0430\u0434\u0430\u043d \u043c\u0430\u0441\u0441\u0438\u0432, \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437 10<sup>6</sup> \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, A[1..10<sup>6</sup>]. \u0418\u0437\u043d\u0430\u0447\u0430\u043b\u044c\u043d\u043e\n\u0432\u0441\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u0430\u0441\u0441\u0438\u0432\u0430 \u0440\u0430\u0432\u043d\u044b \u043d\u0443\u043b\u044e. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c Q \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.\n\u041a\u0430\u0436\u0434\u044b\u0439 \u0437\u0430\u043f\u0440\u043e\u0441 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u0434\u043d\u043e\u0433\u043e \u0438\u0437 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0434\u0432\u0443\u0445 \u0442\u0438\u043f\u043e\u0432:</p>\n\n<p>\u00abR pos1 pos2\u00bb: \u0432\u044b\u0432\u0435\u0441\u0442\u0438 \u0441\u0443\u043c\u043c\u0443 A[pos1] + A[pos1 + 1] + \u2026 + A[pos2] <br>\n\u00abU pos M plus\u00bb: \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0443\u044e \u0444\u0443\u043d\u043a\u0446\u0438\u044e  </p>\n\n<pre><code>void Update(int pos,int M,int plus)\n{\n    int N=1000000;  //1 million\n    for (int i=1;i&lt;=50;i++)\n    {\n        int back = pos\n        for(int j=1;j&lt;=1000;j++)\n        {\n            add M water ballons at bucket pos\n            int s,x=0,in=__builtin_popcount(pos);\n            for(int k=0;;k++)\n            {\n                s=pos+2^k\n                if( __builtin_popcount(s) &lt;= in )\n                {\n                    in = __builtin_popcount(s)\n                    pos = s;\n                    if(pos&gt;N)       break;\n                    add M water ballons at bucket pos\n                }\n            }\n            pos = pos - N\n        }\n        pos = back+plus;\n        if(pos&gt;N) pos-=N;\n    }\n}\n</code></pre>\n\n<p>\u0417\u0434\u0435\u0441\u044c __\\builtin_popcount(x)</p>\n\n<p>\u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0435\u0434\u0438\u043d\u0438\u0447\u043d\u044b\u0445 \u0431\u0438\u0442\u043e\u0432 \n1\u0432 \u0431\u0438\u0442\u043e\u0432\u043e\u043c \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u0447\u0438\u0441\u043b\u0430 x.\n\u0412\u0430\u043c \u0437\u0430\u0434\u0430\u043d\u044b \u0437\u0430\u043f\u0440\u043e\u0441\u044b, \u0441\u0433\u0435\u043d\u0435\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u0435\n\u0438\u0445. \u0413\u0430\u0440\u0430\u043d\u0442\u0438\u0440\u0443\u0435\u0442\u0441\u044f, \u0447\u0442\u043e \u043f\u043e\u0441\u043b\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0441\u0441\u0438\u0432\u0430\n\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0432\u044b\u0432\u043e\u0434 \u0441\u0443\u043c\u043c\u044b.\n<strong>\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</strong> <br>\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e Q, \u0434\u0430\u043b\u0435\u0435 \u0441\u043b\u0435\u0434\u0443\u0435\u0442 Q \u0441\u0442\u0440\u043e\u043a, \u0432\n\u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0437\u0430\u043f\u0438\u0441\u0430\u043d\u043e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0442\u0435\u043a\u0443\u0449\u0435\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 (\u0444\u043e\u0440\u043c\u0430\u0442 \u043a\u0430\u043a \u0432\n\u043b\u0435\u0433\u0435\u043d\u0434\u0435 \u0437\u0430\u0434\u0430\u0447\u0438)\n. \u0412\u0441\u0435 \u0447\u0438\u0441\u043b\u0430 \u0432\u043e \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445 \u0446\u0435\u043b\u044b\u0435.\n<strong>\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</strong> \n\u0414\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0437\u0430\u043f\u0440\u043e\u0441\u0430 \u043d\u0430 \u0432\u044b\u0432\u043e\u0434 \u0441\u0443\u043c\u043c\u044b, \u0432\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u0438\u0441\u043a\u043e\u043c\u0443\u044e \u0441\u0443\u043c\u043c\u0443.</p>\n\n<p><strong>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f</strong> \n1 \u2264 Q \u2264 200000 <br>\n1 \u2264 pos1, pos2, pos \u2264 1000000 <br>\npos1 \u2264 pos2 <br>\n1 \u2264 M \u2264 10 <br>\n1 \u2264 plus \u2264 999999  </p>\n\n<p><strong>\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</strong></p>\n\n<pre><code>2\nU 692778 7 291188\nR 636916 747794\n</code></pre>\n\n<p><strong>\u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0445\u043e\u0434\u043d\u044b\u0445 \u0434\u0430\u043d\u043d\u044b\u0445</strong></p>\n\n<pre><code>378\n</code></pre>\n\n<p>Timelimit is 3 times the timelimit mentioned <a href=\"https://www.hackerrank.com/environment\">here</a></p></div></div>", 
                "preview": null
            }, 
            {
                "body": "Jaggu\u662f\u4e00\u4e2a\u7231\u73a9\u6c34\u7403\u5f97\u5c0f\u5b69\u3002\u4ed6\u62ff\u4e86\u4e00\u767e\u4e07\u4e2a\u7a7a\u6c34\u6876( 1\u767e\u4e07 = 1e6 )\uff0c\u8981\u5728\u4ed6\u59d0\u59d0Ishika\u7684\u6307\u5bfc\u4e0b\uff0c\u7528\u6c34\u7403\u88c5\u6ee1\u8fd9\u4e9b\u6c34\u6876\u3002  <br>\n\u4ed6\u59d0\u59d0\u7ed9\u4e86\u4ed6\u4e24\u79cd\u7c7b\u578b\u7684\u547d\u4ee4:<br>\n\n**R pos1 pos2**  \u8868\u793ajaggu\u9700\u8981\u544a\u8bc9\u5979\u4ecepos1\u5230pos2\u7684\u6c34\u6876\u91cc\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u6c34\u7403\u3002\n\n**U pos M plus** \u8868\u793a\u4ed6\u9700\u8981\u6309\u7167\u51fd\u6570 Update(pos,M,plus)\u8fd9\u6837\u5de5\u4f5c\u3002\n\n\tvoid Update(int pos,int M,int plus)\n    {\n    \tint N=1000000;\t//1 million\n        for (int i=1;i<=50;i++)\n        {\n        \tint back = pos\n            for(int j=1;j<=1000;j++)\n            {\n\n                \u5728pos\u6876\u4e2d\u6dfb\u52a0M\u4e2a\u6c34\u7403\n                int s,x=0,in=__builtin_popcount(pos);\n                for(int k=0;;k++)\n                {\n                    s=pos+2^k\n                    if( __builtin_popcount(s) <= in )\n                    {\n                        in = __builtin_popcount(s)\n                        pos = s;\n                        if(pos>N)       break;\n                        \u5728pos\u6876\u4e2d\u6dfb\u52a0M\u4e2a\u6c34\u7403\n                    }\n                }\n                pos = pos - N\n            }\n            pos = back+plus;\n            if(pos>N) pos-=N;\n        }\n\t}\n    \nJaggu\u77e5\u9053\u4ed6\u59d0\u59d0\u5f88\u61d2\uff0c\u4e0d\u4f1a\u53bb\u68c0\u67e5\u4ed6\u662f\u5426\u771f\u7684\u4f1a\u628a\u6c34\u7403\u653e\u5230\u6876\u91cc\u3002\u56e0\u6b64\u4ed6\u5750\u4e0b\u6765\uff0c\u505c\u6b62\u704c\u7403\u5e76\u628a\u5b83\u4eec\u653e\u5230\u6c34\u6876\u91cc\u3002\u4ed6\u8bf7\u4f60\u5e2e\u4ed6\u5f97\u5230\u4ed6\u59d0\u59d0\u8be2\u95ee\u7684\u6b63\u786e\u7b54\u6848\u3002\u4ed6\u59d0\u59d0\u975e\u5e38\u806a\u660e\uff0c\u5728\u6bcf\u6b21\u66f4\u65b0\u64cd\u4f5c\u540e\uff0c\u603b\u4f1a\u8981\u6c42\u6c47\u62a5\u3002\n\n**\u8f93\u5165\u683c\u5f0f**\n\n\u7b2c\u4e00\u884c\u5305\u542bQ,\u8981\u5904\u7406\u7684\u64cd\u4f5c\u603b\u6570\u3002\n\u63a5\u4e0b\u6765Q\u884c\uff0c\u6bcf\u884c\u8868\u793a\u4e00\u4e2a\u66f4\u65b0\u64cd\u4f5c\u6216\u8005\u6c47\u62a5\u64cd\u4f5c\u3002\u6bcf\u4e2a\u66f4\u65b0\u64cd\u4f5c\u540e\u9762\u4f1a\u8ddf\u6709\u81f3\u5c111\u4e2a\u6c47\u62a5\u64cd\u4f5c\u3002\n\n**\u8f93\u5165\u683c\u5f0f**\n\n\u5bf9\u6bcf\u4e2a\u6c47\u62a5\u64cd\u4f5c ,\u5728\u4e00\u884c\u4e2d\u8f93\u51fa\u7ed3\u679c\u3002\n\n**\u7ea6\u675f\u6761\u4ef6**\n\n1 &le; Q &le; 200000\n\n1 &le; pos1,pos2,pos &le; 1000000\n\npos1 &le; pos2\n\n1 &le; M &le; 10\n\n1 &le; plus &le; 999999\n\n**\u8f93\u5165\u6837\u4f8b**\n\n    2\n    U 692778 7 291188\n    R 636916 747794\n\n**\u8f93\u51fa\u6837\u4f8b**\n\n\t378\t\n\n**\u89e3\u91ca**\n\n\u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\u5f97\u5230\u7b54\u6848\u3002\n\n**\u6ce8\u610f** \n\n1. \u8f93\u5165\u662f\u968f\u673a\u4ea7\u751f\u7684\u3002\n\n2. __builtin_popcount(x)\u7ed9\u51fax\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4e3a1\u7684\u4f4d\u4e2a\u6570\u3002\n\nTimelimit is 3 times the timelimit mentioned [here](https://www.hackerrank.com/environment)\n", 
                "problem_statement_fields": {
                    "sample_output": " ", 
                    "problem_statement": "Jaggu\u662f\u4e00\u4e2a\u7231\u73a9\u6c34\u7403\u5f97\u5c0f\u5b69\u3002\u4ed6\u62ff\u4e86\u4e00\u767e\u4e07\u4e2a\u7a7a\u6c34\u6876( 1\u767e\u4e07 = 1e6 )\uff0c\u8981\u5728\u4ed6\u59d0\u59d0Ishika\u7684\u6307\u5bfc\u4e0b\uff0c\u7528\u6c34\u7403\u88c5\u6ee1\u8fd9\u4e9b\u6c34\u6876\u3002  <br>\n\u4ed6\u59d0\u59d0\u7ed9\u4e86\u4ed6\u4e24\u79cd\u7c7b\u578b\u7684\u547d\u4ee4:<br>\n\n**R pos1 pos2**  \u8868\u793ajaggu\u9700\u8981\u544a\u8bc9\u5979\u4ecepos1\u5230pos2\u7684\u6c34\u6876\u91cc\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u6c34\u7403\u3002\n\n**U pos M plus** \u8868\u793a\u4ed6\u9700\u8981\u6309\u7167\u51fd\u6570 Update(pos,M,plus)\u8fd9\u6837\u5de5\u4f5c\u3002\n\n\tvoid Update(int pos,int M,int plus)\n    {\n    \tint N=1000000;\t//1 million\n        for (int i=1;i<=50;i++)\n        {\n        \tint back = pos\n            for(int j=1;j<=1000;j++)\n            {\n\n                \u5728pos\u6876\u4e2d\u6dfb\u52a0M\u4e2a\u6c34\u7403\n                int s,x=0,in=__builtin_popcount(pos);\n                for(int k=0;;k++)\n                {\n                    s=pos+2^k\n                    if( __builtin_popcount(s) <= in )\n                    {\n                        in = __builtin_popcount(s)\n                        pos = s;\n                        if(pos>N)       break;\n                        \u5728pos\u6876\u4e2d\u6dfb\u52a0M\u4e2a\u6c34\u7403\n                    }\n                }\n                pos = pos - N\n            }\n            pos = back+plus;\n            if(pos>N) pos-=N;\n        }\n\t}\n    \nJaggu\u77e5\u9053\u4ed6\u59d0\u59d0\u5f88\u61d2\uff0c\u4e0d\u4f1a\u53bb\u68c0\u67e5\u4ed6\u662f\u5426\u771f\u7684\u4f1a\u628a\u6c34\u7403\u653e\u5230\u6876\u91cc\u3002\u56e0\u6b64\u4ed6\u5750\u4e0b\u6765\uff0c\u505c\u6b62\u704c\u7403\u5e76\u628a\u5b83\u4eec\u653e\u5230\u6c34\u6876\u91cc\u3002\u4ed6\u8bf7\u4f60\u5e2e\u4ed6\u5f97\u5230\u4ed6\u59d0\u59d0\u8be2\u95ee\u7684\u6b63\u786e\u7b54\u6848\u3002\u4ed6\u59d0\u59d0\u975e\u5e38\u806a\u660e\uff0c\u5728\u6bcf\u6b21\u66f4\u65b0\u64cd\u4f5c\u540e\uff0c\u603b\u4f1a\u8981\u6c42\u6c47\u62a5\u3002\n\n**\u8f93\u5165\u683c\u5f0f**\n\n\u7b2c\u4e00\u884c\u5305\u542bQ,\u8981\u5904\u7406\u7684\u64cd\u4f5c\u603b\u6570\u3002\n\u63a5\u4e0b\u6765Q\u884c\uff0c\u6bcf\u884c\u8868\u793a\u4e00\u4e2a\u66f4\u65b0\u64cd\u4f5c\u6216\u8005\u6c47\u62a5\u64cd\u4f5c\u3002\u6bcf\u4e2a\u66f4\u65b0\u64cd\u4f5c\u540e\u9762\u4f1a\u8ddf\u6709\u81f3\u5c111\u4e2a\u6c47\u62a5\u64cd\u4f5c\u3002\n\n**\u8f93\u5165\u683c\u5f0f**\n\n\u5bf9\u6bcf\u4e2a\u6c47\u62a5\u64cd\u4f5c ,\u5728\u4e00\u884c\u4e2d\u8f93\u51fa\u7ed3\u679c\u3002\n\n**\u7ea6\u675f\u6761\u4ef6**\n\n1 &le; Q &le; 200000\n\n1 &le; pos1,pos2,pos &le; 1000000\n\npos1 &le; pos2\n\n1 &le; M &le; 10\n\n1 &le; plus &le; 999999\n\n**\u8f93\u5165\u6837\u4f8b**\n\n    2\n    U 692778 7 291188\n    R 636916 747794\n\n**\u8f93\u51fa\u6837\u4f8b**\n\n\t378\t\n\n**\u89e3\u91ca**\n\n\u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\u5f97\u5230\u7b54\u6848\u3002\n\n**\u6ce8\u610f** \n\n1. \u8f93\u5165\u662f\u968f\u673a\u4ea7\u751f\u7684\u3002\n\n2. __builtin_popcount(x)\u7ed9\u51fax\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4e3a1\u7684\u4f4d\u4e2a\u6570\u3002\n\nTimelimit is 3 times the timelimit mentioned [here](https://www.hackerrank.com/environment)\n", 
                    "input_format": " ", 
                    "explanation": " ", 
                    "sample_input": " ", 
                    "output_format": " "
                }, 
                "name": "Jaggu Playing with Ballons", 
                "language": "Chinese", 
                "challenge_id": 2580, 
                "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Jaggu\u662f\u4e00\u4e2a\u7231\u73a9\u6c34\u7403\u5f97\u5c0f\u5b69\u3002\u4ed6\u62ff\u4e86\u4e00\u767e\u4e07\u4e2a\u7a7a\u6c34\u6876( 1\u767e\u4e07 = 1e6 )\uff0c\u8981\u5728\u4ed6\u59d0\u59d0Ishika\u7684\u6307\u5bfc\u4e0b\uff0c\u7528\u6c34\u7403\u88c5\u6ee1\u8fd9\u4e9b\u6c34\u6876\u3002  <br>\n\u4ed6\u59d0\u59d0\u7ed9\u4e86\u4ed6\u4e24\u79cd\u7c7b\u578b\u7684\u547d\u4ee4:<br></p>\n\n<p><strong>R pos1 pos2</strong>  \u8868\u793ajaggu\u9700\u8981\u544a\u8bc9\u5979\u4ecepos1\u5230pos2\u7684\u6c34\u6876\u91cc\u4e00\u5171\u6709\u591a\u5c11\u4e2a\u6c34\u7403\u3002</p>\n\n<p><strong>U pos M plus</strong> \u8868\u793a\u4ed6\u9700\u8981\u6309\u7167\u51fd\u6570 Update(pos,M,plus)\u8fd9\u6837\u5de5\u4f5c\u3002</p>\n\n<pre><code>void Update(int pos,int M,int plus)\n{\n    int N=1000000;  //1 million\n    for (int i=1;i&lt;=50;i++)\n    {\n        int back = pos\n        for(int j=1;j&lt;=1000;j++)\n        {\n\n            \u5728pos\u6876\u4e2d\u6dfb\u52a0M\u4e2a\u6c34\u7403\n            int s,x=0,in=__builtin_popcount(pos);\n            for(int k=0;;k++)\n            {\n                s=pos+2^k\n                if( __builtin_popcount(s) &lt;= in )\n                {\n                    in = __builtin_popcount(s)\n                    pos = s;\n                    if(pos&gt;N)       break;\n                    \u5728pos\u6876\u4e2d\u6dfb\u52a0M\u4e2a\u6c34\u7403\n                }\n            }\n            pos = pos - N\n        }\n        pos = back+plus;\n        if(pos&gt;N) pos-=N;\n    }\n}\n</code></pre>\n\n<p>Jaggu\u77e5\u9053\u4ed6\u59d0\u59d0\u5f88\u61d2\uff0c\u4e0d\u4f1a\u53bb\u68c0\u67e5\u4ed6\u662f\u5426\u771f\u7684\u4f1a\u628a\u6c34\u7403\u653e\u5230\u6876\u91cc\u3002\u56e0\u6b64\u4ed6\u5750\u4e0b\u6765\uff0c\u505c\u6b62\u704c\u7403\u5e76\u628a\u5b83\u4eec\u653e\u5230\u6c34\u6876\u91cc\u3002\u4ed6\u8bf7\u4f60\u5e2e\u4ed6\u5f97\u5230\u4ed6\u59d0\u59d0\u8be2\u95ee\u7684\u6b63\u786e\u7b54\u6848\u3002\u4ed6\u59d0\u59d0\u975e\u5e38\u806a\u660e\uff0c\u5728\u6bcf\u6b21\u66f4\u65b0\u64cd\u4f5c\u540e\uff0c\u603b\u4f1a\u8981\u6c42\u6c47\u62a5\u3002</p>\n\n<p><strong>\u8f93\u5165\u683c\u5f0f</strong></p>\n\n<p>\u7b2c\u4e00\u884c\u5305\u542bQ,\u8981\u5904\u7406\u7684\u64cd\u4f5c\u603b\u6570\u3002\n\u63a5\u4e0b\u6765Q\u884c\uff0c\u6bcf\u884c\u8868\u793a\u4e00\u4e2a\u66f4\u65b0\u64cd\u4f5c\u6216\u8005\u6c47\u62a5\u64cd\u4f5c\u3002\u6bcf\u4e2a\u66f4\u65b0\u64cd\u4f5c\u540e\u9762\u4f1a\u8ddf\u6709\u81f3\u5c111\u4e2a\u6c47\u62a5\u64cd\u4f5c\u3002</p>\n\n<p><strong>\u8f93\u5165\u683c\u5f0f</strong></p>\n\n<p>\u5bf9\u6bcf\u4e2a\u6c47\u62a5\u64cd\u4f5c ,\u5728\u4e00\u884c\u4e2d\u8f93\u51fa\u7ed3\u679c\u3002</p>\n\n<p><strong>\u7ea6\u675f\u6761\u4ef6</strong></p>\n\n<p>1 \u2264 Q \u2264 200000</p>\n\n<p>1 \u2264 pos1,pos2,pos \u2264 1000000</p>\n\n<p>pos1 \u2264 pos2</p>\n\n<p>1 \u2264 M \u2264 10</p>\n\n<p>1 \u2264 plus \u2264 999999</p>\n\n<p><strong>\u8f93\u5165\u6837\u4f8b</strong></p>\n\n<pre><code>2\nU 692778 7 291188\nR 636916 747794\n</code></pre>\n\n<p><strong>\u8f93\u51fa\u6837\u4f8b</strong></p>\n\n<pre><code>378 \n</code></pre>\n\n<p><strong>\u89e3\u91ca</strong></p>\n\n<p>\u6267\u884c\u4e0a\u8ff0\u4ee3\u7801\u5f97\u5230\u7b54\u6848\u3002</p>\n\n<p><strong>\u6ce8\u610f</strong> </p>\n\n<ol>\n<li><p>\u8f93\u5165\u662f\u968f\u673a\u4ea7\u751f\u7684\u3002</p></li>\n<li><p>__builtin_popcount(x)\u7ed9\u51fax\u7684\u4e8c\u8fdb\u5236\u8868\u793a\u4e2d\u4e3a1\u7684\u4f4d\u4e2a\u6570\u3002</p></li>\n</ol>\n\n<p>Timelimit is 3 times the timelimit mentioned <a href=\"https://www.hackerrank.com/environment\">here</a></p></div></div>", 
                "preview": null
            }
        ], 
        "codechecker_handle": null, 
        "countdown_time": 0, 
        "author_avatar": "https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 116, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2017-07-11T15:46:30.000Z", 
        "author_name": "devuy11", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Hard", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Given a tree of <em>N</em> nodes, where each node is uniquely numbered in between <em>[1, N]</em>. Each node also has a value which is initially 0. You need to perform following two operations in the tree.  </p>\n\n<ol>\n<li>Update Operation</li>\n<li>Report Operation</li>\n</ol>\n\n<p><strong>Update Operation</strong></p>\n\n<pre><code>U r t a b\n</code></pre>\n\n<p>Adds <code>a<sup>b</sup> + (a+1)<sup>b</sup> + (b+1)<sup>a</sup></code> to all nodes in the subtree rooted at <code>t</code>, considering that tree is rooted at <code>r</code> (see explanation for more details).  </p>\n\n<p><strong>Report Operation</strong></p>\n\n<pre><code>R r t m\n</code></pre>\n\n<p>Output the sum of all nodes in the subtree rooted at <code>t</code>, considering that tree is rooted at <code>r</code>. Output the sum modulo <code>m</code> (see explanation for more details).</p>\n\n<p><strong>Input Format</strong></p>\n\n<p>First line contains <em>N</em>, number of nodes in the tree. <br>\nNext <em>N-1</em> lines contain two space separated integers <em>x</em> and <em>y</em> which denote that there is an edge between node <em>x</em> and node <em>y</em>. <br>\nNext line contains <em>Q</em>, number of queries to follow. <br>\nNext <em>Q</em> lines follow, each line will be either a report operation or an update operation.  </p>\n\n<p><strong>Output Format</strong></p>\n\n<p>For each report query output the answer in a separate line.</p>\n\n<p><strong>Constraints</strong></p>\n\n<p>1 \u2264 <em>N</em> \u2264 100000 <br>\n1 \u2264 <em>Q</em> \u2264 100000 <br>\n1 \u2264 <em>m</em> \u2264 101 <br>\n1 \u2264 <em>r, t, x, y</em> \u2264 <em>N</em> <br>\n<em>x</em> \u2260 <em>y</em> <br>\n1 \u2264 <em>a, b</em> \u2264 10<sup>18</sup>  </p>\n\n<p><strong>Notes</strong></p>\n\n<ol>\n<li>There will be at most one edge between a pair of nodes.</li>\n<li>There will be no loop.</li>\n<li>Tree will be completely connected. </li>\n</ol>\n\n<p><strong>Sample Input</strong></p>\n\n<pre><code>4\n1 2\n2 3\n3 4\n4\nU 3 2 2 2\nU 2 3 2 2\nR 1 2 8\nR 4 3 9\n</code></pre>\n\n<p><strong>Sample Output</strong></p>\n\n<pre><code>2\n3\n</code></pre>\n\n<p><strong>Explanation</strong></p>\n\n<p>Initially Values in each node : [0,0,0,0] <br>\nThe first query is <code>U 3 2 2 2</code>. Here, tree is rooted at 3. It looks like </p>\n\n<pre><code>    3(0)\n   / \\\n  /   \\\n 2(0)  4(0)\n |\n |\n 1(0)\n</code></pre>\n\n<p>For the sub tree rooted at 2 ( nodes 2 and 1 ), we add a<sup>b</sup>  + (a+1)<sup>b</sup> + (b+1)<sup>a</sup> = 2<sup>2</sup> + 3<sup>2</sup> + 3<sup>2</sup> = 22. After first update operation, nodes 1, 2, 3, and 4 will have values 22, 22, 0 and 0 respectively.  </p>\n\n<pre><code>    3(0)\n   / \\\n  /   \\\n 2(22) 4(0)\n |\n |\n 1(22)\n</code></pre>\n\n<p>The second query is <code>U 2 3 2 2</code>. Here, tree is rooted at 2. It looks like</p>\n\n<pre><code>    2(22)\n   / \\\n  /   \\\n 1(22) 3(0)\n       |\n       |\n       4(0)\n</code></pre>\n\n<p>For the sub tree rooted at 3 (nodes 3 and 4), we add a<sup>b</sup> + (a+1)<sup>b</sup> + (b+1)<sup>a</sup> = 2<sup>2</sup> + 3<sup>2</sup> + 3<sup>2</sup> = 22. After second update operation, nodes 1, 2, 3, and 4 each have values 22,22,22,22 respectively.  </p>\n\n<pre><code>    2(22)\n   / \\\n  /   \\\n 1(22) 3(22)\n       |\n       |\n       4(22)\n</code></pre>\n\n<p>The first report query is <code>R 1 2 8</code> asks for the sum modulo 8 of the subtree rooted at 2, when the tree is rooted at 1. The tree looks like </p>\n\n<pre><code>1(22)\n \\\n  \\\n   2*(22)\n   |\n   |\n   3*(22)\n   |\n   |\n   4*(22)\n</code></pre>\n\n<p>The sum of the values of nodes 2, 3 and 4 are </p>\n\n<pre><code>(22 + 22 + 22) % 8 = 2\n</code></pre>\n\n<p>The second report query is <code>R 4 3 9</code> asks for the sum modulo 9 of the subtree rooted at 3 when the tree is rooted at 4. The tree looks like </p>\n\n<pre><code>4(22)\n \\\n  \\\n   3*(22)\n   |\n   |\n   2*(22)\n   |\n   |\n   1*(22)\n</code></pre>\n\n<p>The sum of the values of nodes 3, 2 and 1 are </p>\n\n<pre><code>(22 + 22 + 22) % 9 = 3\n</code></pre>\n\n<p><sub><strong>Time Limits:</strong> <br>\nC, C++: 4s | Java and other JVM based languages: 10s | Python, Python3 = 45s | Other interpreted Language: 30s | C#, Haskell: 10s | Rest: 3 times of <a href=\"https://www.hackerrank.com/environment\">default</a>. <br>\n</sub></p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 2535, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "whitespace", 
            "sbcl", 
            "java8", 
            "octave", 
            "racket", 
            "rust", 
            "bash", 
            "r", 
            "swift", 
            "fortran", 
            "cpp14", 
            "coffeescript", 
            "ada", 
            "pypy", 
            "pypy3", 
            "elixir", 
            "kotlin", 
            "julia"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": null, 
        "can_be_viewed": true, 
        "track": {
            "name": "Advanced", 
            "taxonomy": 1, 
            "track_slug": "data-structures", 
            "track_id": 17, 
            "track_name": "Data Structures", 
            "id": 32, 
            "rewards_system_enabled": null, 
            "slug": "data-structures"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-08-07T15:02:49.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1404144000, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 956, 
            "primary_track_id": 3, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": null, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "1 challenge every day!", 
            "effective_epoch_endtime": 1404748800, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Algorithms", 
                "id": 3, 
                "priority": 14, 
                "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
                "rewards_system_enabled": true, 
                "slug": "algorithms"
            }, 
            "primary_tag_id": 3081, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -98606995.58754861, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "Welcome to the Week 6 of our daily challenges! Each day you'll get to solve a challenge whose difficulty level increases as the week progresses! <br />\n\nTo solve the final challenge, you're given an entire weekend . <br />\n\nThere are 5 challenges in total!!  <br /> <br />\n\nTie-breaking rule is little different for this contest. For each challenge, we calculate your <em>solved time, t</em>  <br />\n\n<em> t = submit - open </em> <br />\n\nwhere <i>submit</i> is the time you submitted the solution, and <i>open</i> is the time you opened the challenge. This way, you do not have to worry about solving the challenge as soon as it becomes available. <br />\n\nRead more about this contest  <a href=\"/blog/daily-challenge\">here</a>.", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -98606995.5799421, 
            "challenges_count": 5, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2014-07-07T16:00:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "w6", 
            "hide_leaderboard": null, 
            "kind": "weekly", 
            "comment_live_sync": null, 
            "name": "Weekly Challenges - Week 6", 
            "is_multi_round": false, 
            "created_at": "2014-05-29T05:08:26.000Z", 
            "epoch_endtime": 1404748800, 
            "company_associated_contest": null, 
            "rating_category": "Algorithms", 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-06-30T16:00:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 103
        }, 
        "factor": 150, 
        "is_solution_unlocked": false, 
        "preview": "Given a tree, perform two kinds of queries. Add a given value to all nodes in a subtree and print the sum of all the values in a given subtree", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.556", 
        "difficulty": 0.4787234042553192, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 150, 
        "slug": "dynamic-summation", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 239, 
        "name": "Dynamic Summation", 
        "is_preview_contest": false, 
        "level": 97, 
        "success_ratio": 0.48535564853556484, 
        "total_count": 239, 
        "created_at": "2014-05-17T19:05:11.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": "", 
        "countdown_time": 0, 
        "author_avatar": "https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
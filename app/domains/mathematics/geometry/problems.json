{
    "models": [
        {
            "onboarding": null, 
            "solved_count": 1115, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-03-02T12:19:57.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 22171, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": " Given a set of coordinates, determine if they fall in an horizontal or vertical line.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 10, 
            "slug": "points-on-a-line", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Points On a Line", 
            "level": 50, 
            "success_ratio": 0.861003861003861, 
            "total_count": 1295, 
            "created_at": "2016-06-13T14:26:11.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2872, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:45:53.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 2214, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "What's the largest number in the rectangular grid?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.8194690265486726, 
            "active": true, 
            "max_score": 20, 
            "slug": "rectangular-game", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Rectangular Game", 
            "level": 11, 
            "success_ratio": 0.8464485705865016, 
            "total_count": 3393, 
            "created_at": "2014-03-23T16:10:50.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 590, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:46:05.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 2333, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Help Sherlock count numbers satisfying an inequality.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 20, 
            "slug": "sherlock-and-counting", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Sherlock and Counting", 
            "level": 12, 
            "success_ratio": 0.4220314735336195, 
            "total_count": 1398, 
            "created_at": "2014-04-09T11:41:15.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2079, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:46:19.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 2488, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Help Sherlock with points on planes.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.8067581837381204, 
            "active": true, 
            "max_score": 20, 
            "slug": "sherlock-and-planes", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Sherlock and Planes", 
            "level": 12, 
            "success_ratio": 0.7959418070444104, 
            "total_count": 2612, 
            "created_at": "2014-05-05T08:51:07.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2211, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:47:27.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 3926, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Determine whether Roy's city can be saved or not.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 1.0, 
            "difficulty": 0.6091254752851711, 
            "active": true, 
            "max_score": 30, 
            "slug": "circle-city", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Circle City", 
            "level": 17, 
            "success_ratio": 0.6373594695877774, 
            "total_count": 3469, 
            "created_at": "2014-08-23T14:53:21.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 78, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:50:38.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 12799, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Determine who needs to be added to the end of the line to restore the pancake to its initial orientation.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 20, 
            "slug": "xrange-and-pizza", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Xrange's Pancakes", 
            "level": 50, 
            "success_ratio": 0.7878787878787878, 
            "total_count": 99, 
            "created_at": "2015-09-28T16:49:43.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 446, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:45:19.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 1862, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Find whether spheres will come in contact or not.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.6428571428571429, 
            "active": true, 
            "max_score": 30, 
            "slug": "spheres", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Spheres", 
            "level": 17, 
            "success_ratio": 0.7113237639553429, 
            "total_count": 627, 
            "created_at": "2014-02-07T07:06:06.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 109, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-12-08T15:11:20.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 26065, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Find the minimum number of steps needed to get to point $(d, 0)$.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 30, 
            "slug": "baby-step-giant-step", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Baby Step, Giant Step", 
            "level": 30, 
            "success_ratio": 0.7898550724637681, 
            "total_count": 138, 
            "created_at": "2016-10-02T20:44:29.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 49, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-10-18T16:53:16.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 21866, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": " Determine if a set of points coincides with the edges of a non-degenerate rectangle.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 30, 
            "slug": "points-on-rectangle", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Points on a Rectangle", 
            "level": 20, 
            "success_ratio": 0.7101449275362319, 
            "total_count": 69, 
            "created_at": "2016-05-30T18:36:24.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 40, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-02-21T20:39:04.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 30440, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 35, 
            "is_solution_unlocked": false, 
            "preview": "Draw a circle and a square at specific coordinates within a raster image.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.6, 
            "active": true, 
            "max_score": 35, 
            "slug": "a-circle-and-a-square", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "A Circle and a Square", 
            "level": 50, 
            "success_ratio": 0.8163265306122449, 
            "total_count": 49, 
            "created_at": "2017-01-04T22:21:55.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 276, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:46:28.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 2501, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 40, 
            "is_solution_unlocked": false, 
            "preview": "Help Jim determine if he can play with laser beam.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5576923076923077, 
            "active": true, 
            "max_score": 40, 
            "slug": "jim-beam", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Jim Beam", 
            "level": 21, 
            "success_ratio": 0.6272727272727273, 
            "total_count": 440, 
            "created_at": "2014-05-10T02:21:57.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 74, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:53:47.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 24167, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Help n friends meet in an m-dimensional hyperspace. ", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.6, 
            "active": true, 
            "max_score": 30, 
            "slug": "hyperspace-travel", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Hyperspace Travel ", 
            "level": 50, 
            "success_ratio": 0.6666666666666666, 
            "total_count": 111, 
            "created_at": "2016-08-25T06:28:47.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 35, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:47:15.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 3419, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Find the point on the line that is closest to the origin.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 30, 
            "slug": "solve-equations", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Solve Equations", 
            "level": 50, 
            "success_ratio": 0.3017241379310345, 
            "total_count": 116, 
            "created_at": "2014-07-30T18:29:58.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 814, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:41:48.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 112, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Points on graph are each given a weight. How can the graph be split so the two halves are as close as possible in total weight?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "algorithm", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 50, 
            "slug": "stars", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Stars", 
            "level": 27, 
            "success_ratio": 0.8230535894843276, 
            "total_count": 989, 
            "created_at": "2013-01-04T20:29:59.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 759, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:47:43.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 4396, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Sort points on the Cartesian Plane by their polar angle.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7645631067961165, 
            "active": true, 
            "max_score": 50, 
            "slug": "polar-angles", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Polar Angles", 
            "level": 27, 
            "success_ratio": 0.7824742268041237, 
            "total_count": 970, 
            "created_at": "2014-09-22T10:52:22.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 140, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:46:31.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 2538, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 60, 
            "is_solution_unlocked": false, 
            "preview": "Help Sherlock in the analysis of geometrical figures.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.30303030303030304, 
            "active": true, 
            "max_score": 60, 
            "slug": "sherlock-and-geometry", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Sherlock and Geometry", 
            "level": 42, 
            "success_ratio": 0.45751633986928103, 
            "total_count": 306, 
            "created_at": "2014-05-17T22:16:06.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 6, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-12-08T15:11:21.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 25897, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "from __future__ import division\nimport json\nfrom math import sqrt\nfrom sys import stdin\n\neps = 1e-4\nmaxc = 10000\n\ndef le(a, b):\n    return b - a >= -eps\n\ndef ge(a, b):\n    return a - b >= -eps\n\ndef sqr(x):\n    return x * x\n\ndef check_inputs (inputs, outputs, user_outputs):\n    #inputs is a \"python list\" of all input files. Inputs contains the contents of each of these files.\n\n    is_code_works = True\n    '''\n    This is the boolean flag to check if the code works or not.\n    If you want to give a complete 0 score and give a wrong answer, set this flag to False\n    '''\n\n    scores = [ 0 for i in range( len( inputs ) ) ]\n    '''\n    This is an array of scores for each test case\n    Each element in the array should be between 0 and 1\n    We initially fill this array with 0\n    '''\n\n    testcase_status = [ 0 for i in range( len( inputs ) ) ]\n    '''\n    This is an array of status for each test case.\n    Each element in the array can be either 0 or 1\n    We initially fill this array with 0\n    '''\n\n    loop_counter = 0\n    for input_tc, output_tc, useroutput_tc in zip(inputs, outputs, user_outputs):\n        '''\n        input_tc, output_tc and useroutput_tc is the content of 1 complete file.\n        Remember to split on \"\\n\". Default split is a common mistake. Remember to trim the lines.\n        Custom checker should NEVER throw an error\n        Run it in try: except: blocks and verify input to avoid infinite time errors\n        Your code will read input_tc, output_tc and useroutput_tc\n        Your code will update is_code_works, scores[loop_counter], testcase_status[loop_counter]\n        '''\n\n        #YOUR CUSTOM CODE STARTS HERE\n        try:\n            correct = True\n            useroutput_tc_lines = useroutput_tc.strip().split(\"\\n\")\n            if len(useroutput_tc_lines) != 2:\n                loop_counter += 1\n                continue\n\n            x = float(useroutput_tc_lines[0])\n            y = float(useroutput_tc_lines[1])\n            if x < -maxc - 1 or x > maxc + 1 or y < -maxc - 1 or y > maxc + 1:\n                loop_counter += 1\n                continue\n\n            input_tc_lines = input_tc.strip().split(\"\\n\")\n            inner_counter = 0\n            n = int(input_tc_lines[inner_counter])\n            inner_counter += 1\n            for ii in range(n):\n                k = int(input_tc_lines[inner_counter])\n                inner_counter += 1\n                px = [0.0 for _ in range(k + 1)]\n                py = [0.0 for _ in range(k + 1)]\n\n                poly_coordinates = input_tc_lines[inner_counter:inner_counter + k]\n                inner_counter += k\n                for i in range(k):\n                    px[i], py[i] = map(float, poly_coordinates[i].split(\" \"))\n                px[k], py[k] = px[0], py[0]\n\n                for j in range(k):\n                    x1 = px[j + 1] - px[j]\n                    y1 = py[j + 1] - py[j]\n                    x2 = x - px[j]\n                    y2 = y - py[j]\n                    if not ge((x1 * y2 - x2 * y1) / sqrt(x1 * x1 + y1 * y1), 0):\n                        correct = False\n            m = int(input_tc_lines[inner_counter])\n            inner_counter += 1\n            elipses = input_tc_lines[inner_counter:inner_counter + m]\n            inner_counter += m\n            for ii in range(m):\n                x1, y1, x2, y2, a = map(float, elipses[ii].split(\" \"))\n                d = sqrt(sqr(x1 - x) + sqr(y1 - y))\n                d += sqrt(sqr(x2 - x) + sqr(y2 - y))\n                if not le(d / 2, a):\n                    correct = False\n            if correct:\n                testcase_status[loop_counter] = 1\n        except:\n            pass\n        #YOUR CUSTOM CODE ENDS HERE\n\n        loop_counter += 1\n    return is_code_works, scores, testcase_status\n\ndef process(data):\n    score = 0\n    testcase_input  = data[\"inputs\"]\n    testcase_output = data[\"expected_outputs\"]\n    user_output     = data[\"outputs\"]\n    is_code_works, scores, testcase_statuses = check_inputs(testcase_input, testcase_output, user_output)\n    if is_code_works and all(testcase_statuses):\n        score = 1\n    return score, testcase_statuses\n\nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n\n    # Get the run directory for the submission we need to evaluate.\n    run_directory = stdin[-1]\n\n    # request.json contains the data submitted for the current.\n    request = json.load(open(run_directory + \"request.json\"))\n\n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n        # The list of test cases\n        \"testcases\": request[\"testcase_sources\"],\n        # The submitted language key (Eg: 5 for python)\n        \"lang\": request[\"lang\"],\n        # I'll tell you how to fill this next\n        \"expected_outputs\": request[\"expected_outputs\"],\n        \"inputs\": [],\n        \"outputs\": []\n    }\n\n    for index in range(len(request[\"testcase_sources\"])):\n        #Let's read the input00000.in files.\n        inputs = open(run_directory + \"input%05d.in\" %(index)).read()\n        data[\"inputs\"].append(inputs)\n\n        #Let's read the output00000.out files.\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n\n    # Gathered all the data we could, lets process it\n    score, testcase_status = process(data)\n\n    #Let me explain what you should even print as output of customer checker.\n    #Line 1 should be the total score for the submission\n    #Line 2 should be a list of space separated integers (0/1), which denotes testcase status of each testcase\n    #Line 3 should be a list of space separated floats, which denotes testcase score of each testcase.\n    print score\n    print \" \".join(str(i) for i in testcase_status)\n\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 70, 
            "is_solution_unlocked": false, 
            "preview": "Find a point that falls at the intersection of objects.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.99, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 70, 
            "slug": "good-point", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Good Point", 
            "level": 70, 
            "success_ratio": 0.46153846153846156, 
            "total_count": 13, 
            "created_at": "2016-09-29T20:50:36.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python"
        }, 
        {
            "onboarding": null, 
            "solved_count": 8, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-26T02:13:47.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 27019, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 75, 
            "is_solution_unlocked": false, 
            "preview": "Optimize the trigonometric function.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.1, 
            "active": true, 
            "max_score": 75, 
            "slug": "hard-homework", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Hard Homework", 
            "level": 50, 
            "success_ratio": 0.47058823529411764, 
            "total_count": 17, 
            "created_at": "2016-10-21T22:22:22.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 51, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:41:13.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 55, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "In how many ways can you draw K diagonals connecting", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "algorithm", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.4642857142857143, 
            "active": true, 
            "max_score": 80, 
            "slug": "polygons", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Polygons", 
            "level": 64, 
            "success_ratio": 0.4358974358974359, 
            "total_count": 117, 
            "created_at": "2013-01-04T20:25:32.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 31, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:41:26.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 72, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Find the number of points within each polygon.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "algorithm", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.4642857142857143, 
            "active": true, 
            "max_score": 80, 
            "slug": "polygon", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Polygon", 
            "level": 61, 
            "success_ratio": 0.4696969696969697, 
            "total_count": 66, 
            "created_at": "2013-01-04T20:26:47.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 1500, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "sorting", 
                    "title": "Sorting"
                }, 
                {
                    "slug": "manhattan-distance", 
                    "title": "Manhattan Distance"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:40:56.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 40, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Find a meeting place which minimises total distance to everyone on a grid.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "algorithm", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.4503125, 
            "active": true, 
            "max_score": 80, 
            "slug": "meeting-point", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Meeting Point", 
            "level": 66, 
            "success_ratio": 0.4455004455004455, 
            "total_count": 3367, 
            "created_at": "2013-01-04T20:24:21.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 102, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:41:50.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 114, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Can you find the ideal location to build a house so it is the right distance from each relative?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "algorithm", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.43478260869565216, 
            "active": true, 
            "max_score": 80, 
            "slug": "house-location", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "House Location", 
            "level": 66, 
            "success_ratio": 0.49514563106796117, 
            "total_count": 206, 
            "created_at": "2013-01-04T20:30:03.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 45, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:47:23.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 3586, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 90, 
            "is_solution_unlocked": false, 
            "preview": "You received an E-Mail from Jim.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 90, 
            "slug": "jim-and-the-challenge", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Jim and the Challenge", 
            "level": 72, 
            "success_ratio": 0.5921052631578947, 
            "total_count": 76, 
            "created_at": "2014-08-15T14:20:32.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 7, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:52:31.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 21080, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "How many letters N are hidden?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.3, 
            "active": true, 
            "max_score": 80, 
            "slug": "n-letter", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "The Letter N", 
            "level": 50, 
            "success_ratio": 0.4117647058823529, 
            "total_count": 17, 
            "created_at": "2016-04-29T12:37:40.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 50, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:44:49.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 1429, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 100, 
            "is_solution_unlocked": false, 
            "preview": "What is the maximum possible value in the array satisfying the constraints?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.38, 
            "active": true, 
            "max_score": 100, 
            "slug": "best-sum", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Best Sum", 
            "level": 81, 
            "success_ratio": 0.32894736842105265, 
            "total_count": 152, 
            "created_at": "2013-12-05T18:24:46.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 26, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:47:17.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 3508, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 100, 
            "is_solution_unlocked": false, 
            "preview": "Answer geometry queries.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.3103448275862069, 
            "active": true, 
            "max_score": 100, 
            "slug": "geometry-queries", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Geometry Queries", 
            "level": 81, 
            "success_ratio": 0.3170731707317073, 
            "total_count": 82, 
            "created_at": "2014-08-07T14:45:26.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 36, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:45:52.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 2161, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 200, 
            "is_solution_unlocked": false, 
            "preview": "How many pairs of triangles have the same area?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.3, 
            "active": true, 
            "max_score": 200, 
            "slug": "count-triangles", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Count Triangles", 
            "level": 91, 
            "success_ratio": 0.4235294117647059, 
            "total_count": 85, 
            "created_at": "2014-03-19T10:36:45.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 68, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:45:13.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 1828, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 250, 
            "is_solution_unlocked": false, 
            "preview": "How many monochromatic isosceles triangles are there?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.48863636363636365, 
            "active": true, 
            "max_score": 250, 
            "slug": "isosceles-triangles", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Isosceles Triangles", 
            "level": 91, 
            "success_ratio": 0.3930635838150289, 
            "total_count": 173, 
            "created_at": "2014-02-02T04:29:46.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 5, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:53:43.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 23835, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 100, 
            "is_solution_unlocked": false, 
            "preview": "Find the maximum possible length of elastic rope.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.1, 
            "active": true, 
            "max_score": 100, 
            "slug": "elastic-rope", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Elastic rope", 
            "level": 100, 
            "success_ratio": 0.3125, 
            "total_count": 16, 
            "created_at": "2016-08-12T19:20:10.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 0, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-12-29T00:08:03.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 11650, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "from __future__ import division\n\nfrom decimal import Decimal\neps = Decimal('1e-6')\ndef good_error(a, b):\n    if abs(a - b) <= eps:\n        return True\n    if abs(a) <= eps or abs(b) <= eps:\n        return False\n    return abs((a-b)/a) <= eps or abs((a-b)/b) <= eps\n\ndef check_input(input_file, exp_output_file, output_file):\n    exp_output_lines = iter(exp_output_file.rstrip('\\n').split('\\n'))\n    output_lines = iter(output_file.rstrip('\\n').split('\\n'))\n\n    # process a test case\n    exp_outp = Decimal(exp_output_lines.next())\n    outp = Decimal(output_lines.next())\n    if not good_error(exp_outp, outp):\n        return 0\n\n    # Check extra lines\n    try:\n        output_lines.next()\n        return 0\n    except StopIteration:\n        pass\n\n    return 1\n\nweights = [0] + [10]*1000\n\n###########\n\ndef check_inputs(inputs, exp_outputs, outputs, signals, check_input, **data):\n    ''' Checks all input/output file pairs and yields the score of each '''\n    for input_file, exp_output_file, output_file, signal in zip(inputs, exp_outputs, outputs, signals):\n        result = 0\n        if signal == 0:\n            try:\n                result = float(check_input(input_file, exp_output_file, output_file))\n            except Exception:\n                result = 0\n\n        yield result\n\n \ndef process(inputs, exp_outputs, outputs, signals, check_input, weights, **data):\n    ''' Return the overall score and the scores of each file. '''\n    scores = list(check_inputs(inputs, exp_outputs, outputs, signals, check_input, **data))\n    total_weight = sum(weights[index] for index in xrange(len(scores)))\n    if total_weight == 0:\n        score = float(sum(scores)) / len(scores)\n    else:\n        score = float(sum(score * weight for score, weight in zip(scores, weights))) / total_weight\n    return score, scores\n    \nif __name__ == '__main__':\n    from sys import stdin\n    import json\n    stdin_lines = stdin.read().split('\\n')\n \n    # Get the run directory for the submission we need to evaluate. I know, hackish right?\n    run_directory = stdin_lines[-1]\n \n    # request.json contains the data submitted for the current.\n    with open(\"%srequest.json\" % run_directory) as f:\n        request = json.load(f)\n\n    # get signals \n    with open(\"signal00.sig\") as f:\n        signals = map(int, f.read().strip().split())\n\n    # get inputs and outputs\n    inputs = []\n    outputs = []\n    for index in xrange(len(request[\"testcase_sources\"])):\n        with open(\"%sinput%05d.in\" % (run_directory, index)) as f:\n            inputs.append(f.read())\n        with open(\"%soutput%05d.out\" % (run_directory, index)) as f:\n            outputs.append(f.read())\n\n    # Gathered all the data we could, lets process it\n    score, testcase_status = process(\n        inputs,\n        request[\"expected_outputs\"],\n        outputs,\n        signals,\n        check_input,\n        weights,\n        source=request[\"source\"],\n        testcases=request[\"testcase_sources\"],\n        lang=request[\"lang\"],\n    )\n \n    # Write the resulting scores\n    print score\n    print \" \".join(str(i) for i in testcase_status)\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 100, 
            "is_solution_unlocked": false, 
            "preview": "Find the total square of the union of the given figures.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": false, 
            "color": null, 
            "track": {
                "name": "Geometry", 
                "taxonomy": 1, 
                "track_slug": "mathematics", 
                "track_id": 22, 
                "track_name": "Mathematics", 
                "id": 54, 
                "rewards_system_enabled": null, 
                "slug": "geometry"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.9999, 
            "difficulty": 0.1, 
            "active": true, 
            "max_score": 100, 
            "slug": "painting-figures", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Painting Figures", 
            "level": 50, 
            "success_ratio": 0.0, 
            "total_count": 2, 
            "created_at": "2015-08-23T21:59:56.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python"
        }
    ], 
    "tutorial_signed_up": true, 
    "current_track": {
        "name": "Mathematics", 
        "id": 22, 
        "priority": 12, 
        "descriptions": "Without mathematics, there's nothing you can do. Everything around you is mathematics. Everything around you is numbers.", 
        "rewards_system_enabled": null, 
        "slug": "mathematics"
    }, 
    "total": 30
}
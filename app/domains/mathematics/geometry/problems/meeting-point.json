{
    "status": true, 
    "model": {
        "tagAncestry": [], 
        "solved_count": 1500, 
        "can_solve": true, 
        "dynamic": true, 
        "epoch_starttime": null, 
        "difficulty_name": "Hard", 
        "compile_and_test": true, 
        "submit_disabled": false, 
        "company_id": null, 
        "languages": [
            "bash", 
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "sbcl", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "java8", 
            "r", 
            "racket", 
            "rust", 
            "swift", 
            "elixir", 
            "cpp14", 
            "kotlin", 
            "julia"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": null, 
        "factor": 80, 
        "default_language": null, 
        "leaderboard_out_of_sync": null, 
        "contest_slug": "master", 
        "python3_template": "#!/usr/bin/py\n# Head ends here\ndef meetingPoint(x,y):\n\n    answer = 0\n    return answer\n# Tail starts here\nif __name__ == '__main__':\n    a = int(input())\n    x=[0]*a\n    y=[0]*a\n    for i in range(0,a):\n        b = input().strip()\n        b = list(map(int, b.split(' ')))\n        x[i]=b[0]\n        y[i]=b[1]\n    print(meetingPoint(x,y))\n", 
        "name": "Meeting Point", 
        "moderator_or_support": false, 
        "success_ratio": 0.4455004455004455, 
        "total_count": 3367, 
        "level": 66, 
        "codechecker_handle": "", 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "is_skip_band_challenge": false, 
        "public_test_cases": true, 
        "available_translations": [], 
        "cpp_template": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <ctime>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cstdio>\n#include <limits>\n#include <vector>\n#include <cstdlib>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n/* Head ends here */\n\nlong long int meetingPoint(vector < long long> x,vector < long long > y) {\n   long long int ans;\n  }\n    /* Write your code here */\n    \n    \n   return ans;\n}\n\n/* Tail starts here */\nint main() {\n    long long int res;\n   \n    int _a_size,_a_i;\n    scanf(\"%d\", &_a_size);\n    vector < long long int > _x;\n    vector < long long int > _y;\n    long long int _x_item,_y_item;\n    for(_a_i = 0; _a_i < _a_size; _a_i++) { \n        scanf(\"%lld %lld\", &_x_item,&_y_item);\n        _x.push_back(_x_item);\n        _y.push_back(_y_item);\n    }\n    res = meetingPoint(_x,_y);\n    printf(\"%lld\\n\",res);    \n    return 0;\n}", 
        "is_preview_contest": false, 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "php_template": "<?php\n/* Head ends here */\nfunction meetingPoint($x,$y){\n}\n/* Tail starts here */\n$fp = fopen(\"php://stdin\", \"r\");\n\nfscanf($fp, \"%s\", $m);\n\n$x = array();\n$y = array();\n\nfor ($i=0; $i<$m; $i++) {\n    fscanf($fp, \"%s %s\", $x[$i],$y[$i]);\n}\n\n$result=meetingPoint($x,$y);\necho $result;\n?>", 
        "perl_template": "#!/usr/bin/perl\n# Head ends here\nsub meetingPoint {\n    my($x,$y) = @_;\n    @x=@{$x};\n    @y=@{$y};\n    $size = scalar @x;\n   \n}\n# Tail starts here\n$m = <>;\n\nfor ($i=0;$i<$m;$i++) {\n    $temp=<>;\n    @_a_split = split(' ',$temp);\n    @_x[$i] = @_a_split[0];\n    @_y[$i] = @_a_split[1];\n}\n\n$result=&meetingPoint(\\@_x,\\@_y);\nprint \"$result\\n\"", 
        "can_be_viewed": true, 
        "submitted_hackers_count": 3367, 
        "public_solutions": true, 
        "deleted": false, 
        "real_dynamic": false, 
        "difficulty_score": "0.549", 
        "difficulty": 0.4503125, 
        "active": true, 
        "slug": "meeting-point", 
        "show_skeliton": null, 
        "player_count": 2, 
        "is_editorial_available": true, 
        "epoch_endtime": null, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png", 
        "judgebot_language": null, 
        "requirements_description": null, 
        "java_template": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    static int meetingPoint(long[] x,long[] y) {\n        \n      /* Complete this function */\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int res;\n        \n        int _a_size = Integer.parseInt(in.nextLine());\n             \n        long[] _x = new long[_a_size];\n        long[] _y = new long[_a_size];\n        long _x_item, _y_item;\n        for(int _a_i = 0; _a_i < _a_size; _a_i++) {\n            String next = in.nextLine();\n            String[] next_split = next.split(\" \");\n            _x[_a_i] = Integer.parseInt(next_split[0]);\n            _y[_a_i] = Integer.parseInt(next_split[1]);\n        }\n        \n        res = meetingPoint(_x,_y);\n        System.out.println(res);\n    }\n}", 
        "python_template": "#!/usr/bin/py\n# Head ends here\ndef meetingPoint(x,y):\n    \n    answer = 0\n    return answer\n# Tail starts here\nif __name__ == '__main__':\n    a = input()\n    x=[0]*a\n    y=[0]*a\n    for i in range(0,a):\n        b = map(int, raw_input().strip().split(\" \"))\n        x[i]=b[0]\n        y[i]=b[1]\n    print meetingPoint(x,y)", 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "cpp14_template": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <ctime>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cstdio>\n#include <limits>\n#include <vector>\n#include <cstdlib>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n/* Head ends here */\n\nlong long int meetingPoint(vector < long long> x,vector < long long > y) {\n   long long int ans;\n  }\n    /* Write your code here */\n    \n    \n   return ans;\n}\n\n/* Tail starts here */\nint main() {\n    long long int res;\n   \n    int _a_size,_a_i;\n    scanf(\"%d\", &_a_size);\n    vector < long long int > _x;\n    vector < long long int > _y;\n    long long int _x_item,_y_item;\n    for(_a_i = 0; _a_i < _a_size; _a_i++) { \n        scanf(\"%lld %lld\", &_x_item,&_y_item);\n        _x.push_back(_x_item);\n        _y.push_back(_y_item);\n    }\n    res = meetingPoint(_x,_y);\n    printf(\"%lld\\n\",res);    \n    return 0;\n}", 
        "kind": "code", 
        "is_custom": false, 
        "ruby_template": "#!/bin/ruby\n# Head ends here\ndef  meetingPoint( x,y) \n            return 0\nend\n# Tail starts here\na = gets.strip.to_i\nx=Array.new(a)\ny=Array.new(a)\n(0...a).each do |i|\n    temp = gets.strip.split(\" \")\n    x[i]=temp[0].to_i\n    y[i]=temp[1].to_i\nend\nputs meetingPoint(x,y)", 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "custom": false, 
        "preview": "Find a meeting place which minimises total distance to everyone on a grid.", 
        "company": null, 
        "is_text": false, 
        "require_unlock": true, 
        "csharp_template": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    /* Head ends here */\n    static int meetingPoint(long[] x, long[] y) {\n\n        return 0;\n    }\n    /* Tail starts here */\n    static void Main(String[] args) {\n\n        int res;\n\n        int _a_size = Convert.ToInt32(Console.ReadLine());\n\n        long[] _x = new long [_a_size];\n        long[] _y = new long [_a_size];\n        for(int _a_i = 0; _a_i < _a_size; _a_i++) {\n            String move = Console.ReadLine();\n            String[] move_split = move.Split(' ');\n            _x[_a_i] = long.Parse(move_split[0]);\n            _y[_a_i] = long.Parse(move_split[1]);\n        }\n\n        res = meetingPoint(_x,_y);\n        Console.WriteLine(res);\n\n    }\n}", 
        "has_started": true, 
        "judgebot": null, 
        "custom_checker_language": null, 
        "custom_case": true, 
        "topics": [
            {
                "slug": "sorting", 
                "title": "Sorting"
            }, 
            {
                "slug": "manhattan-distance", 
                "title": "Manhattan Distance"
            }
        ], 
        "updated_at": "2017-07-11T15:40:56.000Z", 
        "author_name": "HackerRank", 
        "onboarding": null, 
        "id": 40, 
        "has_ended": false, 
        "c_template": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n/* Head ends here */\n\nlong long int meetingPoint(int a_size,long long int x[],long long int y[]) {\n   long long int ans;\n    \n    /* Write your code here */\n    \n    \n   return ans;\n}\n\n/* Tail starts here */\nint main() {\n    long long int res;\n   \n    int _a_size,_a_i;\n    scanf(\"%d\", &_a_size);\n    long long int _x[_a_size],_y[_a_size];\n    for(_a_i = 0; _a_i < _a_size; _a_i++) { \n        scanf(\"%lld %lld\", &_x[_a_i],&_y[_a_i]);\n    }\n    res = meetingPoint(_a_size,_x,_y);\n    printf(\"%lld\\n\",res);    \n    return 0;\n}", 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "status": null, 
        "category": "algorithm", 
        "track": {
            "name": "Geometry", 
            "taxonomy": 1, 
            "track_slug": "mathematics", 
            "track_id": 22, 
            "track_name": "Mathematics", 
            "id": 54, 
            "rewards_system_enabled": null, 
            "slug": "geometry"
        }, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>There is an infinite integer grid where &nbsp;<strong>N</strong>&nbsp;people live in <strong>N</strong> different houses. They decide to create a meeting point at one person's house.&nbsp;  </p>\n\n<p>From any given cell, all 8 adjacent cells can be reached in 1 unit of time, e.g. (x,y) can be reached from (x-1,y+1) in one unit of time. Find a common meeting place which minimizes the combined travel time of everyone.  </p>\n\n<p><strong>Input Format</strong> <br>\nA positive integer N that denotes N houses or people.</p>\n\n<p>The following&nbsp;<em>N</em>&nbsp;lines will contain two integers x,y each that denote the coordinates of the respective house.  </p>\n\n<p><strong>Output Format</strong> <br>\nAn integer, <strong>M</strong>,&nbsp;that denotes the minimum combined travel time of everyone.  </p>\n\n<p><strong>Constraints</strong> <br>\nN &lt;= 10<sup>5</sup> <br>\nThe absolute value of each co-ordinate in the input will be at most 10<sup>9</sup></p>\n\n<p><strong>HINT:</strong>&nbsp;You may need 64-bit integer.</p>\n\n<p><strong>Input #1</strong>  </p>\n\n<pre>4 \n0 1\n2 5 \n3 1 \n4 0 \n</pre>\n\n<p><strong>Output #1</strong> </p>\n\n<pre>8\n</pre> \n\n<p><strong>Explanation</strong> <br>\nThe houses will have a travel-sum of 11, 13, 8, or 10. 8 is the minimum.</p>\n\n<p><strong>Input #2</strong>   </p>\n\n<pre>6 \n12 -14 \n-3 3 \n-14 7 \n-14 -3 \n2 -12 \n-1 -6\n</pre>\n\n<p><strong>Output #2</strong>:</p>\n\n<pre>54</pre></div></div></div>", 
        "max_score": 80, 
        "user_score": 0, 
        "created_at": "2013-01-04T20:24:21.000Z", 
        "countdown_time": 0
    }
}
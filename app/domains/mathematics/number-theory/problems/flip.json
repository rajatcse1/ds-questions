{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 37, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": "import json\nfrom sys import stdin\n\ndef manhattan_dist(a,b,x,y):\n    return abs(x-a) + abs(y-b)\n\ndef transform_mat(dist, matrix, x, y):\n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if manhattan_dist(i,j,x,y) <= dist:\n                matrix[i][j] = (matrix[i][j] + 1)%2\n\n    return matrix\n\ndef check_answer(input, output):\n    input_mat = []\n    input = input.strip().split('\\n')\n    mat_size, dist = map(int, input[0].strip().split(' '))\n    for i in range(mat_size):\n        input_mat.append(map(int, input[i+1].strip().split(' ')))\n\n    output = output.strip().split('\\n')\n\n    if output[0].strip() == \"Impossible\":\n        return False\n\n    if not output[1].isdigit():\n        return False\n\n    transforms = int(output[1])\n    if len(output) != transforms + 2:\n        return False\n\n    if transforms > mat_size**2:\n        return False\n\n    for i in range(transforms):\n        try:\n            a,b = map(int, output[i+2].strip().split(' '))\n        except:\n            return False\n        input_mat = transform_mat(dist, input_mat, a, b)\n        # now do the transforms here\n\n    for i in range(len(input_mat)):\n        for j in range(len(input_mat[0])):\n            if input_mat[i][j] != 0:\n                return False\n\n    return True\n\ndef check_inputs (exp_outputs, outputs, inputs, signals ):\n    scores = []\n    valid = []\n    for tid in range(len(inputs)):\n        input = inputs[tid].strip()\n        output = outputs[tid].strip()\n        exp_output = exp_outputs[tid].strip()\n\n        if signals[tid] != 0:\n            scores.append(0)\n            valid.append(0)\n        else:\n            try:\n                if ((output.split()[0] == \"Impossible\" and exp_output.split()[0] == \"Impossible\") or check_answer(input, output)):\n                    valid.append(1)\n                    scores.append(1.0)\n                else:\n                    valid.append(0)\n                    scores.append(0)\n            except:\n                valid.append(0)\n                scores.append(0)\n\n    return scores, valid\n\nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n\n    # Get the run directory for the submission we need to evaluate. I know,\n    # hackish right?\n\n    run_directory = stdin[0]\n\n    # request.json contains the data submitted for the current.\n    request = json.load(open(run_directory + \"request.json\"))\n\n    data = {\n        # The submitted source code\n        \"outputs\": [],\n        \"inputs\": [],\n        \"expected_outputs\": request[\"expected_outputs\"],\n        \"signals\":[]\n    }\n\n    data[\"signals\"] = map( int, open( \"signal00.sig\" ).read().strip().split() )\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        input = open(run_directory + \"input%05d.in\" %(index)).read()\n        data[\"outputs\"].append(output)\n        data[\"inputs\"].append(input)\n\n    # Gathered all the data we could, lets process it\n    score, testcase_status = check_inputs(data[\"expected_outputs\"], data[\"outputs\"], data[\"inputs\"], data[\"signals\"])\n\n    print sum(score)/len(score)\n    print \" \".join(str(i) for i in testcase_status)", 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2017-07-11T15:44:10.000Z", 
        "author_name": "tuananhnb93", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Hard", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>You are given a square grid of size N, with rows numbered from 0 to N - 1 starting from the top and columns numbered from 0 to N - 1 starting from the left.   </p>\n\n<p>A cell (u, v) refers to the cell that is on the u<sup>th</sup> row and the v<sup>th</sup> column. Each cell contains an integer - 0 or 1. You can pick any cell and flip the number in all the cells (including the picked cell) within the Manhattan distance D from the picked cell. A flip here means changing the number from 0 to 1 and vice-versa. The manhattan distance from the cell (u, v) to the cell (x, y) is equal to <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"16.051ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 6910.8 1223.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path><g transform=\"translate(278,0)\"><path stroke-width=\"1\" d=\"M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g transform=\"translate(1073,0)\"><path stroke-width=\"1\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g transform=\"translate(2073,0)\"><path stroke-width=\"1\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g transform=\"translate(2646,0)\"><path stroke-width=\"1\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g transform=\"translate(3147,0)\"><path stroke-width=\"1\" d=\"M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z\"></path></g><g transform=\"translate(4147,0)\"><path stroke-width=\"1\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g><g transform=\"translate(4426,0)\"><path stroke-width=\"1\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"></path></g><g transform=\"translate(5134,0)\"><path stroke-width=\"1\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g><g transform=\"translate(6134,0)\"><path stroke-width=\"1\" d=\"M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g transform=\"translate(6632,0)\"><path stroke-width=\"1\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g></g></svg></span> where <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.096ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 902.5 1223.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path><g transform=\"translate(278,0)\"><path stroke-width=\"1\" d=\"M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z\"></path></g><g transform=\"translate(624,0)\"><path stroke-width=\"1\" d=\"M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z\"></path></g></g></svg></span> is the absolute value of i.   </p>\n\n<p>Your mission is to change all values in the grid to zero without using more than N\u00d7N flips.</p>\n\n<p><strong>Input Format</strong> <br>\nThe first line of the input contains two integers N and D  separated by a single space. <br>\nEach line in the next N lines contains N integers separated by a single space which are either 0 or 1. the i<sub>th</sub> number on the j<sub>th</sub> line is the number on the cell (i - 1, j - 1) of the grid.</p>\n\n<p><strong>Constraints</strong> <br>\n1 \u2264  N \u2264  20 <br>\n 0 \u2264 D \u2264 40</p>\n\n<p><strong>Output Format</strong> <br>\nIf there is no solution, your output should contain exactly a single string \"Impossible\" (without quotes). If a solution exists, print out the string \"Possible\" (without quotes) in the first line of your output. In the second line, print out an integer M which represent the number of operations that you need. Each line in the next M lines should contain a pair of integers separated by a single space representing the cell that you picked for the corresponding operation. Note that if there is more than one solution you can pick any one of them.</p>\n\n<p><strong>Sample Input:#00</strong></p>\n\n<pre><code>3 1\n0 1 0\n1 1 1\n0 1 0\n</code></pre>\n\n<p><strong>Sample Output:#00</strong></p>\n\n<pre><code>Possible\n1\n1 1\n</code></pre>\n\n<p><strong>Sample Input:#01</strong></p>\n\n<pre><code>3 2\n1 0 1 \n1 1 0 \n0 0 0 \n</code></pre>\n\n<p><strong>Sample Output:#01</strong></p>\n\n<pre><code>Impossible\n</code></pre>\n\n<p><strong>Explanation</strong></p>\n\n<p>In the first testcase, we can perform the first operation in the center cell, this will flip all the elements to 0 within 1 manhattan distance. <br>\nIn the second testcase, we cannot make it an all 0 matrix under 9 moves. Hence, Impossible. </p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 1042, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "bash", 
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "sbcl", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "java8", 
            "r", 
            "racket", 
            "rust", 
            "swift", 
            "elixir", 
            "cpp14", 
            "kotlin", 
            "julia"
        ], 
        "is_custom": true, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": false, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": true, 
        "can_be_viewed": true, 
        "track": {
            "name": "Number Theory", 
            "taxonomy": 1, 
            "track_slug": "mathematics", 
            "track_id": 22, 
            "track_name": "Mathematics", 
            "id": 52, 
            "rewards_system_enabled": null, 
            "slug": "number-theory"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2017-03-24T19:11:32.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1384545600, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 429, 
            "primary_track_id": 3, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": true, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "9 day programming marathon", 
            "effective_epoch_endtime": 1385323200, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Algorithms", 
                "id": 3, 
                "priority": 14, 
                "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
                "rewards_system_enabled": true, 
                "slug": "algorithms"
            }, 
            "primary_tag_id": 3081, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -118032865.19965215, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "<h3>Are you ready to crack 7 more mind-boggling challenges this month?</h3>\n<br>\n\n<br>The contest hosts 7 challenges which are progressively harder to solve. You'll have to 'unlock' each problem to view and solve the next one for a chance to win a cool prize. ", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -118032865.1975794, 
            "challenges_count": 7, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2013-11-24T20:00:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "nov13", 
            "hide_leaderboard": null, 
            "kind": null, 
            "comment_live_sync": null, 
            "name": "20/20 Hack November", 
            "is_multi_round": false, 
            "created_at": "2013-11-07T19:15:05.000Z", 
            "epoch_endtime": 1385323200, 
            "company_associated_contest": null, 
            "rating_category": "20/20 Hack", 
            "has_codesprint_reg_page": null, 
            "starttime": "2013-11-15T20:00:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 115
        }, 
        "factor": 80, 
        "is_solution_unlocked": false, 
        "preview": "Let's try to modify a 0-1 grid.", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 1.0, 
        "difficulty_score": "0.324", 
        "difficulty": 0.5, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 80, 
        "slug": "flip", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 53, 
        "name": "Find The Operations", 
        "is_preview_contest": false, 
        "level": 61, 
        "success_ratio": 0.6981132075471698, 
        "total_count": 53, 
        "created_at": "2013-10-07T10:39:47.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": "", 
        "countdown_time": 0, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/796d8580-790d-457e-ab6d-e50a57704439/150x150.png", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": "python"
    }
}
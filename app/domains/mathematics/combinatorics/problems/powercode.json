{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 6, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2017-07-11T15:44:05.000Z", 
        "author_name": "kaushik_iska", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Advanced", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>The longer the code, the stronger the code. The power number (<strong>P</strong>) of a code determines the strength of a code.</p>\n\n<p>While computing the power number of a code we should ignore the keywords in the code. A few sample key words would be <em>int, unsigned, string, etc</em>. The power of a code can be determined by the number of characters in the code that <strong>do not</strong> belong to any of the keywords.</p>\n\n<p>More formally, for each keyword <strong>K</strong>, consider all the occurrences of <strong>K</strong> in the code, ignore all these matching substrings while computing the power. See the example for clarity.</p>\n\n<p><strong>Example:</strong> <br>\nIf you take a code to be</p>\n\n<div class=\"highlight\"><pre><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span> <span class=\"n\">mlinteger</span> <span class=\"n\">a</span><span class=\"p\">;</span> <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"p\">}</span>\n</pre></div>\n\n\n<p>The above code has <strong>37</strong> characters in total.</p>\n\n<p>If the key words are</p>\n\n<div class=\"highlight\"><pre><span class=\"kt\">int</span>\n<span class=\"k\">return</span>\n<span class=\"n\">lint</span>\n<span class=\"n\">integer</span>\n</pre></div>\n\n\n<p>Then the power of the above code would be <strong>20</strong>, <strong>spaces need to be counted</strong>:</p>\n\n<div class=\"highlight\"><pre><span class=\"s\">\" main() { \"</span>   <span class=\"o\">--&gt;</span> <span class=\"mi\">10</span>\n<span class=\"s\">\"m a; \"</span>         <span class=\"o\">--&gt;</span> <span class=\"mi\">5</span>\n<span class=\"s\">\" 0; }\"</span>        <span class=\"o\">--&gt;</span> <span class=\"mi\">5</span>\n</pre></div>\n\n\n<p>The codes can be concatenated to be made more powerful. If we have two codes <strong>C1</strong>, <strong>C2</strong> with power <strong>P1</strong>, <strong>P2</strong>, the power of code <strong>C1 <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"15.102ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 6502.4 1223.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z\"></path><g transform=\"translate(760,0)\"><path stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g><g transform=\"translate(1483,0)\"><path stroke-width=\"1\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g transform=\"translate(2205,0)\"><path stroke-width=\"1\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g transform=\"translate(2706,0)\"><path stroke-width=\"1\" d=\"M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z\"></path></g><g transform=\"translate(3095,0)\"><path stroke-width=\"1\" d=\"M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z\"></path></g><g transform=\"translate(3672,0)\"><path stroke-width=\"1\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g transform=\"translate(4138,0)\"><path stroke-width=\"1\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g transform=\"translate(4590,0)\"><path stroke-width=\"1\" d=\"M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z\"></path></g><g transform=\"translate(5279,0)\"><path stroke-width=\"1\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g><g transform=\"translate(6001,0)\"><path stroke-width=\"1\" d=\"M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z\"></path></g></g></svg></span></strong> denotes concatenation) will be <strong>P1 + P2</strong>.</p>\n\n<p>While concatenating two codes, a <strong>%</strong> character gets inseted in between the two codes. For example if <strong>C1</strong> was <code>print 5;</code> and <strong>C2</strong> was <code>print 6;</code>, <strong>C1 $ C2</strong> = <code>print 5;%print 6;</code></p>\n\n<p>You are given <strong>N</strong> codes, <strong>K</strong> keywords, you can use each code as many number of times as you want. You are to output the largest power <strong>X</strong>, that can't be attained by concatinating the codes.</p>\n\n<p><strong>Note:</strong></p>\n\n<p>All the following operations are possible.</p>\n\n<ul>\n<li>Two same codes can be concatenated with each other.</li>\n<li>Some codes need not be used in the concatenation.</li>\n<li>Each code can be used any number of times.</li>\n</ul>\n\n<p><strong>Input Format</strong> <br>\nFirst line contains <strong>N</strong>. In the following <strong>N</strong> lines, the <strong>i</strong><sup>th</sup> line represents the code <strong>C<sub>i</sub></strong>. The following line contains <strong>K</strong> the number of keywords. The following K lines one keyword each.</p>\n\n<p><strong>Output Format</strong> <br>\nPrint a single line containing <strong>X</strong> as described above.</p>\n\n<p><strong>Constraints</strong></p>\n\n<div class=\"highlight\"><pre><span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">N</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">10</span>\n<span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"o\">|</span><span class=\"n\">C_i</span><span class=\"o\">|</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">100000</span>\n<span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">K</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">100</span>\n<span class=\"mi\">1</span> <span class=\"o\">&lt;=</span> <span class=\"n\">each</span> <span class=\"n\">keyword</span> <span class=\"n\">length</span> <span class=\"o\">&lt;=</span> <span class=\"mi\">1000</span>\n</pre></div>\n\n\n<p><strong>Note:</strong></p>\n\n<ul>\n<li>Key words do not contain spaces. Both the code and the key words do not contain <strong>%</strong> character. They can contain any other ASCII character.</li>\n<li>If the answer is infinite then print <strong>-1</strong>.</li>\n</ul>\n\n<p><strong>Sample Input: #1</strong></p>\n\n<div class=\"highlight\"><pre><span class=\"mi\">5</span>\n<span class=\"n\">lint</span> <span class=\"n\">maint</span> <span class=\"n\">lllint</span>\n<span class=\"kt\">int</span> <span class=\"n\">maint</span> <span class=\"n\">lllintl</span>\n<span class=\"n\">lint</span> <span class=\"n\">maint</span> <span class=\"n\">lllint</span>\n<span class=\"n\">lint</span> <span class=\"n\">maint</span> <span class=\"n\">lllint</span>\n<span class=\"n\">lint</span> <span class=\"n\">maint</span> <span class=\"n\">lllint</span>\n<span class=\"mi\">2</span>\n<span class=\"kt\">int</span>\n<span class=\"n\">lint</span>\n</pre></div>\n\n\n<p><strong>Sample Output: #1</strong></p>\n\n<div class=\"highlight\"><pre><span class=\"mi\">29</span>\n</pre></div>\n\n\n<p><strong>Sample Input: #2</strong></p>\n\n<div class=\"highlight\"><pre><span class=\"mi\">3</span>\n<span class=\"n\">ababaac</span>\n<span class=\"n\">babab</span>\n<span class=\"n\">abcbab</span>\n<span class=\"mi\">1</span>\n<span class=\"n\">bab</span>\n</pre></div>\n\n\n<p><strong>Sample Output: #2</strong></p>\n\n<div class=\"highlight\"><pre><span class=\"mi\">5</span>\n</pre></div>\n\n\n<p><strong>Explanation:</strong></p>\n\n<p>In sample 1, the powers of codes are 6, 7, 6, 6. And hence the maximum unattainable power by combination is 29. In sample 2, the powers are 4, 0, 3, and hence the result is 5.</p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 960, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "bash", 
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "sbcl", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "java8", 
            "r", 
            "racket", 
            "rust", 
            "swift", 
            "elixir", 
            "cpp14", 
            "kotlin", 
            "julia"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": null, 
        "can_be_viewed": true, 
        "track": {
            "name": "Combinatorics", 
            "taxonomy": 1, 
            "track_slug": "mathematics", 
            "track_id": 22, 
            "track_name": "Mathematics", 
            "id": 51, 
            "rewards_system_enabled": null, 
            "slug": "combinatorics"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2017-03-24T19:11:31.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1380387600, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 268, 
            "primary_track_id": 3, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": true, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "3 challenges in 2 hours", 
            "effective_epoch_endtime": 1380394800, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Algorithms", 
                "id": 3, 
                "priority": 14, 
                "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
                "rewards_system_enabled": true, 
                "slug": "algorithms"
            }, 
            "primary_tag_id": 3081, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -122961473.52876613, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "101 Hack September is here! It's all about speed, accuracy and efficiency. Inside the contest are 3 challenges. You have exactly 120 minutes to solve them. Every second counts.\n<br>\n<br>\nHackerRank invites you to join the contest to compete against hackers from across the globe.\n<br>", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -122961473.52079691, 
            "challenges_count": 3, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2013-09-28T19:00:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "101sep13", 
            "hide_leaderboard": null, 
            "kind": null, 
            "comment_live_sync": null, 
            "name": "101 Hack September", 
            "is_multi_round": false, 
            "created_at": "2013-09-16T20:07:29.000Z", 
            "epoch_endtime": 1380394800, 
            "company_associated_contest": null, 
            "rating_category": "101 Hack", 
            "has_codesprint_reg_page": null, 
            "starttime": "2013-09-28T17:00:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 91
        }, 
        "factor": 100, 
        "is_solution_unlocked": false, 
        "preview": "Is so much power possible?", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.75", 
        "difficulty": 0.36363636363636365, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 100, 
        "slug": "powercode", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 21, 
        "name": "Powercode", 
        "is_preview_contest": false, 
        "level": 89, 
        "success_ratio": 0.2857142857142857, 
        "total_count": 21, 
        "created_at": "2013-09-27T08:28:48.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": "", 
        "countdown_time": 0, 
        "author_avatar": "https://secure.gravatar.com/avatar/4c127f41355f02c67f1c85099f106d6b?d=https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg&s=150", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 48, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": "import json\nfrom sys import stdin\n\ndef check_inputs (inputs, outputs,source):\n    scores = []\n    valid = []\n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n        tc = True\n        if  len(inps.split()) != len(outps.split()):\n            tc = False\n        else:\n            for inp, outp in zip(inps.split(), outps.split()):\n                tc = tc and abs(float(inp)-float(outp))<=1/(10**3)\n\n        if tc:\n            scores.append(1)\n            valid.append(1)\n        else:\n            scores.append(0)\n            valid.append(0)\n    return valid, scores\n\ndef process(data,source):\n    # Whatever you do, I am not giving any marks!\n    score = 0.0\n    valid, scores = check_inputs(data[\"expected_outputs\"], data[\"outputs\"],source)\n    for s in scores:\n        score += s\n\n    return score/len(scores), valid\n\nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n\n    # Get the run directory for the submission we need to evaluate. I know,\n    # hackish right?\n\n    run_directory = stdin[-1]\n\n    # request.json contains the data submitted for the current.\n    request = json.load(open(run_directory + \"request.json\"))\n\n\n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n\n        # The list of test cases\n        \"testcases\": request[\"testcase_sources\"],\n\n        # The submitted language key (Eg: 5 for python)\n        \"lang\": request[\"lang\"],\n\n        # I'll tell you how to fill this next\n        \"expected_outputs\": request[\"expected_outputs\"],\n\n        \"outputs\": []\n    }\n\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n\n\n    # Gathered all the data we could, lets process it\n    score, testcase_status = process(data,data[\"source\"])\n\n    print score\n    print \" \".join(str(i) for i in testcase_status)", 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2017-07-11T15:43:37.000Z", 
        "author_name": "wanbo", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Advanced", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Mobile Towers are on the rise in HacksVille and there are N such mobile towers. Each mobile tower \nis named according to its position in the 2D plane of HacksVille i.e. (A[i],B[i]) is the position\nof the i<sup>th</sup> tower. The city due to its growing power needs, is not able to power all the mobile towers and it can power only a set of towers between a range, say [L..R] (both inclusive). </p>\n\n<p>All the Mobile Towers are monitored by a wireless control room. For the controller room to connect to all the active mobile towers, it has to position itself such that the sum of its distance to all the active mobile towers (S) is minimized. </p>\n\n<p>If the wireless control room is positioned at (X,Y). Then, its distance to the mobile tower <em>i</em>\nis given by</p>\n\n<pre><code>max(|X-A[i]|,|Y-B[i]|) where |x| means absolute value of x. \n</code></pre>\n\n<p><strong>Input Format</strong>  </p>\n\n<p>The first line contains two integers, N and Q separated by a space where Q is the indices of the mobile towers that are active at different points of time. <br>\nThe second line contains integers A<sub>1</sub> to A<sub>N</sub> all separated by a single space. <br>\nThe third line contains integers B<sub>1</sub> to B<sub>N</sub> all separated by a single space where (Ai,Bi) is the position of the i<sup>th</sup> tower.\nQ lines follow each containing the range L and R separated by a single space which are the range of towers that are active. </p>\n\n<pre><code>N Q\nA1 A2 ... An\nB1 B2 ... Bn\nL1 R1\nL2 R2\n...\nLQ RQ\n</code></pre>\n\n<p><strong>Constraints</strong> <br>\n1 &lt;= N &lt;= 100000 <br>\n1 &lt;= Q &lt;= 100000 <br>\n-1000000000 &lt;= A[i], B[i] &lt;= 1000000000 <br>\n1 &lt;= Li &lt;= Ri &lt;= N  </p>\n\n<p><strong>Output Format</strong></p>\n\n<p>Your task is to find the optimal position and print its cumulative distance (S) to all the mobile towers. </p>\n\n<pre><code>S1\nS2\n...\nSQ\n</code></pre>\n\n<p>Error of at most 10<sup>-3</sup> is tolerated. </p>\n\n<p><strong>Sample Input</strong>  </p>\n\n<pre><code>4 2\n1 2 0 1\n4 3 1 1\n1 4\n3 4\n</code></pre>\n\n<p><strong>Sample Output</strong></p>\n\n<pre><code>5.0000000\n1.0000000\n</code></pre>\n\n<p><strong>Explanation</strong></p>\n\n<p>In the testcase, there are 4 mobile towers in the city of HacksVille positioned at (1,4), (2,3), (0,1) and (1,1)</p>\n\n<p>At time T1, all the mobile towers are active ( indicated by L = 1 and R = 4 ). So, one possible location for the mobile control room would be at </p>\n\n<pre><code>1.5 2.5 \n</code></pre>\n\n<p>The cumulative distance (S) is </p>\n\n<pre><code>= max(|1.5-1|, |2.5-4|) + max(|1.5-2|,|2.5-3|) + max(|1.5-0|,|2.5-1|) + max(|1.5-1|,|2.5-1|)\n= max(0.5, 1.5) + max(0.5,0.5) + max(1.5,1.5) + max(0.5,1.5)\n= 1.5 + 0.5 + 1.5 + 1.5\n= 5.0\n</code></pre>\n\n<p>At time T2, only the mobile towers indexed between 3 and 4 ( L = 3 and R = 4) are indexed. So, one possible location for the mobile control room would be, </p>\n\n<pre><code>1 1\n</code></pre>\n\n<p>The cumulative distance (S) is </p>\n\n<pre><code>= max(|1-0|,|1-1|) + max(|1-1|,|1-1|)\n= max(1,0) + max(0,0)\n= 1.0\n</code></pre></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 782, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "bash", 
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "sbcl", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "java8", 
            "r", 
            "racket", 
            "rust", 
            "swift", 
            "elixir", 
            "cpp14", 
            "kotlin", 
            "julia"
        ], 
        "is_custom": true, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": true, 
        "can_be_viewed": true, 
        "track": {
            "name": "Algebra", 
            "taxonomy": 1, 
            "track_slug": "mathematics", 
            "track_id": 22, 
            "track_name": "Mathematics", 
            "id": 55, 
            "rewards_system_enabled": null, 
            "slug": "algebra"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2017-03-24T19:11:30.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1375473600, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 205, 
            "primary_track_id": 3, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": true, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "9 day programming marathon", 
            "effective_epoch_endtime": 1376251200, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Algorithms", 
                "id": 3, 
                "priority": 14, 
                "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
                "rewards_system_enabled": true, 
                "slug": "algorithms"
            }, 
            "primary_tag_id": 3081, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -127105192.16699308, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "<h3>Are you ready to crack 7 more mind-boggling challenges this month?</h3>\n<br>\n\n<br>The contest hosts 7 challenges which are progressively harder to solve. You'll have to 'unlock' each problem to view and solve the next one for a chance to win cool prize", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -127105192.1603273, 
            "challenges_count": 7, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2013-08-11T20:00:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "aug13", 
            "hide_leaderboard": null, 
            "kind": null, 
            "comment_live_sync": null, 
            "name": "20/20 Hack August", 
            "is_multi_round": false, 
            "created_at": "2013-07-23T15:50:26.000Z", 
            "epoch_endtime": 1376251200, 
            "company_associated_contest": null, 
            "rating_category": "20/20 Hack", 
            "has_codesprint_reg_page": null, 
            "starttime": "2013-08-02T20:00:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 76
        }, 
        "factor": 80, 
        "is_solution_unlocked": false, 
        "preview": "Find out the optimal location of the control room for the mobile towers.", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 1.0, 
        "difficulty_score": "0.286", 
        "difficulty": 0.36024844720496896, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 80, 
        "slug": "signal-tower", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 68, 
        "name": "Signal Tower", 
        "is_preview_contest": false, 
        "level": 62, 
        "success_ratio": 0.7058823529411765, 
        "total_count": 68, 
        "created_at": "2013-07-30T13:18:42.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": "", 
        "countdown_time": 0, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/aeda8340-d6af-4f00-9aff-16617e8ba405/150x150.png", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": "python"
    }
}
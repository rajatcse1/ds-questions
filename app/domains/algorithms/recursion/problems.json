{
    "models": [
        {
            "onboarding": null, 
            "solved_count": 5625, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:57:45.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 36028, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Split up a number in a specified manner. ", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 20, 
            "slug": "the-power-sum", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "The Power Sum", 
            "level": 30, 
            "success_ratio": 0.8961287239126972, 
            "total_count": 6277, 
            "created_at": "2017-03-10T09:04:12.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 659, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:54:02.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 35931, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Given a Crossword Grid, and a set of words, fill up the crossword. ", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 30, 
            "slug": "crossword-puzzle", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Crossword Puzzle", 
            "level": 54, 
            "success_ratio": 0.8085889570552147, 
            "total_count": 815, 
            "created_at": "2017-03-09T09:32:58.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 3308, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:54:02.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 35933, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Super Digit", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.773972602739726, 
            "active": true, 
            "max_score": 30, 
            "slug": "recursive-digit-sum", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Recursive Digit Sum", 
            "level": 37, 
            "success_ratio": 0.6452116247318119, 
            "total_count": 5127, 
            "created_at": "2017-03-09T09:44:11.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 244, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-12-07T09:47:54.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 16694, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 40, 
            "is_solution_unlocked": false, 
            "preview": "Can you take opponent\u2019s Queen before losing your own?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 40, 
            "slug": "simplified-chess-engine", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Simplified Chess Engine", 
            "level": 50, 
            "success_ratio": 0.4870259481037924, 
            "total_count": 501, 
            "created_at": "2016-02-03T12:07:43.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 758, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:54:05.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 36024, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "{-# LANGUAGE DeriveGeneric #-}\n-- {{{\nmodule Main where\n\nimport Control.Arrow\nimport Data.List\nimport Data.Char\nimport qualified Data.ByteString.Lazy as B\nimport Control.Applicative\nimport Text.Printf                           -- printf \"%0.6f\" (1.0)\nimport Control.Monad\nimport Data.Aeson\nimport GHC.Generics\n-- }}}\n\ndata Request = Reqest {\n      expected_outputs:: [String]\n  } deriving (Show, Generic)\n\ninstance FromJSON Request\n\ncheck :: (([String], [String]), [String], [String]) -> Bool\ncheck ((keys, [pass]), output, expOutput)\n  | expOutput == [\"WRONG\", \"PASSWORD\"] = expOutput == output\n  | any (`notElem` keys) output        = False\n  | concat output /= pass              = False\n  | otherwise                          =  True\ncheck _ = False\n\nvalidate :: String -> String -> String -> IO Int\nvalidate input1 output1 expOutput1\n  | n /= length output = return 0\n  | otherwise = return (if all check args then 1 else 0)\n  where\n    (n, input)= (\\([n']:rest) -> (read n'::Int, parseInput rest)). map words. lines $ input1\n    output    = map words. lines $ output1\n    expOutput = map words. lines $ expOutput1\n    args = zip3 input output expOutput\n    parseInput [] = []\n    parseInput (_:a:b:c) = (a, b): parseInput c\n\nmain :: IO ()\nmain =\n  liftM (takeWhile (not. isSpace). dropWhile isSpace) getContents >>=\n  \\runDir -> (B.readFile. (runDir ++) $\"request.json\") >>=\n  return. (\\(Right x) -> expected_outputs x). (eitherDecode :: B.ByteString -> Either String Request ) >>=\n  \\files -> forM (zip [(0::Int)..] files)  (tmpFunc runDir) >>=\n  \\status -> print (getScore status) >>\n  (putStrLn. unwords. map show $status) >>\n  (putStrLn. unwords. map show $status)\n  where\n    getScore testStatus = (fromIntegral. sum$ testStatus) / genericLength testStatus\n    tmpFunc runDir (idx, expOutput) = do\n      input <- readFile. (runDir++). printf \"input%05d.in\" $ idx\n      output <- readFile. (runDir++). printf \"output%05d.out\" $ idx\n      validate input output expOutput\n\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 40, 
            "is_solution_unlocked": false, 
            "preview": "Kittens kittens everywhere.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 1.0, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 40, 
            "slug": "password-cracker", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Password Cracker", 
            "level": 63, 
            "success_ratio": 0.5026525198938993, 
            "total_count": 1508, 
            "created_at": "2017-03-10T08:47:16.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "haskell"
        }, 
        {
            "onboarding": null, 
            "solved_count": 399, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:54:04.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 36022, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "{-# LANGUAGE DeriveGeneric #-}\n-- {{{\nmodule Main where\n---------------------Import-------------------------\nimport qualified Data.ByteString.Lazy as B\nimport Data.List\nimport Data.Char\nimport Control.Applicative\nimport Text.Printf                           -- printf \"%0.6f\" (1.0)\nimport Control.Monad\nimport Data.Aeson\nimport GHC.Generics\n-- }}}\n\ndata Request = Reqest {\n      expected_outputs:: [String]\n  } deriving (Show, Generic)\n\ninstance FromJSON Request\n\nmain :: IO ()\nmain =\n  liftM (takeWhile (not. isSpace). dropWhile isSpace) getContents >>=\n  \\runDir -> (B.readFile. (runDir ++) $\"request.json\") >>=\n  return. (\\(Right x) -> expected_outputs x). (eitherDecode :: B.ByteString -> Either String Request ) >>=\n  \\files -> forM (zip [(0::Int)..] files)  (tmpFunc runDir) >>=\n  \\status -> print (getScore' status) >>\n  (putStrLn. unwords. map show $status)\n  where\n    getScore' testStatus = (fromIntegral. sum$ testStatus) / genericLength testStatus\n    tmpFunc runDir (idx, expOutput) = do\n      input <- readFile. (runDir++). printf \"input%05d.in\" $ idx\n      output <- readFile. (runDir++). printf \"output%05d.out\" $ idx\n      validate input output expOutput\n\nvalidate :: String -> String -> String -> IO Int\nvalidate input1 output1 expOutput1 =\n  return $ getScore input1 output1\n\ngetScore :: String -> String -> Int\ngetScore input output =\n  case ans of\n    Just 1 -> 1\n    _      -> 0\n  where\n    ([n]: inArr:_) = map (map (read::String->Int). words). lines $ input\n    ans =\n      checkLength (10*n) output   >>=\n      tokenize                    >>=\n      matchTokens inArr           >>=\n      evaluateExpr\n\n----------------Tokenizer-------------------------------\ndata Operator = Plus | Minus | Times\n  deriving (Show, Eq)\n\noperator :: Char -> Operator\noperator '+' = Plus\noperator '-' = Minus\noperator '*' = Times\n\ndata Token =  TokNum Int\n            | TokOp  Operator\n  deriving (Show, Eq)\n\nisTokOp :: Token -> Bool\nisTokOp (TokOp _) = True\nisTokOp  _       = False\n\nnumEqualTok :: Int -> Token -> Bool\nnumEqualTok val (TokNum num) = val == num\nnumEqualTok _ _ = False\n\ncheckLength :: Int -> String -> Maybe String\ncheckLength len str\n  | length str > len+2 = Nothing\n  | otherwise          = Just str\n\nmatchTokens :: [Int] -> [Token] -> Maybe [Token]\nmatchTokens = checkContent True\n  where\n    checkContent :: Bool -> [Int] -> [Token] -> Maybe [Token]\n    checkContent _ nums toks\n      | null nums && null toks = Just []\n      | null nums || null toks = Nothing\n    checkContent isNum (n:nums) (t:toks)\n      | isNum && numEqualTok n t =\n          (t:) <$> checkContent (not isNum) nums toks\n      | not isNum && isTokOp t   =\n          (t:) <$> checkContent (not isNum) (n:nums) toks\n      | otherwise                = Nothing\n\np = 101\n\ntokenize :: String -> Maybe [Token]\ntokenize [] = Just []\ntokenize (c:cs)\n  | isSpace c = tokenize cs\n  | c == '+' = ((TokOp Plus):) <$> (tokenize cs)\n  | c == '-' = ((TokOp Minus):) <$> (tokenize cs)\n  | c == '*' = ((TokOp Times):) <$> tokenize cs\n  | isNumber c =\n      let\n        (num', cs') = span isNumber (c:cs)\n        num = read num'\n      in\n        if length num' > 7 || num < 1 || num > p-1\n        then Nothing\n        else ((TokNum num):) <$> tokenize cs'\n  | otherwise = Nothing\n\nevaluateExpr :: [Token] -> Maybe Int\nevaluateExpr (TokNum v: toks') =\n  evaluate' v undefined toks'\n  where\n    evaluate' :: Int -> Operator -> [Token] -> Maybe Int\n    evaluate' curVal _     [] = Just $ if curVal == 0 then 1 else 0\n    evaluate' curVal lstOp (TokNum val:toks)\n      | lstOp == Times = evaluate' ((curVal*val)`mod`p) undefined toks\n      | lstOp == Plus  = evaluate' ((curVal+val)`mod`p) undefined toks\n      | lstOp == Minus = evaluate' ((curVal-val)`mod`p) undefined toks\n    evaluate' curVal _      (TokOp op: toks) = evaluate' curVal op toks\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 40, 
            "is_solution_unlocked": false, 
            "preview": "Help Kazama with expressions", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 1.0, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 40, 
            "slug": "arithmetic-expressions", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Arithmetic Expressions", 
            "level": 80, 
            "success_ratio": 0.6110260336906586, 
            "total_count": 653, 
            "created_at": "2017-03-10T08:20:59.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "haskell"
        }, 
        {
            "onboarding": null, 
            "solved_count": 181, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T21:39:03.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 27769, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Find the maximum number of moves you can perform.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": false, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.6, 
            "active": true, 
            "max_score": 50, 
            "slug": "stone-division-2", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": " Stone Division, Revisited", 
            "level": 50, 
            "success_ratio": 0.5638629283489096, 
            "total_count": 321, 
            "created_at": "2016-11-04T14:30:05.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 358, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:54:08.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 36029, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Find multiples to reach `N`.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 50, 
            "slug": "k-factorization", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "K Factorization", 
            "level": 67, 
            "success_ratio": 0.750524109014675, 
            "total_count": 477, 
            "created_at": "2017-03-10T09:23:43.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 64, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:54:04.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 35940, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 60, 
            "is_solution_unlocked": false, 
            "preview": "Pin bowling", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.3, 
            "active": true, 
            "max_score": 60, 
            "slug": "bowling-pins", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Bowling Pins", 
            "level": 86, 
            "success_ratio": 0.2098360655737705, 
            "total_count": 305, 
            "created_at": "2017-03-09T10:37:18.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 45, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-12-23T12:30:50.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 17191, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 60, 
            "is_solution_unlocked": false, 
            "preview": "Can you take opponent\u2019s Queen before losing your own?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 60, 
            "slug": "simplified-chess-engine-ii", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Simplified Chess Engine II", 
            "level": 50, 
            "success_ratio": 0.6923076923076923, 
            "total_count": 65, 
            "created_at": "2016-02-12T12:58:29.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 481, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:42:19.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 350, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 150, 
            "is_solution_unlocked": false, 
            "preview": "Given a set of K repetitive sum of N elements sum. Find the set", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Recursion", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 153, 
                "rewards_system_enabled": true, 
                "slug": "recursion"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.3, 
            "active": true, 
            "max_score": 150, 
            "slug": "repeat-k-sums", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Repetitive K-Sums", 
            "level": 80, 
            "success_ratio": 0.5117021276595745, 
            "total_count": 940, 
            "created_at": "2013-02-12T00:29:08.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }
    ], 
    "tutorial_signed_up": true, 
    "current_track": {
        "name": "Algorithms", 
        "id": 3, 
        "priority": 14, 
        "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
        "rewards_system_enabled": true, 
        "slug": "algorithms"
    }, 
    "total": 11
}
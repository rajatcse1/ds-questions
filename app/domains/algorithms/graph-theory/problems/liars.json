{
    "status": true, 
    "model": {
        "tagAncestry": [], 
        "solved_count": 186, 
        "can_solve": true, 
        "dynamic": true, 
        "epoch_starttime": null, 
        "difficulty_name": "Advanced", 
        "compile_and_test": true, 
        "submit_disabled": false, 
        "scala_template": "/*\n Enter your code here. Read input from STDIN. Print output to STDOUT\n Your class should be named Solution\n*/", 
        "languages": [
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "whitespace", 
            "sbcl", 
            "java8", 
            "octave", 
            "racket", 
            "rust", 
            "bash", 
            "r", 
            "swift", 
            "fortran", 
            "cpp14", 
            "coffeescript", 
            "ada", 
            "pypy", 
            "pypy3", 
            "elixir", 
            "kotlin", 
            "julia"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": null, 
        "factor": 85, 
        "default_language": null, 
        "leaderboard_out_of_sync": null, 
        "contest_slug": "master", 
        "name": "Liars", 
        "moderator_or_support": false, 
        "success_ratio": 0.43661971830985913, 
        "total_count": 426, 
        "level": 82, 
        "codechecker_handle": null, 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "is_skip_band_challenge": false, 
        "public_test_cases": true, 
        "available_translations": [], 
        "cpp_template": "/* Sample program illustrating input and output */\n\n#include<iostream>\nusing namespace std;\nint main(void){\n\n//Helpers for input and output\n\n\tint N, M;\n\tcin >> N, M;\n\t\n\tint A[M], B[M], C[M];\n\tfor(int i = 0; i < M; i++){\n\t\tcin >> A[i] >> B[i] >> C[i];\n\t}\n\t\n\tint result1, result2;\n\tcout << result1 << \" \" << result2 << \"\\n\";\n\t\n\treturn 0;\n}", 
        "is_preview_contest": false, 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "php_template": "<?php\n /* Enter your code here. Read input from STDIN. Print output to STDOUT */", 
        "can_be_viewed": true, 
        "submitted_hackers_count": 426, 
        "public_solutions": true, 
        "deleted": false, 
        "real_dynamic": false, 
        "difficulty_score": "0.606", 
        "difficulty": 0.3813559322033898, 
        "active": true, 
        "slug": "liars", 
        "show_skeliton": null, 
        "player_count": 2, 
        "is_editorial_available": false, 
        "epoch_endtime": null, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png", 
        "judgebot_language": null, 
        "requirements_description": null, 
        "java_template": "/* Write your java code here. Input is from STDIN and output to STDOUT. Please refer FAQ for more details.\nThe classname is Solution.\n*//* Sample program illustrating input and output */\n\nimport java.util.*;\n\nclass Solution{\n\tpublic static void main( String args[] ){\n\t\t\n// helpers for input/output\t\t\n\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint N, M;\n\t\tN = in.nextInt();\n\t\tM = in.nextInt();\n\n\t\tint A[] = new int[M];\n\t\tint B[] = new int[M];\n\t\tint C[] = new int[M];\n\t\tfor(int i=0; i<M; i++){\n\t\t\tA[i] = in.nextInt();\n\t\t\tB[i] = in.nextInt();\n\t\t\tC[i] = in.nextInt();\n\t\t}\n\t\t\n\t\tint result1 = 0, result2 = 0;\n\t\tSystem.out.println( result1 + \" \" + result2 );\n\t\t\n\t}\n}", 
        "python_template": "#!/bin/python\n\n\n\n# code snippet for illustrating input/output\n\ninp = raw_input()\nN, M = [int(x) for x in inp.split(' ')]\n\nA = []\nB = []\nC = []\n\nfor i in range(0, M):\n\n\tnumbers = raw_input()\n\ta, b, c = [int(x) for x in numbers.split(' ')]\n\tA.append(a)\n\tB.append(b)\n\tC.append(c)\n\nresult = 0\nprint result", 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "company_id": null, 
        "kind": "code", 
        "is_custom": false, 
        "ruby_template": "#Write your Ruby code here. Input is from STDIN and output to STDOUT. Please refer FAQ for more details.", 
        "haskell_template": "-- Enter your code here. Read input from STDIN. Print output to STDOUT", 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "custom": false, 
        "preview": "Some of your soldiers are liars! You are given the number of liars amongst certain ranges. Find the minimum and maximum number of liars amongst your soldiers.", 
        "company": null, 
        "is_text": false, 
        "clojure_template": "; Enter your code here. Read input from STDIN. Print output to STDOUT\n; Name your namespace solution with :gen-class attribute", 
        "require_unlock": true, 
        "csharp_template": "/* Sample program illustrating input/output */\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\tstatic void Main(String[] args) {\n\t\tint N, M;\n\t\tN = Convert.ToInt32(Console.ReadLine());\n\t\tM = Convert.ToInt32(Console.ReadLine());\n\t\tint [] A = new int [M];\n\t\tint [] B = new int [M];\n\t\tint [] C = new int [M];\n\t\n\t\tfor(int i=0; i<M ;i++){\n\t\n\t\t\tstring numbers = Console.ReadLine(); \n\t\t\tstring[] split = numbers.Split(new Char[] {' ', '\\t', '\\n'});\n\t\t\t\n\t\t\tint a = Convert.ToInt32(split[0].Trim());\n\t\t\tint b = Convert.ToInt32(split[1].Trim());\n\t\t\tint c = Convert.ToInt32(split[2].Trim());\n\n\t\t\tA[i] = a;\n\t\t\tB[i] = b;\n\t\t\tC[i] = c;\n\t\t}\t\t\n\t\t\n\t\tint result1 = 0, result2 = 0;\n\t\tConsole.WriteLine(result1 + \" \" + result2);\n\t}\n}", 
        "has_started": true, 
        "judgebot": null, 
        "custom_checker_language": null, 
        "custom_case": true, 
        "topics": [], 
        "updated_at": "2017-07-11T15:41:36.000Z", 
        "author_name": "HackerRank", 
        "onboarding": null, 
        "id": 96, 
        "has_ended": false, 
        "c_template": "/*Sample program illustrating input/output */\n#include<stdio.h>\n\nint main(){\n\n//Helpers for input/output\n\tint i, N, M;\n\t\n\tscanf(\"%d%d\", &N, &M);\n\tint A[M], B[M], C[M];\n\n\tfor(i=0; i<M; i++){\n\t\tscanf(\"%d%d%d\", &(A[i]), &(B[i]), &(C[i]));\n\t}\n\t\n\tint result1, result2;\n\tprintf(\"%d %d\\n\", result1, result2);\n\n}", 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "status": null, 
        "category": "algorithm", 
        "track": {
            "name": "Graph Theory", 
            "taxonomy": 1, 
            "track_slug": "algorithms", 
            "track_id": 3, 
            "track_name": "Algorithms", 
            "id": 33, 
            "rewards_system_enabled": true, 
            "slug": "graph-theory"
        }, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>You have <strong>N</strong> soldiers numbered from 1 to N. Each of your soldiers is either a liar or a truthful person. You have <strong>M</strong> sets of information about them. Each set of information tells you the number of liars among a certain range of your soldiers. Let <strong>L</strong> be the total number of your liar soldiers. Since you can't find the exact value of L, you want to find the minimum and maximum value of L.</p>\n\n<p><strong>Input Format</strong>  </p>\n\n<ul>\n<li>The first line of the input contains two integers <strong>N</strong> and <strong>M</strong>.  </li>\n<li>Each of next <strong>M</strong> lines contains three integers: <br>\n<strong>A B C</strong> where the set of soldiers numbered as {A, A+1, A+2, ..., B}, exactly C of them are liars. (1 &lt;= Ai &lt;= Bi &lt;= n) and (0 &lt;= Ci &lt;= Bi-Ai).</li>\n</ul>\n\n<p><em>Note:</em> <strong>N</strong> and <strong>M</strong> are not more than 101, and it is guaranteed the given informations is satisfiable.</p>\n\n<p><strong>Output Format</strong> <br>\nPrint two integers Lmin and Lmax to the output.</p>\n\n<p><strong>Sample Input #1</strong>  </p>\n\n<pre><code>3 2\n1 2 1\n2 3 1\n</code></pre>\n\n<p><strong>Sample Output #1</strong></p>\n\n<pre><code>1 2\n</code></pre>\n\n<p><strong>Sample Input #2</strong> </p>\n\n<pre><code>20 11\n3 8 4\n1 9 6\n1 13 9\n5 11 5\n4 19 12\n8 13 5\n4 8 4\n7 9 2\n10 13 3\n7 16 7\n14 19 4\n</code></pre>\n\n<p><strong>Sample Output #2</strong></p>\n\n<pre><code>13 14\n</code></pre>\n\n<p><strong>Explanation</strong> <br>\nIn the first input, the initial line is \"3 2\", i.e. that there are 3 soldiers and we have 2 sets of information. The next line says there is one liar in the set of soldiers {1, 2}. The final line says there is one liar in the set {2,3}. There are two possibilities for this scenario: Soldiers number 1 and 3 are liars or soldier number 2 is liar. <br>\nSo the minimum number of liars is 1 and maximum number of liars is 2. Hence the answer, 1 2.</p></div></div></div>", 
        "max_score": 85, 
        "user_score": 0, 
        "created_at": "2013-01-04T20:28:32.000Z", 
        "countdown_time": 0
    }
}
{
    "status": true, 
    "model": {
        "onboarding": null, 
        "python_template": "#!/bin/python\n\n\n\n# code snippet illustrating input/output\ntest = int(raw_input())\nfor t in range(0, test):\n\tN = int(raw_input())\n\tV = []\n\n\tnumbers = raw_input()\n\tfor number in numbers.split():\n\t\tV.append( int(number) )\n\n\tresult = 0\n\tprint result", 
        "solved_count": 116, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2017-07-11T15:41:38.000Z", 
        "author_name": "HackerRank", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Advanced", 
        "require_unlock": true, 
        "cpp_template": "/* Sample program illustrating input/output */\n#include<iostream>\nusing namespace std;\nint main(void){\n\n \n\n//Helpers for input and output\n\tint test;\n\tcin >> test;\n\tfor(int t=0; t<test; t++){\n\n\t\tint N;\n\t\tcin >> N;\n\t\n\t\tint V[N];\n\t\tfor(int i = 0; i < N; i++){\n\t\t\tcin >> V[i];\n\t\t}\n\t\n\t\tint result;\n\t\tcout << result << \"\\n\";\n\t}\n\n\n\treturn 0;\n}", 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>You are playing a game of Nim with a friend. The rules are are follows:</p>\n\n<p>1) Initially, there are N piles of stones. Two players play alternately.</p>\n\n<p>2) In each turn, a player can choose one non empty pile and remove any number of stones from it. At least one stone must be removed.</p>\n\n<p>3) The player who picks the last stone from the last non empty pile wins the game.</p>\n\n<p>It is currently your friend's turn. You suddenly realize that if your friend was to play optimally in that position, you would lose the game. So while he is not looking, you decide to cheat and add some (possibly 0) stones to each pile. You want the resultant position to be such that your friend has no guaranteed winning strategy, even if plays optimally. You cannot create a new pile of stones. <em>You can only add stones, and not remove stones from a pile</em>. What is the least number of stones you need to add?</p></div></div></div><div class='challenge_input_format'><div class='msB challenge_input_format_title'><p><strong>Input Format</strong></p></div><div class='msB challenge_input_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>The first line contains the number of cases T. T cases follow. Each case contains the number N on the first line followed by N numbers on the second line. The ith number denotes si, the number of stones in the ith pile currently.</p></div></div></div><div class='challenge_constraints'><div class='msB challenge_constraints_title'><p><strong>Constraints</strong></p></div><div class='msB challenge_constraints_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>1 &lt;= T &lt;= 20</p>\n\n<p>2 &lt;= N &lt;= 15</p>\n\n<p>1 &lt;= si &lt; 1000000000 (10^9)</p></div></div></div><div class='challenge_output_format'><div class='msB challenge_output_format_title'><p><strong>Output Format</strong></p></div><div class='msB challenge_output_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Output T lines, containing the answer for each case. If the current position is already losing for your friend, output 0.</p></div></div></div><div class='challenge_sample_input'><div class='msB challenge_sample_input_title'><p><strong>Sample Input</strong></p></div><div class='msB challenge_sample_input_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>3</p>\n\n<p>2</p>\n\n<p>1 3</p>\n\n<p>3</p>\n\n<p>1 1 1</p>\n\n<p>4</p>\n\n<p>10 4 5 1</p></div></div></div><div class='challenge_sample_output'><div class='msB challenge_sample_output_title'><p><strong>Sample Output</strong></p></div><div class='msB challenge_sample_output_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>2</p>\n\n<p>3</p>\n\n<p>6</p></div></div></div><div class='challenge_explanation'><div class='msB challenge_explanation_title'><p><strong>Explanation</strong></p></div><div class='msB challenge_explanation_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>For the first case, add 2 stones to the first pile. Then, both piles will have 3 stones each. It is easy to verify that your friend cannot win the game unless you make a mistake.</p>\n\n<p>For the second case, add 1 stone to the first pile, and 2 stones to the second pile.</p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 102, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "whitespace", 
            "sbcl", 
            "java8", 
            "octave", 
            "racket", 
            "rust", 
            "bash", 
            "r", 
            "swift", 
            "fortran", 
            "cpp14", 
            "coffeescript", 
            "ada", 
            "pypy", 
            "pypy3", 
            "elixir", 
            "kotlin", 
            "julia"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": false, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "tagAncestry": [], 
        "custom": false, 
        "can_be_viewed": true, 
        "track": {
            "name": "Dynamic Programming", 
            "taxonomy": 1, 
            "track_slug": "algorithms", 
            "track_id": 3, 
            "track_name": "Algorithms", 
            "id": 35, 
            "rewards_system_enabled": true, 
            "slug": "dynamic-programming"
        }, 
        "primary_contest": null, 
        "c_template": "/* Sample program illustrating input/output */\n\n#include<stdio.h>\n\nint main(){\n\n//Helpers for input/output\n\t\n\tint t, test;\n\tscanf(\"%d\", &test);\n\tfor(t =0; t<test; t++){\n\n\t\tint i, N;\n\t\tint V[20];\n\t\n\t\tscanf(\"%d\", &N);\n\t\tfor(i=0; i<N; i++){\n\t\t\tscanf(\"%d\", &(V[i]));\n\t\t}\n\t\n\t\tint result;\n\t\tprintf(\"%d\\n\", result);\n\t}\n\treturn 0;\n\n}", 
        "factor": 100, 
        "is_solution_unlocked": false, 
        "preview": "You realize you are about to lose the game of NIm and decide to cheat by adding stones. What is the least number of stones you need to add to guarantee a win?", 
        "is_editorial_available": false, 
        "status": null, 
        "category": "algorithm", 
        "public_solutions": true, 
        "java_template": "/* Sample program illustrating input/output */\n\nimport java.util.*;\n\nclass Solution{\n\tpublic static void main( String args[] ){\n\t\t\n// helpers for input/output\t\t\n\t\n\t\tScanner in = new Scanner(System.in);\n\t\t\n\t\tint test;\n\t\ttest = in.nextInt();\n\t\tfor(int t=0; t<test; t++){\n\t\t\tint N;\n\t\t\tN = in.nextInt();\n\t\t\n\t\t\tint V[] = new int[N];\n\t\t\tfor(int i=0; i<N; i++){\n\t\t\t\tV[i] = in.nextInt();\n\t\t\t}\n\t\t\t\n\t\t\tint result = 0;\n\t\t\tSystem.out.println( result );\n\t\t}\n\t}\n}", 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.699", 
        "difficulty": 0.3105263157894737, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 100, 
        "slug": "unfair-game", 
        "contest_slug": "master", 
        "csharp_template": "/* Sample program illustrating input/output */\n\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n\n\tstatic void Main(String[] args) {\n\t\t\n\t\tint test;\n\t\ttest = Convert.ToInt32(Console.ReadLine());\n\t\t\n\t\tfor(int t=0; t<test; t++){\t\n\t\t\tint N;\n\t\t\tN = Convert.ToInt32(Console.ReadLine());\n\t\t\n\t\t\tint [] V =new int [N];\n\t\t\n\t\t\tstring numbers = Console.ReadLine(); \n\t\t\tstring[] split = numbers.Split(new Char[] {' ', '\\t', '\\n'});\n\t\t\n\t\t\tint i = 0;\n\n\t\t\tforeach (string s in split){\n\t\t\t\tif( s.Trim() != \"\"){\n\t\t\t\t\tV[i++] = Convert.ToInt32(s);\n\t\t\t\t}\n\t\t\t}\t\n\t\t\n\t\t\tint result = 0;\n\t\t\tConsole.WriteLine(result);\n\t\t}\n\t}\n}", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 416, 
        "name": "Unfair Game", 
        "is_preview_contest": false, 
        "level": 91, 
        "success_ratio": 0.27884615384615385, 
        "total_count": 416, 
        "created_at": "2013-01-04T20:28:50.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": null, 
        "countdown_time": 0, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
{
    "models": [
        {
            "onboarding": null, 
            "solved_count": 369, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-12-07T09:47:56.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 27425, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "from __future__ import division\nimport json\nfrom sys import stdin\nimport copy\n\ndef gets(inps, outps, anss):\n    # returns number between 0 and 1 (score for this test).\n    inp = inps.strip().split(\"\\n\")\n    out = outps.strip().split(\"\\n\")\n    ans = anss.strip().split(\"\\n\")\n\n    def isint(value):\n        try:\n            int(value)\n            return True\n        except ValueError:\n            return False\n\n    def getints(number, line):\n        ints = []\n        linesplit = line.strip().split()\n        if len(linesplit) != number:\n            return [None]*number\n        for num in linesplit:\n            if not isint(num):\n                return [None]*number\n            ints.append(int(num))\n        return ints\n\n    _N, _M = map(int,inp[0].strip().split())\n    _S = set()\n    for i in xrange(1, _M+1):\n        x, y = map(int,inp[i].strip().split())\n        _S.add((x, y))\n        _S.add((y, x))\n    \n    if len(out) < 2:\n        return 0\n    N = getints(1, out[0])[0]\n    if N == None:\n        return 0\n    if N <= 0 or N > _N:\n        return 0\n\n    A = getints(N,out[1])\n    if A[0] == None:\n        return 0\n    if len(set(A)) != N:\n        return 0\n\n    for i in range(1, N):\n        if (A[i-1], A[i]) not in _S:\n            return 0\n    return 1.0 * N * N / _N / _N\n\ndef check_inputs (inputs, outputs, answers):\n    lis = []\n    for inps, outps, ans in zip(inputs, outputs, answers):\n        lis.append(gets(inps, outps, ans))\n    return lis\n\ndef process(data):\n    # Whatever you do, I am not giving any marks!\n    score = 0\n\n    b = check_inputs(data[\"inputs\"], data[\"outputs\"], data[\"expected_outputs\"])\n    if len(b)==1:\n        score = sum(b)/len(b)\n    else:\n        score = sum(b[1::])/len(b[1::])\n    for i in xrange(len(b)):\n        if b[i]>0.000001:\n            b[i] = 1\n    score2 = 0.0\n    while score2 < score and score2 < 0.99:\n        score2 += 0.05\n    return score2, b\n\nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n\n    # Get the run directory for the submission we need to evaluate. I know,\n    # hackish right?\n    run_directory = stdin[-1]\n\n    # request.json contains the data submitted for the current.\n    request = json.load(open(run_directory + \"request.json\"))\n\n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n        # The list of test cases\n        \"testcases\": request[\"testcase_sources\"],\n        # The submitted language key (Eg: 5 for python)\n        \"lang\": request[\"lang\"],\n        # I'll tell you how to fill this next\n        \"expected_outputs\": request[\"expected_outputs\"],\n        \"outputs\": [],\n        \"inputs\": [],\n    }\n\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n\n    for index in range(len(request[\"testcase_sources\"])):\n        inputs = open(run_directory + \"input%05d.in\" %(index)).read()\n        data[\"inputs\"].append(inputs)\n    # Gathered all the data we could, lets process it\n    score, testcase_status = process(data)\n\n    print score\n    print \" \".join(str(i) for i in testcase_status)\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 70, 
            "is_solution_unlocked": false, 
            "preview": "Find longest path", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "NP Complete", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 29, 
                "rewards_system_enabled": true, 
                "slug": "np-complete-problems"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.25, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 70, 
            "slug": "walking-the-approximate-longest-path", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Walking the Approximate Longest Path", 
            "level": 50, 
            "success_ratio": 0.7335984095427436, 
            "total_count": 503, 
            "created_at": "2016-10-29T15:16:34.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python"
        }, 
        {
            "onboarding": null, 
            "solved_count": 28, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-12-20T02:57:55.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 28719, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "from __future__ import division\nimport json\nfrom sys import stdin\nfrom sys import stderr\nimport copy\nimport math\n\ndef gets(inps, outps, anss):\n    # returns number between 0 and 1 (score for this test).\n    inp = inps.strip().split(\"\\n\")\n    out = outps.strip().split(\"\\n\")\n    ans = anss.strip().split(\"\\n\")\n\n    def isint(value):\n        try:\n            int(value)\n            return True\n        except ValueError:\n            return False\n\n    def getints(number, line):\n        ints = []\n        linesplit = line.strip().split()\n        if len(linesplit) != number:\n            return [None]*number\n        for num in linesplit:\n            if not isint(num):\n                return [None]*number\n            ints.append(int(num))\n        return ints\n\n    _N = map(int,inp[0].strip().split())[0]\n    _A = []\n    for i in xrange(_N):\n        _A.append(list(map(int,inp[i + 1].strip().split())))\n\n    AAA = 0\n    for i in xrange(_N):\n        for j1 in xrange(_N):\n            for j2 in xrange(j1 + 1,_N):\n                AAA += (_A[i][j1] < _A[i][j2])\n\n    for j in xrange(_N):\n        for i1 in xrange(_N):\n            for i2 in xrange(i1 + 1,_N):\n                AAA += (_A[i1][j] < _A[i2][j])\n    \n    if len(out) < 1:\n        return 0\n\n    M = getints(1, out[0])[0]\n    if M == None or M < 0 or M > 500:\n        return 0\n    if len(out) != M + 1:\n        return 0\n\n    def rtt(x,y,z,A):\n        B = [[0]*z for i in xrange(z)]\n        for i in xrange(z):\n            for j in xrange(z):\n                B[j][z - 1 - i] = A[x + i][y + j]\n        for i in xrange(z):\n            for j in xrange(z):\n                A[x + i][y + j] = B[i][j]\n\n    for i in xrange(1, M + 1):\n        x, y, z = getints(3,out[i])\n        if (1 <= x and x <= _N and\n            1 <= y and y <= _N and\n            2 <= z and z <= _N and\n            x + z <= _N + 1 and y + z <= _N + 1):\n            rtt(x - 1, y - 1, z, _A)\n        else:\n            return 0\n    \n    BBB = 0; CCC = _N * _N * (_N - 1)\n\n    for i in xrange(_N):\n        for j1 in xrange(_N):\n            for j2 in xrange(j1 + 1,_N):\n                BBB += (_A[i][j1] < _A[i][j2])\n\n    for j in xrange(_N):\n        for i1 in xrange(_N):\n            for i2 in xrange(i1 + 1,_N):\n                BBB += (_A[i1][j] < _A[i2][j])\n    \n    if BBB < AAA:\n        return 0\n    \n    return (BBB - AAA)/(CCC - AAA)\n\ndef check_inputs (inputs, outputs, answers):\n    lis = []\n    for inps, outps, ans in zip(inputs, outputs, answers):\n        lis.append(gets(inps, outps, ans))\n    return lis\n\ndef process(data):\n    # Whatever you do, I am not giving any marks!\n    score = 0\n\n    b = check_inputs(data[\"inputs\"], data[\"outputs\"], data[\"expected_outputs\"])\n    if len(b)==1:\n        score = sum(b)/len(b)\n    else:\n        score = sum(b[1::])/len(b[1::])\n    for i in xrange(len(b)):\n        if b[i]>0.000001:\n            b[i] = 1\n    return math.ceil(100.0 * score) / 100.0, b\n\nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n\n    # Get the run directory for the submission we need to evaluate. I know,\n    # hackish right?\n    run_directory = stdin[-1]\n\n    # request.json contains the data submitted for the current.\n    request = json.load(open(run_directory + \"request.json\"))\n\n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n        # The list of test cases\n        \"testcases\": request[\"testcase_sources\"],\n        # The submitted language key (Eg: 5 for python)\n        \"lang\": request[\"lang\"],\n        # I'll tell you how to fill this next\n        \"expected_outputs\": request[\"expected_outputs\"],\n        \"outputs\": [],\n        \"inputs\": [],\n    }\n\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n\n    for index in range(len(request[\"testcase_sources\"])):\n        inputs = open(run_directory + \"input%05d.in\" %(index)).read()\n        data[\"inputs\"].append(inputs)\n    # Gathered all the data we could, lets process it\n    score, testcase_status = process(data)\n\n    print score\n    \n    print \" \".join(str(i) for i in testcase_status)\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 85, 
            "is_solution_unlocked": false, 
            "preview": "Help Sam rotate sub-squares of a matrix and maximize the matrix's goodness.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "NP Complete", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 29, 
                "rewards_system_enabled": true, 
                "slug": "np-complete-problems"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.3, 
            "difficulty": 0.3, 
            "active": true, 
            "max_score": 85, 
            "slug": "sams-puzzle", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Sam's Puzzle (Approximate)", 
            "level": 50, 
            "success_ratio": 0.5384615384615384, 
            "total_count": 52, 
            "created_at": "2016-11-21T12:42:02.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python"
        }, 
        {
            "onboarding": null, 
            "solved_count": 68, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": false, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:41:49.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 113, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": false, 
            "checker_program": "{\"custom_checker_head\":\"\\n# Start of HEAD\\nfrom __future__ import division, print_function, unicode_literals, absolute_import\\nimport json\\nimport string\\nimport sys\\n# End of HEAD\\n        \",\"custom_checker_body\":\"from sys import stderr\\n\\ndef _assert(condition, message):\\n    ''' assert that doesn't raise AssertionError. Useful/Convenient for judging. '''\\n    if not condition:\\n        raise Exception(message)\\n\\n\\n\\n\\n\\n\\nfrom fractions import gcd\\n\\ndef check_input(input_file, output_file, judge_file):\\n    n = int(output_file.next())\\n    _assert(0 <= n <= 1000, \\\"n bounds\\\")\\n    _assert(n % 2 != 0, \\\"n parity\\\")\\n\\n    values = map(int, output_file.next().strip().split())\\n    _assert(len(values) == n, \\\"List length\\\")\\n    _assert(all(1 <= v <= n for v in values), \\\"Values bounds\\\")\\n\\n    for i in xrange(n):\\n        dirs = set()\\n        for j in xrange(0,i):\\n            a = values[i] - values[j]\\n            b = i - j\\n            assert b > 0\\n            _assert(abs(a) != b, \\\"Diagonal\\\")\\n            g = gcd(a, b)\\n            assert g > 0\\n            d = a / g, b / g\\n            _assert(d not in dirs, \\\"Line\\\")\\n            dirs.add(d)\\n\\n    return n * 0.001\\n\\ndef run_custom_checker(t_obj, r_obj):\\n    if t_obj.testcase_signal:\\n        r_obj.result = False\\n        r_obj.score = 0.0\\n        r_obj.message = \\\"The signal is nonzero\\\"\\n    else:\\n        with open(t_obj.testcase_input_path) as input_file:\\n            with open(t_obj.testcase_output_path) as output_file:\\n                with open(t_obj.testcase_expected_output_path) as judge_file:\\n                    try:\\n                        score = check_input(iter(input_file), iter(output_file), iter(judge_file))\\n                    except Exception, e:\\n                        score = 0\\n\\n        if score > 0:\\n            r_obj.result = True\\n            r_obj.score = score\\n            r_obj.message = \\\"Success\\\"\\n        else:\\n            r_obj.result = False\\n            r_obj.score = 0.0\\n            r_obj.message = \\\"Wrong Answer\\\"\\n\\n\",\"custom_checker_tail\":\"\\n# Start of TAIL\\nclass TestStruct:\\n    def __init__(self):\\n        self.testcase_id = 0\\n        self.testcase_input_path = \\\"\\\"\\n        self.testcase_output_path = \\\"\\\"\\n        self.testcase_expected_output_path = \\\"\\\"\\n        self.metadata_file_paths = []\\n        self.submission_code_path = \\\"\\\"\\n        self.testcase_result = False\\n        self.testcase_signal = 0\\n        self.testcase_time = 0.0\\n        self.testcase_memory = 0\\n        self.data = \\\"\\\"\\n\\n\\nclass ResultStruct:\\n    def __init__(self):\\n        self.result = False\\n        self.score = 0.0\\n        self.message = \\\"\\\"\\n\\n\\ndef read_input_json(json_file_path, t_obj):\\n    file_obj = open(json_file_path, \\\"r\\\")\\n    json_file_contents = file_obj.read()\\n\\n    root = {}\\n    try:\\n        root = json.loads(json_file_contents)\\n    except ValueError:\\n        return 1\\n\\n    try:\\n        # Read values\\n        t_obj.testcase_id = root[\\\"testcase_id\\\"]\\n        t_obj.testcase_input_path = root[\\\"input_file_path\\\"]\\n        t_obj.testcase_output_path = root[\\\"output_file_path\\\"]\\n        t_obj.testcase_expected_output_path = root[\\\"expected_output_file_path\\\"]\\n        t_obj.metadata_file_paths = root[\\\"metadata_file_paths\\\"]\\n        t_obj.submission_code_path = root[\\\"submission_code_path\\\"]\\n        t_obj.testcase_result = root[\\\"testcase_result\\\"]\\n        t_obj.testcase_signal = root[\\\"testcase_signal\\\"]\\n        t_obj.testcase_time = root[\\\"testcase_time\\\"]\\n        t_obj.testcase_memory = root[\\\"testcase_memory\\\"]\\n        t_obj.data = root[\\\"data\\\"]\\n    except KeyError:\\n        return 1\\n\\n    return 0\\n\\n\\ndef write_result_json(r_obj):\\n    root = {\\n        \\\"custom_result\\\" : int(r_obj.result),\\n        \\\"custom_score\\\"  : max((r_obj.score if (r_obj.score <= 1.0) else 1.0), 0),\\n        \\\"custom_message\\\": r_obj.message if (len(r_obj.message) <= 4096) else r_obj.message[0:4095]\\n    }\\n\\n    print(json.dumps(root))\\n\\n\\nif __name__ ==  \\\"__main__\\\":\\n    # Input parameters\\n    t_obj = TestStruct()\\n    # Result parameters\\n    r_obj = ResultStruct()\\n\\n    if len(sys.argv) < 2:\\n        write_result_json(r_obj)\\n        sys.exit(1)\\n\\n    # Decode input JSON\\n    failure = read_input_json(sys.argv[1], t_obj)\\n    # Incase input JSON was malformed or not existent\\n    if failure != 0:\\n        r_obj.message = \\\"Unable to read input json\\\";\\n        write_result_json(r_obj)\\n        sys.exit(2)\\n\\n    #Run the custom checker evaluator\\n    run_custom_checker(t_obj, r_obj)\\n\\n    # Encode result JSON\\n    write_result_json(r_obj)\\n    sys.exit(0)\\n# End of TAIL\\n        \"}", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 100, 
            "is_solution_unlocked": false, 
            "preview": "Can you configure N spies so none of their covers are blown?", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "algorithm", 
            "public_solutions": false, 
            "color": null, 
            "track": {
                "name": "NP Complete", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 29, 
                "rewards_system_enabled": true, 
                "slug": "np-complete-problems"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.999, 
            "difficulty": 0.01624815361890694, 
            "active": true, 
            "max_score": 100, 
            "slug": "spies-revised", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Spies, Revised", 
            "level": 99, 
            "success_ratio": 0.028740490278951817, 
            "total_count": 2366, 
            "created_at": "2013-01-04T20:30:02.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python"
        }, 
        {
            "onboarding": null, 
            "solved_count": 29, 
            "preview_format": null, 
            "can_solve": false, 
            "public_test_cases": false, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:42:08.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 331, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "import java.util.*;\nimport java.io.*;\n\npublic class Solution {\n\n    public static void main(String[] args) {\n\n        Scanner dir = new Scanner(System.in);\n        String directory = dir.next();\n\n        int num_files = 5;\n\n        File[] files = new File[num_files];\n        File[] output_files = new File[num_files];\n\n        double overall_score =0;\n        int[] testcase_status = new int[5];\n        double[] testcase_score = new double[5];\n        for(int i=0;i<5;i++) {\n            testcase_status[i] = 0;\n            testcase_score[i] = 0;\n        }\n\n        try {\n        for(int i=0;i<num_files;i++){\n            String input = directory +\"/input\"+\"0000\"+i + \".in\";\n            String output = directory+\"/output\"+\"0000\"+i + \".out\";\n            files[i]=new File(input);\n            output_files[i] = new File(output);\n        }\n\n        for(int i=0;i<files.length;i++){\n            double profit = createTSPChecker(files[i], output_files[i]);\n\n            double weighted_score=0;\n            if(profit>0){\n                testcase_status[i] = 1;\n                weighted_score = weightedScore(profit, i);\n            }\n            testcase_score[i] = profit;\n\n            overall_score += weighted_score;\n\n        }\n        }catch (Exception e)\n        {\n        }\n\n        System.out.println(overall_score/250);\n        System.out.format(\"%d %d %d %d %d\\n\", testcase_status[0], testcase_status[1],testcase_status[2],testcase_status[3],testcase_status[4]);\n        System.out.format(\"%f %f %f %f %f\\n\", testcase_score[0], testcase_score[1],testcase_score[2],testcase_score[3],testcase_score[4]);\n    }\n\n    public static double weightedScore(double score, int i)\n    {\n                int[] weights = {1, 2, 10, 20, 217};\n                int[] max_scores = {300,30000,900000,100000000,1000000000};\n\n                double weighted_score = weights[i] * score / max_scores[i];\n                return weighted_score;\n    }\n\n\n    public static double createTSPChecker(File f, File out)\n    {\n        ArrayList<City> city_array = new ArrayList<City>();\n\n        HashMap<City, Integer> cities = new HashMap<City, Integer>();\n\n        try {\n            Scanner scan = new Scanner(f);\n\n            int LINES = scan.nextInt();\n            float widget_multiple = scan.nextFloat();\n            float price_factor = scan.nextFloat();\n\n            for(int i=0;i<LINES;i++){\n                City city = new City(scan.nextInt(), scan.nextInt(), scan.nextInt());\n\n                city_array.add(city);\n\n                cities.put(city, city.initial_widget_value);\n\n            }\n\n            TSPCheck tsp1 = new TSPCheck(city_array, cities, widget_multiple, price_factor, out);\n            return tsp1.getTotalProfit();\n\n        } catch (FileNotFoundException e) {\n            return 0;\n        }\n    }\n}\n\n\n\n\nclass City {\n\n    int x, y, initial_widget_value;\n\n\n    boolean visited;\n\n    public City(int x, int y, int initial_widget_value)\n    {\n        this.x = x;\n        this.y = y;\n        this.initial_widget_value = initial_widget_value;\n    }\n\n    public City(int x, int y)\n    {\n        this.x = x;\n        this.y = y;\n    }\n\n    public int x()\n    {\n        return x;\n    }\n\n    public int y()\n    {\n        return y;\n    }\n\n    public int initial_widget_value()\n    {\n        return initial_widget_value;\n    }\n\n\n    @Override\n    public int hashCode() {\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + x;\n        result = prime * result + y;\n        return result;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj)\n            return true;\n        if (obj == null)\n            return false;\n        if (getClass() != obj.getClass())\n            return false;\n        City other = (City) obj;\n        if (x != other.x)\n            return false;\n        if (y != other.y)\n            return false;\n        return true;\n    }\n\n\n\n\n\n\n}\n\n\n\n\n\n\n\n\nclass TSPCheck {\n    HashMap<City, Integer> cities;\n\n    float widget_multiple;\n    float decline;\n\n    double total_profit = 0;\n\n    int city_visits=0;\n\n    int NUM_CITIES;\n\n    City hq = new City(0,0);\n\n    public TSPCheck(ArrayList<City> city_array, HashMap<City, Integer> cities, float widget_multiple, float decline, File out) {\n\n        this.widget_multiple = widget_multiple;\n        this.decline = decline;\n        this.cities = cities;\n\n        NUM_CITIES = cities.size();\n\n        getInput(out);\n    }\n\n\n    public void getInput(File user_output){\n\n        City previous_city = hq;\n\n        int widgets=0;\n\n        Scanner scanline;\n        try {\n            scanline = new Scanner(user_output);\n\n            while(scanline.hasNextLine()){\n\n                String line = scanline.nextLine();\n                Scanner scan = new Scanner(line);\n\n                if(!scan.hasNextInt()){\n                    runError();\n                    break;\n                }\n\n                City city = new City(scan.nextInt(), scan.nextInt() );\n\n                if(isHQ(previous_city)){\n                    if(!scan.hasNextInt()){\n                        runError();\n                        break;\n                    }\n                    widgets = scan.nextInt();\n                }\n\n                if(isHQ(city)){\n                    double distance = getDistance(previous_city, city);\n                    total_profit -= distance;\n                    previous_city = city;\n\n                }\n\n\n                else if(cities.containsKey(city)){\n\n                    city.initial_widget_value = cities.get(city);\n\n                    if(widgets<=0){\n                        runError();\n                        break;\n                    }\n\n                    double current_widget_value = getCurrentWidgetValue(city.initial_widget_value() );\n\n                    double distance = getDistance(previous_city, city);\n                    double leg_cost = getLegCost(distance, widgets);\n\n                    double leg_profit = current_widget_value - leg_cost;\n                    total_profit += leg_profit;\n\n                    cities.remove(city);\n\n                    previous_city = city;\n\n                    widgets--;\n                    city_visits++;\n                }\n                else{\n                    runError();\n                    break;\n                }\n\n            }\n\n        } catch (FileNotFoundException e) {\n            runError();\n            return;\n        }\n\n    }\n\n    private boolean isHQ(City city)\n    {\n        return city.equals(hq);\n    }\n\n    private double getLegCost(double distance, int widgets) {\n        double widgets_cost = distance *  widget_multiple * widgets;\n        return widgets_cost + distance;\n    }\n\n    private double getCurrentWidgetValue(int initial_widget_value) {\n        int exponent = 10 * city_visits / NUM_CITIES;\n\n        double current_value = initial_widget_value * Math.pow(decline, exponent);\n\n        return current_value;\n    }\n\n\n    private double getDistance(City prev_city, City curr_city)\n    {\n        int diffx = prev_city.x() - curr_city.x();\n        int diffy = prev_city.y() - curr_city.y();\n        double distance = Math.hypot(diffx, diffy);\n        return distance;\n    }\n\n    private void runError()\n    {\n        total_profit = 0;\n    }\n\n\n    public double getTotalProfit() {\n        return total_profit;\n    }\n}\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 100, 
            "is_solution_unlocked": false, 
            "preview": "The traveling salesman has started selling blimps! Their prices are declining though, so he'll need to get moving! Help him plot the route.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "cs4", 
            "public_solutions": false, 
            "color": null, 
            "track": {
                "name": "NP Complete", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 29, 
                "rewards_system_enabled": true, 
                "slug": "np-complete-problems"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.189257, 
            "difficulty": 0.003484320557491289, 
            "active": true, 
            "max_score": 100, 
            "slug": "tbsp", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "TBS Problem", 
            "level": 98, 
            "success_ratio": 0.09294871794871795, 
            "total_count": 312, 
            "created_at": "2013-01-25T15:51:11.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "java"
        }
    ], 
    "tutorial_signed_up": true, 
    "current_track": {
        "name": "Algorithms", 
        "id": 3, 
        "priority": 14, 
        "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
        "rewards_system_enabled": true, 
        "slug": "algorithms"
    }, 
    "total": 4
}
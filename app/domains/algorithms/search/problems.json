{
    "models": [
        {
            "onboarding": null, 
            "solved_count": 5079, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-05-06T17:40:49.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 26945, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 25, 
            "is_solution_unlocked": false, 
            "preview": "Find the minimum number of radio transmitters needed to cover all the houses in Hackerland!", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 25, 
            "slug": "hackerland-radio-transmitters", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Hackerland Radio Transmitters", 
            "level": 50, 
            "success_ratio": 0.5961267605633803, 
            "total_count": 8520, 
            "created_at": "2016-10-20T17:38:32.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2970, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:57:28.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 21767, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 25, 
            "is_solution_unlocked": false, 
            "preview": "Help the mayor determine the potential locations for lampposts!", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.6, 
            "active": true, 
            "max_score": 25, 
            "slug": "gridland-metro", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Gridland Metro", 
            "level": 50, 
            "success_ratio": 0.4394791358390056, 
            "total_count": 6758, 
            "created_at": "2016-05-25T17:43:20.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 36756, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "binary-search", 
                    "title": "Binary Search"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:42:49.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 500, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Help Sunny and Johnny spend all their money during each trip to the Ice Cream Parlor.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9072321730314296, 
            "active": true, 
            "max_score": 30, 
            "slug": "icecream-parlor", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Ice Cream Parlor", 
            "level": 30, 
            "success_ratio": 0.9202343397926994, 
            "total_count": 39942, 
            "created_at": "2013-03-21T12:44:53.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 999, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-02-12T18:26:08.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 33387, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 35, 
            "is_solution_unlocked": false, 
            "preview": "Find the shortest path from the top-left corner of a chessboard to the bottom-right corner for each KnightL(a, b).", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 35, 
            "slug": "knightl-on-chessboard", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "KnightL on a Chessboard", 
            "level": 50, 
            "success_ratio": 0.8597246127366609, 
            "total_count": 1162, 
            "created_at": "2017-02-03T18:59:06.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 1936, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-03-12T09:05:46.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 27771, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 35, 
            "is_solution_unlocked": false, 
            "preview": "Help Lauren to resell house at minimum loss.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.6, 
            "active": true, 
            "max_score": 35, 
            "slug": "minimum-loss", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Minimum Loss", 
            "level": 50, 
            "success_ratio": 0.5707547169811321, 
            "total_count": 3392, 
            "created_at": "2016-11-04T14:50:41.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 25237, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "caching", 
                    "title": "Caching"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:42:36.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 458, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 45, 
            "is_solution_unlocked": false, 
            "preview": "Find the numbers missing from a sequence given a permutation of the original sequence", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 45, 
            "slug": "missing-numbers", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Missing Numbers", 
            "level": 42, 
            "success_ratio": 0.837409164814016, 
            "total_count": 30137, 
            "created_at": "2013-03-08T00:23:35.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 29608, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "two-pointer-technique", 
                    "title": "Two Pointer Technique"
                }, 
                {
                    "slug": "greedy-technique", 
                    "title": "Greedy Technique"
                }, 
                {
                    "slug": "dictionary", 
                    "title": "Dictionary"
                }, 
                {
                    "slug": "sorting", 
                    "title": "Sorting"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:40:56.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 41, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Given N numbers, count the total pairs of numbers that have a difference of K.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "algorithm", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.6471086377933705, 
            "active": true, 
            "max_score": 50, 
            "slug": "pairs", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 1, 
            "name": "Pairs", 
            "level": 49, 
            "success_ratio": 0.7173870905214189, 
            "total_count": 41272, 
            "created_at": "2013-01-04T20:24:26.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 32944, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:46:19.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 2490, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 40, 
            "is_solution_unlocked": false, 
            "preview": "Check whether there exists an element in the array such that sum of elements on its left is equal to the sum of elements on its right.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.8327974276527331, 
            "active": true, 
            "max_score": 40, 
            "slug": "sherlock-and-array", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Sherlock and Array", 
            "level": 40, 
            "success_ratio": 0.7783947262717671, 
            "total_count": 42323, 
            "created_at": "2014-05-06T16:46:47.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": ""
        }, 
        {
            "onboarding": null, 
            "solved_count": 3167, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "binary-search", 
                    "title": "Binary Search"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:46:46.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 2619, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 65, 
            "is_solution_unlocked": false, 
            "preview": "Find the maximal value of any (subarray sum % m) in an array.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 65, 
            "slug": "maximum-subarray-sum", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Maximum Subarray Sum", 
            "level": 60, 
            "success_ratio": 0.22329549460621873, 
            "total_count": 14183, 
            "created_at": "2014-06-15T09:19:08.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 10220, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "depth-first-search", 
                    "title": "Depth First Search"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:55:55.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 6774, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Find the largest connected region in a 2D Matrix.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 50, 
            "slug": "connected-cell-in-a-grid", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Connected Cells in a Grid", 
            "level": 35, 
            "success_ratio": 0.8729074137341989, 
            "total_count": 11708, 
            "created_at": "2015-03-03T09:17:57.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 502, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:51:01.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 14104, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 40, 
            "is_solution_unlocked": false, 
            "preview": "Given a string of English letters, count the number of 4-element tuples satisfying the given criteria.\n\n\n", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 40, 
            "slug": "short-palindrome", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Short Palindrome", 
            "level": 50, 
            "success_ratio": 0.31691919191919193, 
            "total_count": 1584, 
            "created_at": "2015-11-03T16:40:35.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 18, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-05-16T03:05:58.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 32587, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 70, 
            "is_solution_unlocked": false, 
            "preview": " Calculate the maximum number of points you can get from traveling to different cities. ", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 70, 
            "slug": "maximizing-mission-points", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Maximizing Mission Points", 
            "level": 50, 
            "success_ratio": 0.10227272727272728, 
            "total_count": 176, 
            "created_at": "2017-01-18T16:57:05.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 5520, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "depth-first-search", 
                    "title": "Depth First Search"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:44:37.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 1315, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Check whether Hermoine waved her hand to illuminate the correct path exactly K times given the forest.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 50, 
            "slug": "count-luck", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Count Luck", 
            "level": 50, 
            "success_ratio": 0.834972016336409, 
            "total_count": 6611, 
            "created_at": "2013-11-15T07:04:53.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 3664, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "depth-first-search", 
                    "title": "Depth First Search"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:44:55.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 1629, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Remove an edge from a tree such that the sum of the absolute difference between the value stored at each of the trees' vertices is minimal.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.6666666666666666, 
            "active": true, 
            "max_score": 50, 
            "slug": "cut-the-tree", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Cut the Tree", 
            "level": 48, 
            "success_ratio": 0.673281881661154, 
            "total_count": 5442, 
            "created_at": "2014-01-07T18:02:56.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 109, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:50:59.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 14002, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 45, 
            "is_solution_unlocked": false, 
            "preview": "Help Karl determine the number of passes necessary to make $n$ candies in CandyMaker.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": false, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 45, 
            "slug": "making-candies", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Making Candies", 
            "level": 65, 
            "success_ratio": 0.20185185185185187, 
            "total_count": 540, 
            "created_at": "2015-10-31T08:18:32.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 274, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:50:34.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 11782, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Solve the famous Tower of Hanoi problem.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 50, 
            "slug": "gena", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Gena Playing Hanoi", 
            "level": 50, 
            "success_ratio": 0.5229007633587787, 
            "total_count": 524, 
            "created_at": "2015-08-28T17:46:42.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 223, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:50:38.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 13331, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Count the number of beautiful quadruples.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 50, 
            "slug": "xor-quadruples", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Beautiful Quadruples", 
            "level": 50, 
            "success_ratio": 0.3127629733520337, 
            "total_count": 713, 
            "created_at": "2015-10-12T23:21:54.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 440, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "binary-search", 
                    "title": "Binary Search"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:44:51.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 1543, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 65, 
            "is_solution_unlocked": false, 
            "preview": "Calculate the square of the minimum time required to start the bike race.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.4065040650406504, 
            "active": true, 
            "max_score": 65, 
            "slug": "bike-racers", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Bike Racers", 
            "level": 65, 
            "success_ratio": 0.3286034353995519, 
            "total_count": 1339, 
            "created_at": "2013-12-13T23:10:30.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 707, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "greedy-technique", 
                    "title": "Greedy Technique"
                }, 
                {
                    "slug": "binary-search", 
                    "title": "Binary Search"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:41:05.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 47, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 70, 
            "is_solution_unlocked": false, 
            "preview": "Given a list of tasks, schedule them so that a task overshoots the deadline by the least amount of time.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "algorithm", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.35231895850284783, 
            "active": true, 
            "max_score": 70, 
            "slug": "task-scheduling", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Task Scheduling ", 
            "level": 67, 
            "success_ratio": 0.3538538538538539, 
            "total_count": 1998, 
            "created_at": "2013-01-04T20:25:03.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 972, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "binary-indexed-tree", 
                    "title": "Binary Indexed Tree"
                }, 
                {
                    "slug": "depth-first-search", 
                    "title": "Depth First Search"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:42:59.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 599, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 70, 
            "is_solution_unlocked": false, 
            "preview": "How many similar pairs are there in a tree?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.3948220064724919, 
            "active": true, 
            "max_score": 70, 
            "slug": "similarpair", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Similar Pair", 
            "level": 69, 
            "success_ratio": 0.32837837837837835, 
            "total_count": 2960, 
            "created_at": "2013-04-17T17:09:24.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 800, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [
                {
                    "slug": "binary-search", 
                    "title": "Binary Search"
                }
            ], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:47:17.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 3470, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 70, 
            "is_solution_unlocked": false, 
            "preview": "Execute Q queries on an array of N integers.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 70, 
            "slug": "playing-with-numbers", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Absolute Element Sums", 
            "level": 69, 
            "success_ratio": 0.24345709068776628, 
            "total_count": 3286, 
            "created_at": "2014-08-02T17:06:23.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 16, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-05-30T08:25:23.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 28479, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "{\"custom_checker_head\":\"\\n# Start of HEAD\\nimport json\\nimport string\\nimport sys\\n# End of HEAD\\n        \",\"custom_checker_body\":\"\\nimport math\\nimport decimal\\n\\ndecimal.getcontext().prec = 34; # ~__float128\\n\\ndef isPerfectSquare(n):\\n\\tr = int(math.sqrt(n))\\n\\treturn r * r == n\\n\\t\\npointToDistance = {}\\nfor x in range(-12, 12 + 1):\\n\\tfor y in range(-12, 12 + 1):\\n\\t\\tif not isPerfectSquare(x * x + y * y):\\n\\t\\t\\tpointToDistance[str(x) + \\\" \\\" + str(y)] = decimal.Decimal(x * x + y * y).sqrt()\\n\\n# Start of BODY\\n'''\\nTestStruct::\\ntestcase_id                   [int] ID of the test-case\\ntestcase_input_path           [str] File path to test-case input\\ntestcase_output_path          [str] File path to test-case output generated by the problem solver\\ntestcase_expected_output_path [str] File path to test-case expected output to be matched with\\nmetadata_file_paths           [list<str>] File paths to Question metadata (Extra files usually used for defining traning sets)\\nsubmission_code_path          [str] File path to submission source code\\ntestcase_result               [bool] Set to True if test-case output matches test-case expected output. Matching is done line by line\\ntestcase_signal               [int] Exit code of the test-case process\\ntestcase_time                 [float] Time taken by the test-case process in seconds\\ntestcase_memory               [int] Peak memory of the test-case process determined in bytes\\ndata                          [str] <Future use>\\nResultStruct::\\nresult      [bool]  Assign test-case result. True determines success. False determines failure\\nscore       [float] Assign test-case score. Normalized between 0 to 1\\nmessage     [str] Assign test-case message. This message is visible to the problem solver\\n'''\\n\\n\\ndef run_custom_checker(t_obj, r_obj):\\n\\t# Don't print anything to STDOUT in this function\\n\\t# Enter your custom checker scoring logic here\\n\\ttry:\\n\\t\\tinput = open(t_obj.testcase_input_path).read().splitlines()\\n\\t\\tif len(input) != 1:\\n\\t\\t\\tr_obj.result = False\\n\\t\\t\\tr_obj.score = 0.0\\n\\t\\t\\tr_obj.message = \\\"Internal error: not 1 line in input file\\\"\\n\\t\\t\\treturn\\n\\t\\tused = set()\\n\\t\\tsum = 0\\n\\t\\tfor line in input:\\n\\t\\t\\tif line not in pointToDistance:\\n\\t\\t\\t\\tr_obj.result = False\\n\\t\\t\\t\\tr_obj.score = 0.0\\n\\t\\t\\t\\tr_obj.message = \\\"Internal error: invalid line in input\\\"\\n\\t\\t\\t\\treturn\\n\\t\\t\\tsum += pointToDistance[line]\\n\\t\\t\\tused.add(line)\\n\\t\\toutput = open(t_obj.testcase_output_path).read().splitlines()\\n\\t\\twa = \\\"Wrong Answer\\\"\\n\\t\\tif len(output) != 11:\\n\\t\\t\\tr_obj.result = False\\n\\t\\t\\tr_obj.score = 0.0\\n\\t\\t\\tr_obj.message = wa # not 11 lines in output\\n\\t\\t\\treturn\\n\\t\\tfor line in output:\\n\\t\\t\\tif line not in pointToDistance:\\n\\t\\t\\t\\tr_obj.result = False\\n\\t\\t\\t\\tr_obj.score = 0.0\\n\\t\\t\\t\\tr_obj.message = wa # not 11 lines in output\\n\\t\\t\\t\\treturn\\n\\t\\t\\tsum += pointToDistance[line]\\n\\t\\t\\tused.add(line)\\n\\t\\tif len(used) != 12:\\n\\t\\t\\tr_obj.result = False\\n\\t\\t\\tr_obj.score = 0.0\\n\\t\\t\\tr_obj.message = wa # duplicate entries\\n\\t\\t\\treturn\\n\\t\\tif abs(sum - round(sum)) > 1e-12:\\n\\t\\t\\tr_obj.result = False\\n\\t\\t\\tr_obj.score = 0.0\\n\\t\\t\\tr_obj.message = wa # not within 1e-12 of an integer\\n\\t\\t\\treturn\\n    \\n\\t\\tr_obj.result = True;\\n\\t\\tr_obj.score = 1.0;\\n\\t\\tr_obj.message = \\\"Success\\\";\\n\\texcept:\\n\\t\\tr_obj.result = False;\\n\\t\\tr_obj.score = 0.0;\\n\\t\\tr_obj.message = \\\"Internal error: an exception in checker\\\";\\n\\n# End of BODY\\n        \",\"custom_checker_tail\":\"\\n# Start of TAIL\\nclass TestStruct:\\n    def __init__(self):\\n        self.testcase_id = 0\\n        self.testcase_input_path = \\\"\\\"\\n        self.testcase_output_path = \\\"\\\"\\n        self.testcase_expected_output_path = \\\"\\\"\\n        self.metadata_file_paths = []\\n        self.submission_code_path = \\\"\\\"\\n        self.testcase_result = False\\n        self.testcase_signal = 0\\n        self.testcase_time = 0.0\\n        self.testcase_memory = 0\\n        self.data = \\\"\\\"\\n\\n\\nclass ResultStruct:\\n    def __init__(self):\\n        self.result = False\\n        self.score = 0.0\\n        self.message = \\\"\\\"\\n\\n\\ndef read_input_json(json_file_path, t_obj):\\n    file_obj = open(json_file_path, \\\"r\\\")\\n    json_file_contents = file_obj.read()\\n\\n    root = {}\\n    try:\\n        root = json.loads(json_file_contents)\\n    except ValueError:\\n        return 1\\n\\n    try:\\n        # Read values\\n        t_obj.testcase_id = root[\\\"testcase_id\\\"]\\n        t_obj.testcase_input_path = root[\\\"input_file_path\\\"]\\n        t_obj.testcase_output_path = root[\\\"output_file_path\\\"]\\n        t_obj.testcase_expected_output_path = root[\\\"expected_output_file_path\\\"]\\n        t_obj.metadata_file_paths = root[\\\"metadata_file_paths\\\"]\\n        t_obj.submission_code_path = root[\\\"submission_code_path\\\"]\\n        t_obj.testcase_result = root[\\\"testcase_result\\\"]\\n        t_obj.testcase_signal = root[\\\"testcase_signal\\\"]\\n        t_obj.testcase_time = root[\\\"testcase_time\\\"]\\n        t_obj.testcase_memory = root[\\\"testcase_memory\\\"]\\n        t_obj.data = root[\\\"data\\\"]\\n    except KeyError:\\n        return 1\\n\\n    return 0\\n\\n\\ndef write_result_json(r_obj):\\n    root = {\\n        \\\"custom_result\\\" : int(r_obj.result),\\n        \\\"custom_score\\\"  : max((r_obj.score if (r_obj.score <= 1.0) else 1.0), 0),\\n        \\\"custom_message\\\": r_obj.message if (len(r_obj.message) <= 4096) else r_obj.message[0:4095]\\n    }\\n\\n    print(json.dumps(root))\\n\\n\\nif __name__ ==  \\\"__main__\\\":\\n    # Input parameters\\n    t_obj = TestStruct()\\n    # Result parameters\\n    r_obj = ResultStruct()\\n\\n    if len(sys.argv) < 2:\\n        write_result_json(r_obj)\\n        sys.exit(1)\\n\\n    # Decode input JSON\\n    failure = read_input_json(sys.argv[1], t_obj)\\n    # Incase input JSON was malformed or not existent\\n    if failure != 0:\\n        r_obj.message = \\\"Unable to read input json\\\";\\n        write_result_json(r_obj)\\n        sys.exit(2)\\n\\n    #Run the custom checker evaluator\\n    run_custom_checker(t_obj, r_obj)\\n\\n    # Encode result JSON\\n    write_result_json(r_obj)\\n    sys.exit(0)\\n# End of TAIL\\n        \"}", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Finish building a rock garden so that the sum of distances from each stone to the origin is an almost integer.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 1.0, 
            "difficulty": 0.1, 
            "active": true, 
            "max_score": 80, 
            "slug": "almost-integer-rock-garden", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Almost Integer Rock Garden", 
            "level": 50, 
            "success_ratio": 0.45714285714285713, 
            "total_count": 35, 
            "created_at": "2016-11-17T11:10:40.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python3"
        }, 
        {
            "onboarding": null, 
            "solved_count": 47, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:53:19.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 22270, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Given an array, perform q queries and find the value in index k.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 80, 
            "slug": "sorted-subsegments", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Sorted Subsegments", 
            "level": 50, 
            "success_ratio": 0.0852994555353902, 
            "total_count": 551, 
            "created_at": "2016-06-16T20:19:44.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 13, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-03-02T12:08:53.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 29995, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Find the minimum distance between the points in each set of pairs and then print the maximum of those distances.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.1, 
            "active": true, 
            "max_score": 80, 
            "slug": "distant-pairs", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Distant Pairs", 
            "level": 50, 
            "success_ratio": 0.2, 
            "total_count": 65, 
            "created_at": "2016-12-19T18:34:45.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 133, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-07-11T15:52:13.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 19174, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Help King Richard find his knights' positions.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Search", 
                "taxonomy": 1, 
                "track_slug": "algorithms", 
                "track_id": 3, 
                "track_name": "Algorithms", 
                "id": 36, 
                "rewards_system_enabled": true, 
                "slug": "search"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 80, 
            "slug": "king-richards-knights", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "King Richard's Knights", 
            "level": 50, 
            "success_ratio": 0.3036529680365297, 
            "total_count": 438, 
            "created_at": "2016-03-15T02:49:13.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }
    ], 
    "tutorial_signed_up": true, 
    "current_track": {
        "name": "Algorithms", 
        "id": 3, 
        "priority": 14, 
        "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
        "rewards_system_enabled": true, 
        "slug": "algorithms"
    }, 
    "total": 25
}
{
    "status": true, 
    "model": {
        "tagAncestry": [], 
        "solved_count": 2301, 
        "can_solve": true, 
        "dynamic": true, 
        "epoch_starttime": null, 
        "difficulty_name": "Expert", 
        "compile_and_test": true, 
        "submit_disabled": null, 
        "company_id": null, 
        "languages": [
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "whitespace", 
            "sbcl", 
            "java8", 
            "octave", 
            "racket", 
            "rust", 
            "bash", 
            "r", 
            "swift", 
            "fortran", 
            "cpp14", 
            "coffeescript", 
            "ada", 
            "pypy", 
            "pypy3", 
            "elixir", 
            "kotlin", 
            "julia"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": null, 
        "factor": 100, 
        "default_language": null, 
        "leaderboard_out_of_sync": null, 
        "contest_slug": "master", 
        "python3_template": "#!/usr/bin/py\n# Head ends here\ndef stringSimilarity(a):\n    answer = 0\n    return answer\n# Tail starts here\nif __name__ == '__main__':\n    t = int(input())\n    for i in range(0,t):\n        a=input()\n        print(stringSimilarity(a))\n", 
        "name": "String Similarity", 
        "level": 81, 
        "success_ratio": 0.18743890518084066, 
        "total_count": 12276, 
        "moderator_or_support": false, 
        "codechecker_handle": "", 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "is_skip_band_challenge": false, 
        "public_test_cases": true, 
        "available_translations": [], 
        "cpp_template": "\n\nlong long int stringSimilarity(char a[]) {\n\n   return 0;\n}\n", 
        "c_template_tail": "int main() {\n    int t, i;\n    long long int res;\n    scanf(\"%d\",&t);\n    char a[100001];\n    for (i=0;i<t;i++) {\n        scanf(\"%s\",a);\n        res=stringSimilarity(a);\n        printf(\"%lld\\n\",res);  \n    }\n\n    return 0;\n}", 
        "cpp_template_tail": "int main() {\n    int t, i;\n    scanf(\"%d\",&t);\n    char a[100001];\n    for (i=0;i<t;i++) {\n        scanf(\"%s\",a);\n        long long int res=stringSimilarity(a);\n        printf(\"%lld\\n\",res);  \n    }\n    \n    /* Enter your code here. Read input from STDIN. Print output to STDOUT */    \n    return 0;\n}", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "php_template": "<?php\n/* Head ends here */\nfunction stringSimilarity( $a) {\n\n    return 0;\n}\n/* Tail starts here */\n$__fp = fopen(\"php://stdin\", \"r\");\n\nfscanf($__fp, \"%d\", $_t_cases);\nfor ($_t_i=0; $_t_i<$_t_cases; $_t_i++) {\n    $_a = fgets($__fp);\n    $res = stringSimilarity($_a);\n    echo \"$res\\n\";\n}\n?>", 
        "perl_template": "#!/usr/bin/perl\n# Head ends here\n\nsub stringSimilarity{\n    my($a)=@_;\n    return 0; \n}\n\n# Tail starts here\n$_t_cases = <>;\nfor ($_t_i = 0; $_t_i < $_t_cases; $_t_i++) {\n    $_a=<>;     \n    $res = &stringSimilarity($_a);    \n    print \"$res\\n\";\n}", 
        "can_be_viewed": true, 
        "submitted_hackers_count": 12276, 
        "public_solutions": true, 
        "c_template_head": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n/* Head ends here */", 
        "deleted": false, 
        "real_dynamic": false, 
        "difficulty_score": "0.89", 
        "difficulty": 0.10712011208763215, 
        "active": true, 
        "slug": "string-similarity", 
        "show_skeliton": null, 
        "player_count": 2, 
        "is_preview_contest": false, 
        "is_editorial_available": true, 
        "epoch_endtime": null, 
        "cpp_template_head": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <ctime>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cstdio>\n#include <limits>\n#include <vector>\n#include <cstdlib>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n/* Head ends here */\n", 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png", 
        "judgebot_language": null, 
        "requirements_description": null, 
        "java_template": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n    /* Head ends here */\n    static long stringSimilarity(String a) {\n\n\n        return 0;\n    }\n    /* Tail starts here */\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        long res;\n\n        int _t_cases = Integer.parseInt(in.nextLine());\n        for (int _t_i = 0; _t_i<_t_cases; _t_i++) {\n            String _a = in.nextLine();\n            res = stringSimilarity(_a);\n            System.out.println(res);\n        }\n    }\n}", 
        "python_template": "#!/usr/bin/py\n# Head ends here\ndef stringSimilarity(a):\n    answer = 0\n    return answer\n# Tail starts here\nif __name__ == '__main__':\n    t = input()\n    for i in range(0,t):\n        a=raw_input()\n        print stringSimilarity(a)", 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "kind": "code", 
        "is_custom": false, 
        "ruby_template": "#!/bin/ruby\n# Head ends here\ndef  stringSimilarity(a) \n\n\nend\n# Tail starts here\n\nnum= gets.strip.to_i\nwhile num>0 do\n    a=gets.strip\n\tputs stringSimilarity(a)\n\tnum-=1\nend", 
        "haskell_template": "-- Enter your code here. Read input from STDIN. Print output to STDOUT\nsimilarity xs ys = ???????????????????\n--Replace the question marks with the desired code.\n\nsuffixes \"\" = []\nsuffixes xs = [xs] ++ suffixes (tail xs) \nsimilarities xs = sum[similarity x1 y1 \n                         | (x1, y1) <- [(x,y) | x <- [xs], y <- suffixes xs]]", 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "custom": null, 
        "preview": "Calculate the sum of similarities of a string S with each of it's suffixes.", 
        "company": null, 
        "is_text": false, 
        "require_unlock": true, 
        "csharp_template": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    /* Head ends here */\n    static int stringSimilarity (string a) {\n\n        return 0;\n    }\n    /* Tail starts here */\n    static void Main(String[] args) {\n        int res;\n        int _t_cases = Convert.ToInt32(Console.ReadLine());\n        for (int _t_i=0; _t_i<_t_cases; _t_i++) {\n            String _a = Console.ReadLine();\n            res=stringSimilarity(_a);\n            Console.WriteLine(res);\n        }\n    }\n}", 
        "has_started": true, 
        "judgebot": null, 
        "custom_checker_language": null, 
        "custom_case": true, 
        "topics": [
            {
                "slug": "suffix-array", 
                "title": "Suffix Array"
            }, 
            {
                "slug": "z-function", 
                "title": "Z Function"
            }, 
            {
                "slug": "lcp-array", 
                "title": "LCP Array"
            }
        ], 
        "updated_at": "2017-07-11T15:41:19.000Z", 
        "author_name": "HackerRank", 
        "onboarding": null, 
        "id": 63, 
        "has_ended": false, 
        "c_template": "\nlong long int stringSimilarity(char a[]) {\n\n    return 0;\n}\n\n", 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "status": null, 
        "category": "algorithm", 
        "track": {
            "name": "Strings", 
            "taxonomy": 1, 
            "track_slug": "algorithms", 
            "track_id": 3, 
            "track_name": "Algorithms", 
            "id": 34, 
            "rewards_system_enabled": true, 
            "slug": "strings"
        }, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>For two strings A and B, we define the similarity of the strings to be the length of the longest prefix common to both strings. For example, the similarity of strings \"abc\" and \"abd\" is 2, while the similarity of strings \"aaa\" and \"aaab\" is 3.</p>\n\n<p>Calculate the sum of similarities of a string S with each of it's suffixes.</p></div></div></div><div class='challenge_input_format'><div class='msB challenge_input_format_title'><p><strong>Input Format</strong></p></div><div class='msB challenge_input_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>The first line contains the number of test cases <em>T</em>. Each of the next <em>T</em> lines contains a string each.</p></div></div></div><div class='challenge_constraints'><div class='msB challenge_constraints_title'><p><strong>Constraints</strong></p></div><div class='msB challenge_constraints_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>1 &lt;= <em>T</em> &lt;= 10 <br>\nThe length of each string is at most 100000 and contains only lower case characters.</p></div></div></div><div class='challenge_output_format'><div class='msB challenge_output_format_title'><p><strong>Output Format</strong></p></div><div class='msB challenge_output_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Output <em>T</em> lines containing the answer for the corresponding test case.</p></div></div></div><div class='challenge_sample_input'><div class='msB challenge_sample_input_title'><p><strong>Sample Input</strong></p></div><div class='msB challenge_sample_input_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>2\nababaa  \naa\n</code></pre></div></div></div><div class='challenge_sample_output'><div class='msB challenge_sample_output_title'><p><strong>Sample Output</strong></p></div><div class='msB challenge_sample_output_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>11  \n3\n</code></pre></div></div></div><div class='challenge_explanation'><div class='msB challenge_explanation_title'><p><strong>Explanation</strong></p></div><div class='msB challenge_explanation_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>For the first case, the suffixes of the string are \"ababaa\", \"babaa\", \"abaa\", \"baa\", \"aa\" and \"a\". The similarities of these strings with the string \"ababaa\" are 6,0,3,0,1, &amp; 1 respectively. Thus, the answer is 6 + 0 + 3 + 0 + 1 + 1 = 11.</p>\n\n<p>For the second case, the answer is 2 + 1 = 3.</p></div></div></div>", 
        "max_score": 100, 
        "user_score": 0, 
        "created_at": "2013-01-04T20:26:11.000Z", 
        "countdown_time": 0
    }
}
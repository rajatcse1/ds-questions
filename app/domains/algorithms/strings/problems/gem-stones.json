{
    "status": true, 
    "model": {
        "tagAncestry": [], 
        "solved_count": 55327, 
        "python_template_head": "", 
        "can_solve": true, 
        "clojure_template_head": "", 
        "dynamic": true, 
        "epoch_starttime": null, 
        "difficulty_name": "Easy", 
        "compile_and_test": true, 
        "submit_disabled": false, 
        "objectivec_template_head": "", 
        "company_id": null, 
        "languages": [
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "whitespace", 
            "sbcl", 
            "java8", 
            "octave", 
            "racket", 
            "rust", 
            "bash", 
            "r", 
            "swift", 
            "fortran", 
            "cpp14", 
            "coffeescript", 
            "ada", 
            "pypy", 
            "pypy3", 
            "elixir", 
            "kotlin", 
            "julia"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-05-06T21:52:01.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1398529800, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 840, 
            "primary_track_id": 3, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": true, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "5 challenges in 2 hours", 
            "effective_epoch_endtime": 1398537000, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Algorithms", 
                "id": 3, 
                "priority": 14, 
                "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
                "rewards_system_enabled": true, 
                "slug": "algorithms"
            }, 
            "primary_tag_id": 3081, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -104817405.37459059, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "101 Hack contest is back with its April edition! It's all about speed, accuracy and efficiency. Inside the contest are 5 challenges. You have exactly 120 minutes to solve them. Every second counts. \n\nHackerRank invites you to join the contest to compete against hackers from across the globe. ", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -104817405.36746122, 
            "challenges_count": 5, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2014-04-26T18:30:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "101apr14", 
            "hide_leaderboard": null, 
            "kind": null, 
            "comment_live_sync": null, 
            "name": "101 Hack April", 
            "is_multi_round": false, 
            "created_at": "2014-04-15T03:51:15.000Z", 
            "epoch_endtime": 1398537000, 
            "company_associated_contest": null, 
            "rating_category": "101 Hack", 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-04-26T16:30:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 144
        }, 
        "factor": 20, 
        "erlang_template_head": "", 
        "ruby_template_tail": "", 
        "default_language": null, 
        "moderator_or_support": false, 
        "leaderboard_out_of_sync": null, 
        "contest_slug": "master", 
        "python3_template": "#!/bin/python3\n\nimport sys\n\ndef gemstones(arr):\n    # Complete this function\n\nn = int(input().strip())\narr = []\narr_i = 0\nfor arr_i in range(n):\n\tarr_t = str(input().strip())\n\tarr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n", 
        "name": "Gemstones", 
        "level": 12, 
        "success_ratio": 0.926595210182549, 
        "total_count": 59710, 
        "javascript_template_head": "", 
        "codechecker_handle": null, 
        "java_template_tail": "", 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "ruby_template_head": "", 
        "java8_template_head": "", 
        "is_skip_band_challenge": false, 
        "python_template_tail": "", 
        "public_test_cases": true, 
        "available_translations": [
            {
                "body": "Juninho descobriu v\u00e1rias rochas. Cada rocha \u00e9 composta por v\u00e1rios elementos, e cada elemento \u00e9 representado por uma letra min\u00fascula latina de 'a' a 'z'. Um elemento pode estar presente diversas vezes em uma rocha. Um elemento \u00e9 chamado de \"elemento-gema\" se ocorrer pelo menos uma vez em cada uma das rochas.\n\nDada a lista de rochas com suas composi\u00e7\u00f5es, voc\u00ea tem que imprimir quantos tipos diferentes de elementos-gema Juninho tem.\n\n**Formato de Entrada**\nA primeira linha \u00e9 constitu\u00edda por **N**, o n\u00famero de rochas.\nCada uma das pr\u00f3ximas **N** linhas cont\u00eam a composi\u00e7\u00e3o da rocha. Cada composi\u00e7\u00e3o \u00e9 constitu\u00edda por letras min\u00fasculas do alfabeto latino.\n\n**Formato de sa\u00edda**\nImprima o n\u00famero de diferentes tipos de elementos-gema que ele tem.\n\n**Restri\u00e7\u00f5es**\n1 &le; N &le; 100 \nCada composi\u00e7\u00e3o \u00e9 constitu\u00edda apenas por letras min\u00fasculas do alfabeto latino ('a'-'z').\n1 &le; Comprimento de cada composi\u00e7\u00e3o &le; 100\n\n**Exemplo de Entrada** \n\n\u00a0\u00a0\u00a0\u00a0 3 \n\u00a0\u00a0\u00a0\u00a0 abcdde \n\u00a0\u00a0\u00a0\u00a0 baccd \n\u00a0\u00a0\u00a0\u00a0 eeabg \n\n**Exemplo de Sa\u00edda** \n\n\u00a0\u00a0\u00a0\u00a0 2 \n\n**Explica\u00e7\u00e3o**\nApenas \"a\", \"b\" s\u00e3o considerados elementos-gema, pois apenas eles est\u00e3o presentes na composi\u00e7\u00e3o de todas as rochas.", 
                "problem_statement_fields": {
                    "sample_output": " ", 
                    "problem_statement": "Juninho descobriu v\u00e1rias rochas. Cada rocha \u00e9 composta por v\u00e1rios elementos, e cada elemento \u00e9 representado por uma letra min\u00fascula latina de 'a' a 'z'. Um elemento pode estar presente diversas vezes em uma rocha. Um elemento \u00e9 chamado de \"elemento-gema\" se ocorrer pelo menos uma vez em cada uma das rochas.\n\nDada a lista de rochas com suas composi\u00e7\u00f5es, voc\u00ea tem que imprimir quantos tipos diferentes de elementos-gema Juninho tem.\n\n**Formato de Entrada**\nA primeira linha \u00e9 constitu\u00edda por **N**, o n\u00famero de rochas.\nCada uma das pr\u00f3ximas **N** linhas cont\u00eam a composi\u00e7\u00e3o da rocha. Cada composi\u00e7\u00e3o \u00e9 constitu\u00edda por letras min\u00fasculas do alfabeto latino.\n\n**Formato de sa\u00edda**\nImprima o n\u00famero de diferentes tipos de elementos-gema que ele tem.\n\n**Restri\u00e7\u00f5es**\n1 &le; N &le; 100 \nCada composi\u00e7\u00e3o \u00e9 constitu\u00edda apenas por letras min\u00fasculas do alfabeto latino ('a'-'z').\n1 &le; Comprimento de cada composi\u00e7\u00e3o &le; 100\n\n**Exemplo de Entrada** \n\n\u00a0\u00a0\u00a0\u00a0 3 \n\u00a0\u00a0\u00a0\u00a0 abcdde \n\u00a0\u00a0\u00a0\u00a0 baccd \n\u00a0\u00a0\u00a0\u00a0 eeabg \n\n**Exemplo de Sa\u00edda** \n\n\u00a0\u00a0\u00a0\u00a0 2 \n\n**Explica\u00e7\u00e3o**\nApenas \"a\", \"b\" s\u00e3o considerados elementos-gema, pois apenas eles est\u00e3o presentes na composi\u00e7\u00e3o de todas as rochas.", 
                    "input_format": " ", 
                    "explanation": " ", 
                    "sample_input": " ", 
                    "output_format": " "
                }, 
                "name": "Gem Stones", 
                "language": "Portuguese", 
                "challenge_id": 2223, 
                "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Juninho descobriu v\u00e1rias rochas. Cada rocha \u00e9 composta por v\u00e1rios elementos, e cada elemento \u00e9 representado por uma letra min\u00fascula latina de 'a' a 'z'. Um elemento pode estar presente diversas vezes em uma rocha. Um elemento \u00e9 chamado de \"elemento-gema\" se ocorrer pelo menos uma vez em cada uma das rochas.</p>\n\n<p>Dada a lista de rochas com suas composi\u00e7\u00f5es, voc\u00ea tem que imprimir quantos tipos diferentes de elementos-gema Juninho tem.</p>\n\n<p><strong>Formato de Entrada</strong>\nA primeira linha \u00e9 constitu\u00edda por <strong>N</strong>, o n\u00famero de rochas.\nCada uma das pr\u00f3ximas <strong>N</strong> linhas cont\u00eam a composi\u00e7\u00e3o da rocha. Cada composi\u00e7\u00e3o \u00e9 constitu\u00edda por letras min\u00fasculas do alfabeto latino.</p>\n\n<p><strong>Formato de sa\u00edda</strong>\nImprima o n\u00famero de diferentes tipos de elementos-gema que ele tem.</p>\n\n<p><strong>Restri\u00e7\u00f5es</strong>\n1 \u2264 N \u2264 100 \nCada composi\u00e7\u00e3o \u00e9 constitu\u00edda apenas por letras min\u00fasculas do alfabeto latino ('a'-'z').\n1 \u2264 Comprimento de cada composi\u00e7\u00e3o \u2264 100</p>\n\n<p><strong>Exemplo de Entrada</strong> </p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp; 3 \n&nbsp;&nbsp;&nbsp;&nbsp; abcdde \n&nbsp;&nbsp;&nbsp;&nbsp; baccd \n&nbsp;&nbsp;&nbsp;&nbsp; eeabg </p>\n\n<p><strong>Exemplo de Sa\u00edda</strong> </p>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp; 2 </p>\n\n<p><strong>Explica\u00e7\u00e3o</strong>\nApenas \"a\", \"b\" s\u00e3o considerados elementos-gema, pois apenas eles est\u00e3o presentes na composi\u00e7\u00e3o de todas as rochas.</p></div></div>", 
                "preview": null
            }, 
            {
                "body": "John \u53d1\u73b0\u4e86\u5f88\u591a\u79cd\u5ca9\u77f3\u3002\u6bcf\u79cd\u5ca9\u77f3\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u6210\u5206:\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002\u5b9d\u77f3\u662f\u7531\u4e00\u4e2a\u5355\u4e00\u7684\u5b57\u7b26\u7ec4\u6210,\u5e76\u4e14\u5c06\u5728\u6240\u6709\u5ca9\u77f3\u4e2d\u51fa\u73b0\u3002 \n\n\u7ed9\u51fa\u4e00\u4e9b\u5ca9\u77f3\u7684\u6210\u5206,\u8f93\u51fa\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3\u5b58\u5728\u3002 \n\n**\u8f93\u5165\u683c\u5f0f**  \n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 N, \u4ee3\u8868\u5ca9\u77f3\u7684\u4e2a\u6570  \n\u63a5\u4e0b\u6765\u7684N\u884c,\u6bcf\u884c\u5305\u542b\u5ca9\u77f3\u7684\u6784\u6210,\u7531\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002 \n\n**\u8f93\u51fa\u683c\u5f0f**  \n\u8f93\u51fa\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3  \n\n**\u6570\u636e\u8303\u56f4**  \n1 \u2264 N \u2264 100  \n1 \u2264 \u4ee3\u8868\u5ca9\u77f3\u7ec4\u6210\u7684\u82f1\u6587\u5355\u8bcd\u957f\u5ea6 \u2264 100  \n\n**\u6837\u4f8b\u8f93\u5165**  \n\n    3\n    abcdde\n    baccd\n    eeabg\n\n**\u6837\u4f8b\u8f93\u51fa**  \n\n\t2\n\n**\u6837\u4f8b\u89e3\u91ca**  \n\u53ea\u6709\"a\", \"b\"\u4e24\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3,\u56e0\u4e3a\u5b83\u4eec\u5305\u542b\u5728\u6bcf\u79cd\u5ca9\u77f3\u7684\u6210\u5206\u4e2d\u3002\n\n---\n*Problem Setter:* [Lalit Kundu](/darkshadows)  \n*Problem Tester:* [Shashank](/shashank21j)  \n*Problem Translator:* [Wan Bo](/wanbo)  ", 
                "problem_statement_fields": {
                    "sample_output": " ", 
                    "problem_statement": "John \u53d1\u73b0\u4e86\u5f88\u591a\u79cd\u5ca9\u77f3\u3002\u6bcf\u79cd\u5ca9\u77f3\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u6210\u5206:\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002\u5b9d\u77f3\u662f\u7531\u4e00\u4e2a\u5355\u4e00\u7684\u5b57\u7b26\u7ec4\u6210,\u5e76\u4e14\u5c06\u5728\u6240\u6709\u5ca9\u77f3\u4e2d\u51fa\u73b0\u3002 \n\n\u7ed9\u51fa\u4e00\u4e9b\u5ca9\u77f3\u7684\u6210\u5206,\u8f93\u51fa\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3\u5b58\u5728\u3002 \n\n**\u8f93\u5165\u683c\u5f0f**  \n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 N, \u4ee3\u8868\u5ca9\u77f3\u7684\u4e2a\u6570  \n\u63a5\u4e0b\u6765\u7684N\u884c,\u6bcf\u884c\u5305\u542b\u5ca9\u77f3\u7684\u6784\u6210,\u7531\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002 \n\n**\u8f93\u51fa\u683c\u5f0f**  \n\u8f93\u51fa\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3  \n\n**\u6570\u636e\u8303\u56f4**  \n1 \u2264 N \u2264 100  \n1 \u2264 \u4ee3\u8868\u5ca9\u77f3\u7ec4\u6210\u7684\u82f1\u6587\u5355\u8bcd\u957f\u5ea6 \u2264 100  \n\n**\u6837\u4f8b\u8f93\u5165**  \n\n    3\n    abcdde\n    baccd\n    eeabg\n\n**\u6837\u4f8b\u8f93\u51fa**  \n\n\t2\n\n**\u6837\u4f8b\u89e3\u91ca**  \n\u53ea\u6709\"a\", \"b\"\u4e24\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3,\u56e0\u4e3a\u5b83\u4eec\u5305\u542b\u5728\u6bcf\u79cd\u5ca9\u77f3\u7684\u6210\u5206\u4e2d\u3002\n\n---\n*Problem Setter:* [Lalit Kundu](/darkshadows)  \n*Problem Tester:* [Shashank](/shashank21j)  \n*Problem Translator:* [Wan Bo](/wanbo)  ", 
                    "input_format": " ", 
                    "explanation": " ", 
                    "sample_input": " ", 
                    "output_format": " "
                }, 
                "name": "Gem Stones", 
                "language": "Chinese", 
                "challenge_id": 2223, 
                "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>John \u53d1\u73b0\u4e86\u5f88\u591a\u79cd\u5ca9\u77f3\u3002\u6bcf\u79cd\u5ca9\u77f3\u90fd\u6709\u4e00\u4e2a\u72ec\u4e00\u65e0\u4e8c\u6210\u5206:\u7531\u5c0f\u5199\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002\u5b9d\u77f3\u662f\u7531\u4e00\u4e2a\u5355\u4e00\u7684\u5b57\u7b26\u7ec4\u6210,\u5e76\u4e14\u5c06\u5728\u6240\u6709\u5ca9\u77f3\u4e2d\u51fa\u73b0\u3002 </p>\n\n<p>\u7ed9\u51fa\u4e00\u4e9b\u5ca9\u77f3\u7684\u6210\u5206,\u8f93\u51fa\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3\u5b58\u5728\u3002 </p>\n\n<p><strong>\u8f93\u5165\u683c\u5f0f</strong> <br>\n\u7b2c\u4e00\u884c\u5305\u542b\u4e00\u4e2a\u6574\u6570 N, \u4ee3\u8868\u5ca9\u77f3\u7684\u4e2a\u6570 <br>\n\u63a5\u4e0b\u6765\u7684N\u884c,\u6bcf\u884c\u5305\u542b\u5ca9\u77f3\u7684\u6784\u6210,\u7531\u5c0f\u5199\u7684\u82f1\u6587\u5b57\u6bcd\u7ec4\u6210\u3002 </p>\n\n<p><strong>\u8f93\u51fa\u683c\u5f0f</strong> <br>\n\u8f93\u51fa\u6709\u591a\u5c11\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3  </p>\n\n<p><strong>\u6570\u636e\u8303\u56f4</strong> <br>\n1 \u2264 N \u2264 100 <br>\n1 \u2264 \u4ee3\u8868\u5ca9\u77f3\u7ec4\u6210\u7684\u82f1\u6587\u5355\u8bcd\u957f\u5ea6 \u2264 100  </p>\n\n<p><strong>\u6837\u4f8b\u8f93\u5165</strong>  </p>\n\n<pre><code>3\nabcdde\nbaccd\neeabg\n</code></pre>\n\n<p><strong>\u6837\u4f8b\u8f93\u51fa</strong>  </p>\n\n<pre><code>2\n</code></pre>\n\n<p><strong>\u6837\u4f8b\u89e3\u91ca</strong> <br>\n\u53ea\u6709\"a\", \"b\"\u4e24\u79cd\u4e0d\u540c\u7684\u5b9d\u77f3,\u56e0\u4e3a\u5b83\u4eec\u5305\u542b\u5728\u6bcf\u79cd\u5ca9\u77f3\u7684\u6210\u5206\u4e2d\u3002</p>\n\n<hr>\n\n<p><em>Problem Setter:</em> <a href=\"/darkshadows\">Lalit Kundu</a> <br>\n<em>Problem Tester:</em> <a href=\"/shashank21j\">Shashank</a> <br>\n<em>Problem Translator:</em> <a href=\"/wanbo\">Wan Bo</a>  </p></div></div>", 
                "preview": null
            }, 
            {
                "body": "\u0414\u0436\u043e\u043d \u043d\u0430\u0448\u0435\u043b \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u0430\u043c\u043d\u0435\u0439. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u043c\u0435\u043d\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438: \u043e\u0442 'a' \u0434\u043e 'z'. \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0432\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0441\u043e\u0441\u0442\u0430\u0432 \u043a\u0430\u043c\u043d\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437. \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \"\u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u043c\", \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u0445\u043e\u0434\u0438\u0442 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0430\u043c\u043d\u044f.  \n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0441\u0442\u0430\u0432\u043e\u0432 $N$ \u043a\u0430\u043c\u043d\u0435\u0439. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \"\u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u044d\u0442\u0438\u0445 \u043a\u0430\u043c\u043d\u044f\u0445.\n\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430**  \n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $N$ $-$ \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043c\u043d\u0435\u0439. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $N$ \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u044b \u043a\u0430\u043c\u043d\u0435\u0439, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438.  \n\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430**  \n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \"\u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u044d\u0442\u0438\u0445 \u043a\u0430\u043c\u043d\u044f\u0445.  \n\n**\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f**  \n$1 \u2264 N \u2264 100$  \n$1 \u2264 \\text{\u0434\u043b\u0438\u043d\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u0430} \u2264 100$  \n\n**\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u0432\u043e\u0434**  \n\n    3\n    abcdde\n    baccd\n    eeabg\n\n**\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u044b\u0432\u043e\u0434**  \n\n\t2\n    \n**\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435**  \n\u0422\u043e\u043b\u044c\u043a\u043e \"a\" \u0438 \"b\" $-$ \u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0435, \u0442.\u043a. \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0430\u043c\u043d\u044f.  \n\n---\n*Problem Setter:* [Lalit Kundu](/darkshadows)  \n*Problem Tester:* [Shashank](/shashank21j)  \n*Problem Translator:* [Darya Prokurat](/darida)", 
                "problem_statement_fields": {
                    "sample_output": " ", 
                    "problem_statement": "\u0414\u0436\u043e\u043d \u043d\u0430\u0448\u0435\u043b \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u0430\u043c\u043d\u0435\u0439. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u043c\u0435\u043d\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438: \u043e\u0442 'a' \u0434\u043e 'z'. \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0432\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0441\u043e\u0441\u0442\u0430\u0432 \u043a\u0430\u043c\u043d\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437. \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \"\u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u043c\", \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u0445\u043e\u0434\u0438\u0442 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0430\u043c\u043d\u044f.  \n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0441\u0442\u0430\u0432\u043e\u0432 $N$ \u043a\u0430\u043c\u043d\u0435\u0439. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \"\u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u044d\u0442\u0438\u0445 \u043a\u0430\u043c\u043d\u044f\u0445.\n\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430**  \n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e $N$ $-$ \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043c\u043d\u0435\u0439. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 $N$ \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u044b \u043a\u0430\u043c\u043d\u0435\u0439, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438.  \n\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430**  \n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \"\u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u044d\u0442\u0438\u0445 \u043a\u0430\u043c\u043d\u044f\u0445.  \n\n**\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f**  \n$1 \u2264 N \u2264 100$  \n$1 \u2264 \\text{\u0434\u043b\u0438\u043d\u0430 \u0441\u043e\u0441\u0442\u0430\u0432\u0430} \u2264 100$  \n\n**\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u0432\u043e\u0434**  \n\n    3\n    abcdde\n    baccd\n    eeabg\n\n**\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u044b\u0432\u043e\u0434**  \n\n\t2\n    \n**\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435**  \n\u0422\u043e\u043b\u044c\u043a\u043e \"a\" \u0438 \"b\" $-$ \u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0435, \u0442.\u043a. \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0430\u043c\u043d\u044f.  \n\n---\n*Problem Setter:* [Lalit Kundu](/darkshadows)  \n*Problem Tester:* [Shashank](/shashank21j)  \n*Problem Translator:* [Darya Prokurat](/darida)", 
                    "input_format": " ", 
                    "explanation": " ", 
                    "sample_input": " ", 
                    "output_format": " "
                }, 
                "name": "Gem Stones", 
                "language": "Russian", 
                "challenge_id": 2223, 
                "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>\u0414\u0436\u043e\u043d \u043d\u0430\u0448\u0435\u043b \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u043a\u0430\u043c\u043d\u0435\u0439. \u041a\u0430\u0436\u0434\u044b\u0439 \u043a\u0430\u043c\u0435\u043d\u044c \u0441\u043e\u0441\u0442\u043e\u0438\u0442 \u0438\u0437 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0445 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u043b\u0430\u0442\u0438\u043d\u0441\u043a\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438: \u043e\u0442 'a' \u0434\u043e 'z'. \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u043c\u043e\u0436\u0435\u0442 \u0432\u0445\u043e\u0434\u0438\u0442\u044c \u0432 \u0441\u043e\u0441\u0442\u0430\u0432 \u043a\u0430\u043c\u043d\u044f \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0440\u0430\u0437. \u042d\u043b\u0435\u043c\u0435\u043d\u0442 \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \"\u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u043c\", \u0435\u0441\u043b\u0438 \u043e\u043d \u0432\u0445\u043e\u0434\u0438\u0442 \u0445\u043e\u0442\u044f \u0431\u044b \u043e\u0434\u0438\u043d \u0440\u0430\u0437 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0430\u043c\u043d\u044f. <br>\n\u0414\u0430\u043d \u0441\u043f\u0438\u0441\u043e\u043a \u0441\u043e\u0441\u0442\u0430\u0432\u043e\u0432 <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span> \u043a\u0430\u043c\u043d\u0435\u0439. \u0422\u0440\u0435\u0431\u0443\u0435\u0442\u0441\u044f \u043d\u0430\u0439\u0442\u0438 \u0447\u0438\u0441\u043b\u043e \"\u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u044d\u0442\u0438\u0445 \u043a\u0430\u043c\u043d\u044f\u0445.</p>\n\n<p><strong>\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430</strong> <br>\n\u0412 \u043f\u0435\u0440\u0432\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u0443\u043a\u0430\u0437\u0430\u043d\u043e \u0447\u0438\u0441\u043b\u043e <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span> <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.808ex\" height=\"1.009ex\" style=\"vertical-align: 0.532ex;\" viewBox=\"0 -360.8 778.5 434.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g></svg></span> \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043a\u0430\u043c\u043d\u0435\u0439. \u0412 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span> \u0441\u0442\u0440\u043e\u043a\u0430\u0445 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u0441\u044f \u0441\u043e\u0441\u0442\u0430\u0432\u044b \u043a\u0430\u043c\u043d\u0435\u0439, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u043d\u044b\u0435 \u043c\u0430\u043b\u0435\u043d\u044c\u043a\u0438\u043c\u0438 \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u0438\u043c\u0438 \u0431\u0443\u043a\u0432\u0430\u043c\u0438.  </p>\n\n<p><strong>\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430</strong> <br>\n\u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \"\u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0445\" \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u0432 \u044d\u0442\u0438\u0445 \u043a\u0430\u043c\u043d\u044f\u0445.  </p>\n\n<p><strong>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f</strong> <br>\n<span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"12.91ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 5558.6 1008.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(1834,0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g transform=\"translate(3000,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(4057,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1001,0)\"></path></g></g></svg></span> <br>\n<span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-6-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"28.427ex\" height=\"3.343ex\" style=\"vertical-align: -1.171ex;\" viewBox=\"0 -934.9 12239.5 1439.2\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(1834,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u0434</text><g transform=\"translate(609,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u043b</text></g><g transform=\"translate(1219,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u0438</text></g><g transform=\"translate(1829,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u043d</text></g><g transform=\"translate(2439,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u0430</text></g><g transform=\"translate(3299,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u0441</text></g><g transform=\"translate(3909,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u043e</text></g><g transform=\"translate(4519,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u0441</text></g><g transform=\"translate(5129,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u0442</text></g><g transform=\"translate(5739,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u0430</text></g><g transform=\"translate(6349,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u0432</text></g><g transform=\"translate(6959,0)\"><text font-family=\"monospace\" stroke=\"none\" transform=\"scale(71.759) matrix(1 0 0 -1 0 0)\">\u0430</text></g></g><g transform=\"translate(9681,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(10738,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1001,0)\"></path></g></g></svg></span>  </p>\n\n<p><strong>\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u0432\u043e\u0434</strong>  </p>\n\n<pre><code>3\nabcdde\nbaccd\neeabg\n</code></pre>\n\n<p><strong>\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u044b\u0432\u043e\u0434</strong>  </p>\n\n<pre><code>2\n</code></pre>\n\n<p><strong>\u041f\u0440\u0438\u043c\u0435\u0447\u0430\u043d\u0438\u0435</strong> <br>\n\u0422\u043e\u043b\u044c\u043a\u043e \"a\" \u0438 \"b\" <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-7-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.808ex\" height=\"1.009ex\" style=\"vertical-align: 0.532ex;\" viewBox=\"0 -360.8 778.5 434.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z\"></path></g></svg></span> \u0434\u0440\u0430\u0433\u043e\u0446\u0435\u043d\u043d\u044b\u0435, \u0442.\u043a. \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u043d\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u0441\u043e\u0441\u0442\u0430\u0432\u0435 \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043a\u0430\u043c\u043d\u044f.  </p>\n\n<hr>\n\n<p><em>Problem Setter:</em> <a href=\"/darkshadows\">Lalit Kundu</a> <br>\n<em>Problem Tester:</em> <a href=\"/shashank21j\">Shashank</a> <br>\n<em>Problem Translator:</em> <a href=\"/darida\">Darya Prokurat</a></p></div></div>", 
                "preview": null
            }
        ], 
        "clojure_template_tail": "", 
        "cpp_template": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint gemstones(vector <string> arr){\n    // Complete this function\n}\n\nint main() {\n    int n;\n    cin >> n;\n    vector<string> arr(n);\n    for(int arr_i = 0; arr_i < n; arr_i++){\n    \tcin >> arr[arr_i];\n    }\n    int result = gemstones(arr);\n    cout << result << endl;\n    return 0;\n}", 
        "c_template_tail": "", 
        "cpp_template_tail": "", 
        "category": "ai", 
        "haskell_template_tail": "", 
        "php_template": "<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction gemstones($arr){\n    // Complete this function\n}\n\nfscanf($handle, \"%i\",$n);\n$arr = array();\nfor($arr_i = 0; $arr_i < $n; $arr_i++){\n\tfscanf($handle,\"%s\",$arr[]);\n}\n$result = gemstones($arr);\necho $result . \"\\n\";\n\n?>", 
        "perl_template": "#!/usr/bin/perl\n\nsub gemstones {\n\t\n}\n\n$n = <STDIN>;\nchomp $n;\n@arr = ();\nwhile(@arr < $n){\n\tmy $arr_temp = <STDIN>;\n\tchomp $arr_temp;\n\tpush @arr,$arr_temp;\n}\n$result = gemstones($arr);\nprint \"$result\\n\";\n\n", 
        "can_be_viewed": true, 
        "submitted_hackers_count": 59710, 
        "public_solutions": true, 
        "javascript_template_tail": "", 
        "c_template_head": "", 
        "deleted": false, 
        "real_dynamic": false, 
        "php_template_tail": "", 
        "difficulty_score": "0.1", 
        "difficulty": 0.8944733990401982, 
        "active": true, 
        "slug": "gem-stones", 
        "show_skeliton": null, 
        "player_count": 2, 
        "is_preview_contest": false, 
        "is_editorial_available": true, 
        "epoch_endtime": null, 
        "cpp_template_head": "", 
        "perl_template_tail": "", 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/bbc82ad9-3904-4f41-8ea5-813675b88ef0/150x150.png", 
        "judgebot_language": null, 
        "php_template_head": "", 
        "java_template": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static int gemstones(String[] arr){\n        // Complete this function\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        String[] arr = new String[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n            arr[arr_i] = in.next();\n        }\n        int result = gemstones(arr);\n        System.out.println(result);\n    }\n}", 
        "python3_template_tail": "", 
        "python_template": "#!/bin/python\n\nimport sys\n\ndef gemstones(arr):\n    # Complete this function\n\nn = int(raw_input().strip())\narr = []\narr_i = 0\nfor arr_i in xrange(n):\n    arr_t = str(raw_input().strip())\n    arr.append(arr_t)\nresult = gemstones(arr)\nprint(result)\n", 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "scala_template": "object Solution {\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var n = sc.nextInt();\n        var arr = new Array[String](n);\n        for(arr_i <- 0 to n-1) {\n        \tarr(arr_i) = sc.next();\n        }\n    }\n}", 
        "lua_template_head": "", 
        "kind": "code", 
        "is_custom": false, 
        "ruby_template": "#!/bin/ruby\n\ndef gemstones(arr)\n    # Complete this function\nend\n\nn = gets.strip.to_i\narr = Array.new(n)\nfor arr_i in (0..n-1)\n    arr[arr_i] = gets.strip\nend\nresult = gemstones(arr)\nputs result;\n", 
        "haskell_template": "import Control.Applicative\nimport Control.Monad\nimport System.IO\n\n\nmain :: IO ()\nmain = do\n    n_temp <- getLine\n    let n = read n_temp :: Int\n    arr <- getMultipleLines n\n\ngetMultipleLines :: Int -> IO [String]\n\ngetMultipleLines n\n    | n <= 0 = return []\n    | otherwise = do          \n        x <- getLine         \n        xs <- getMultipleLines (n-1)    \n        let ret = (x:xs)    \n        return ret          \n\n", 
        "java8_template": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static int gemstones(String[] arr){\n        // Complete this function\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int n = in.nextInt();\n        String[] arr = new String[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n            arr[arr_i] = in.next();\n        }\n        int result = gemstones(arr);\n        System.out.println(result);\n    }\n}", 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "objectivec_template_tail": "", 
        "custom": false, 
        "preview": "Find the number of different gem-elements present. ", 
        "company": null, 
        "is_text": false, 
        "python3_template_head": "", 
        "clojure_template": "(use '[clojure.string :only (split triml)])\n\n(\n        let [\n          n_t (read-line) \n          n (Integer/parseInt n_t) \n        ]\n\n      (\n        let [\n          arr (for [arr_temp (range n)] (read-string (read-line)))\n        ]\n      )\n\n)", 
        "java_template_head": "", 
        "require_unlock": true, 
        "erlang_template_tail": "", 
        "csharp_template": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int gemstones(string[] arr){\n        // Complete this function\n    }\n\n    static void Main(String[] args) {\n        int n = Convert.ToInt32(Console.ReadLine());\n        string[] arr = new string[n];\n        for(int arr_i = 0; arr_i < n; arr_i++){\n        \tarr[arr_i] = Console.ReadLine();\t\n        }\n        int result = gemstones(arr);\n        Console.WriteLine(result);\n    }\n}", 
        "has_started": true, 
        "erlang_template": "-module(solution).\n-export([main/0]).\n\nmain() ->\n\n    { ok, [N]} = io:fread(\"\", \"~d\"),\n    Arr = read_array(N,\"~s\"),\n    true.\n\nread_array(0,D) -> [];\nread_array(N,D) -> \n\t{ok, [X]} = io:fread(\"\", D),\n\t[X | read_array(N-1,D)].\n\nread_2darray(0,M,D) -> [];\nread_2darray(N,M,D) ->\n\tQ=read_array(M,D),\n\t[Q | read_2darray(N-1,M,D)].\n\n", 
        "judgebot": null, 
        "custom_checker_language": "", 
        "custom_case": true, 
        "scala_template_head": "", 
        "topics": [
            {
                "slug": "string-basics", 
                "title": "String Basics"
            }, 
            {
                "slug": "alphabets", 
                "title": "Alphabets"
            }, 
            {
                "slug": "dictionary", 
                "title": "Dictionary"
            }
        ], 
        "updated_at": "2017-07-11T15:45:54.000Z", 
        "author_name": "darkshadows", 
        "onboarding": null, 
        "id": 2223, 
        "lua_template": "function gemstones(arr)\n    -- Complete this function\n\nn = io.read(\"*number\", \"*l\")\narr = {}\nfor arr_i = 1,n do\n\tarr[arr_i] = io.read()\nend\n", 
        "has_ended": false, 
        "javascript_template": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction gemstones(arr){\n    // Complete this function\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    var arr = [];\n    for(var arr_i = 0; arr_i < n; arr_i++){\n    \tarr[arr_i] = readLine();\n    }\n    var result = gemstones(arr);\n    process.stdout.write(\"\" + result + \"\\n\");\n\n}\n", 
        "c_template": "#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <limits.h>\n#include <stdbool.h>\n\nint gemstones(int arr_size, char** arr){\n    // Complete this function\n}\n\nint main() {\n    int n; \n    scanf(\"%i\", &n);\n    char* *arr = malloc(sizeof(char*) * n);\n    for(int arr_i = 0; arr_i < n; arr_i++){\n    \tarr[arr_i] = (char *)malloc(10240 * sizeof(char));\n    \tscanf(\"%s\",arr[arr_i]);\n    }\n    int result = gemstones(arr);\n    printf(\"%d\\n\", result);\n    return 0;\n}", 
        "java8_template_tail": "", 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "scala_template_tail": "", 
        "status": null, 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "track": {
            "name": "Strings", 
            "taxonomy": 1, 
            "track_slug": "algorithms", 
            "track_id": 3, 
            "track_name": "Algorithms", 
            "id": 34, 
            "rewards_system_enabled": true, 
            "slug": "strings"
        }, 
        "csharp_template_head": "", 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>John has discovered various rocks. Each rock is composed of various elements, and each element is represented by a lower-case Latin letter from 'a' to 'z'. An element can be present multiple times in a rock. An element is called a <em>gem-element</em> if it occurs at least once in each of the rocks.</p>\n\n<p>Given the list of <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span> rocks with their compositions, display the number of gem-elements that exist in those rocks.</p></div></div></div><div class='challenge_input_format'><div class='msB challenge_input_format_title'><p><strong>Input Format</strong></p></div><div class='msB challenge_input_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>The first line consists of an integer, <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span>, the number of rocks. <br>\nEach of the next <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.064ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 888.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g></svg></span> lines contains a rock's composition. Each composition consists of lower-case letters of English alphabet.</p>\n\n<p><strong>Constraints</strong> <br>\n<span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"12.91ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 5558.6 1008.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(1834,0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g transform=\"translate(3000,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(4057,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1001,0)\"></path></g></g></svg></span> <br>\nEach composition consists of only lower-case Latin letters ('a'-'z'). <br>\n<span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.616ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 1556.8 1008.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g></g></svg></span> <em>length of each composition</em> <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"5.941ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 2557.8 1008.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path><g transform=\"translate(1056,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(1001,0)\"></path></g></g></svg></span></p></div></div></div><div class='challenge_output_format'><div class='msB challenge_output_format_title'><p><strong>Output Format</strong></p></div><div class='msB challenge_output_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Print the number of gem-elements that are common in these rocks. If there are none, print 0.</p></div></div></div><div class='challenge_sample_input'><div class='msB challenge_sample_input_title'><p><strong>Sample Input</strong></p></div><div class='msB challenge_sample_input_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>3\nabcdde\nbaccd\neeabg\n</code></pre></div></div></div><div class='challenge_sample_output'><div class='msB challenge_sample_output_title'><p><strong>Sample Output</strong></p></div><div class='msB challenge_sample_output_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>2\n</code></pre></div></div></div><div class='challenge_explanation'><div class='msB challenge_explanation_title'><p><strong>Explanation</strong></p></div><div class='msB challenge_explanation_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Only \"a\" and \"b\" are the two kinds of gem-elements, since these are the only characters that occur in every rock's composition.</p></div></div></div>", 
        "haskell_template_head": "", 
        "max_score": 20, 
        "user_score": 0, 
        "requirements_description": null, 
        "created_at": "2014-03-24T01:45:42.000Z", 
        "countdown_time": 0, 
        "objectivec_template": "#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n    int n;\n    scanf(\"%i\",&n);\n    NSString* arr[n];\n    for(int arr_i = 0; arr_i < n; arr_i++){\n    \tchar* arr_temp = (char *)malloc(10240 * sizeof(char));\n    \tscanf(\"%s\",arr_temp);\n    \tarr[arr_i] = [NSString stringWithFormat:@\"%s\", arr_temp];\n    }\n    [pool drain];\n    return 0;\n}\n\n", 
        "csharp_template_tail": "", 
        "lua_template_tail": "", 
        "perl_template_head": ""
    }
}
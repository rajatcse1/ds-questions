{
    "status": true, 
    "model": {
        "tagAncestry": [], 
        "solved_count": 58314, 
        "python_template_head": "", 
        "can_solve": true, 
        "clojure_template_head": "", 
        "dynamic": true, 
        "epoch_starttime": null, 
        "difficulty_name": "Easy", 
        "compile_and_test": true, 
        "submit_disabled": false, 
        "objectivec_template_head": "", 
        "company_id": null, 
        "languages": [
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "whitespace", 
            "sbcl", 
            "java8", 
            "octave", 
            "racket", 
            "rust", 
            "bash", 
            "r", 
            "swift", 
            "fortran", 
            "cpp14", 
            "coffeescript", 
            "ada", 
            "pypy", 
            "pypy3", 
            "elixir", 
            "kotlin", 
            "julia"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-05-06T21:52:25.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1400515200, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 920, 
            "primary_track_id": 3, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": true, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "1 challenge every day! ", 
            "effective_epoch_endtime": 1401120000, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Algorithms", 
                "id": 3, 
                "priority": 14, 
                "descriptions": "The true test of problem solving: when one realizes that time and memory aren't infinite.\n", 
                "rewards_system_enabled": true, 
                "slug": "algorithms"
            }, 
            "primary_tag_id": 3081, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -102234415.59441672, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "Welcome to the Week 3 of our daily challenges! Each day you'll get to solve a challenge whose difficulty level increases as the week progresses! <br />\n\nTo solve the final challenge, you're given an entire weekend . <br />\n\nThere are 5 challenges in total!!  <br /> <br />\n\nTie-breaking rule is a little different for this contest. For each challenge, we calculate your <em>solved time, t</em>  <br />\n\n<em> t = submit - open </em> <br />\n\nwhere <em>submit</em> is the time you submitted the solution, and <em>open</em> is the time you opened the challenge. This way, you do not have to worry about solving the challenge as soon as it becomes available. <br />\n\nRead more about this contest  <a href=\"/blog/daily-challenge\">here</a>. ", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -102234415.58837718, 
            "challenges_count": 5, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2014-05-26T16:00:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "w3", 
            "hide_leaderboard": null, 
            "kind": "weekly", 
            "comment_live_sync": null, 
            "name": "Weekly Challenges - Week 3", 
            "is_multi_round": false, 
            "created_at": "2014-05-12T13:32:52.000Z", 
            "epoch_endtime": 1401120000, 
            "company_associated_contest": null, 
            "rating_category": "Weekly", 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-05-19T16:00:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 103
        }, 
        "factor": 20, 
        "erlang_template_head": "", 
        "ruby_template_tail": "", 
        "default_language": null, 
        "moderator_or_support": false, 
        "leaderboard_out_of_sync": null, 
        "contest_slug": "master", 
        "python3_template": "#!/bin/python3\n\nimport sys\n\ndef theLoveLetterMystery(s):\n    # Complete this function\n\nq = int(input().strip())\nfor a0 in range(q):\n    s = input().strip()\n    result = theLoveLetterMystery(s)\n    print(result)\n", 
        "name": "The Love-Letter Mystery", 
        "level": 12, 
        "success_ratio": 0.9568613294389839, 
        "total_count": 60943, 
        "javascript_template_head": "", 
        "codechecker_handle": null, 
        "java_template_tail": "", 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "ruby_template_head": "", 
        "java8_template_head": "", 
        "is_skip_band_challenge": false, 
        "python_template_tail": "", 
        "public_test_cases": true, 
        "available_translations": [
            {
                "body": "James\u627e\u5230\u4e86\u4ed6\u7684\u670b\u53cbHarry\u8981\u7ed9\u5973\u670b\u53cb\u7684\u60c5\u4e66\u3002James\u5f88\u7231\u6076\u4f5c\u5267\uff0c\u6240\u4ee5\u4ed6\u51b3\u5b9a\u8981\u80e1\u641e\u4e00\u4e0b\u3002\u4ed6\u628a\u4fe1\u4e2d\u7684\u6bcf\u4e2a\u5355\u5b57\u90fd\u53d8\u6210\u4e86[\u56de\u6587](http://zh.wikipedia.org/zh-cn/%E5%9B%9E%E6%96%87)\u3002\u5bf9\u4efb\u4f55\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u4ed6\u53ef\u4ee5\u51cf\u5c11\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u7684\u503c\uff0c\u4f8b\u5982'd'\u53ef\u4ee5\u53d8\u6210'c'\uff0c\u8fd9\u7b97\u662f\u4e00\u6b21\u64cd\u4f5c\u3002(\u53e6\u5916\uff0c\u4ed6\u6700\u591a\u53ea\u80fd\u5c06\u5b57\u7b26\u7684\u503c\u51cf\u5c11\u81f3'a'\uff0c'a'\u4e0d\u80fd\u518d\u88ab\u51cf\u5c11\u6210'z')\u3002\u627e\u51fa\u5c06\u7ed9\u5b9a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u56de\u6587\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002<br><br>\n\n**\u8f93\u5165\u683c\u5f0f**  \n\u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 _T_ \u4ee3\u8868\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002  \n\u63a5\u7740 _T_ \u884c\u5404\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002  \n\n**\u8f93\u51fa\u683c\u5f0f**  \n\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u5404\u8f93\u51fa\u4e00\u884c\uff0c\u4ee3\u8868\u6b64\u6570\u636e\u9700\u8981\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002\n\n**\u53d6\u503c\u8303\u56f4**  \n1 &le; _T_ &le; 10<br>\n1 &le; _\u5b57\u7b26\u4e32\u957f\u5ea6_ &le; 10<sup>4</sup>  \n\n**\u6837\u4f8b\u8f93\u5165 #00**  \n\n    3\n    abc\n    abcba\n    abcd\n\n**\u6837\u4f8b\u8f93\u51fa #00**  \n\n    2\n    0\n    4\n\n**\u6837\u4f8b\u89e3\u6790**  \n\n\u7b2c\u4e00\u7ec4\u6570\u636e\uff1aab*c* -> ab*b* -> ab*a*\u3002  \n\u7b2c\u4e8c\u7ec4\u6570\u636e\uff1aabcba\u672c\u8eab\u5df2\u7ecf\u662f\u56de\u6587\u4e86\u3002  \n\u7b2c\u4e09\u7ec4\u6570\u636e\uff1aabc*d* -> abc*c* -> abc*b* -> abc*a* = ab*c*a -> ab*b*a\u3002  \n", 
                "problem_statement_fields": {
                    "sample_output": " ", 
                    "problem_statement": "James\u627e\u5230\u4e86\u4ed6\u7684\u670b\u53cbHarry\u8981\u7ed9\u5973\u670b\u53cb\u7684\u60c5\u4e66\u3002James\u5f88\u7231\u6076\u4f5c\u5267\uff0c\u6240\u4ee5\u4ed6\u51b3\u5b9a\u8981\u80e1\u641e\u4e00\u4e0b\u3002\u4ed6\u628a\u4fe1\u4e2d\u7684\u6bcf\u4e2a\u5355\u5b57\u90fd\u53d8\u6210\u4e86[\u56de\u6587](http://zh.wikipedia.org/zh-cn/%E5%9B%9E%E6%96%87)\u3002\u5bf9\u4efb\u4f55\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u4ed6\u53ef\u4ee5\u51cf\u5c11\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u7684\u503c\uff0c\u4f8b\u5982'd'\u53ef\u4ee5\u53d8\u6210'c'\uff0c\u8fd9\u7b97\u662f\u4e00\u6b21\u64cd\u4f5c\u3002(\u53e6\u5916\uff0c\u4ed6\u6700\u591a\u53ea\u80fd\u5c06\u5b57\u7b26\u7684\u503c\u51cf\u5c11\u81f3'a'\uff0c'a'\u4e0d\u80fd\u518d\u88ab\u51cf\u5c11\u6210'z')\u3002\u627e\u51fa\u5c06\u7ed9\u5b9a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u56de\u6587\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002<br><br>\n\n**\u8f93\u5165\u683c\u5f0f**  \n\u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 _T_ \u4ee3\u8868\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002  \n\u63a5\u7740 _T_ \u884c\u5404\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002  \n\n**\u8f93\u51fa\u683c\u5f0f**  \n\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u5404\u8f93\u51fa\u4e00\u884c\uff0c\u4ee3\u8868\u6b64\u6570\u636e\u9700\u8981\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002\n\n**\u53d6\u503c\u8303\u56f4**  \n1 &le; _T_ &le; 10<br>\n1 &le; _\u5b57\u7b26\u4e32\u957f\u5ea6_ &le; 10<sup>4</sup>  \n\n**\u6837\u4f8b\u8f93\u5165 #00**  \n\n    3\n    abc\n    abcba\n    abcd\n\n**\u6837\u4f8b\u8f93\u51fa #00**  \n\n    2\n    0\n    4\n\n**\u6837\u4f8b\u89e3\u6790**  \n\n\u7b2c\u4e00\u7ec4\u6570\u636e\uff1aab*c* -> ab*b* -> ab*a*\u3002  \n\u7b2c\u4e8c\u7ec4\u6570\u636e\uff1aabcba\u672c\u8eab\u5df2\u7ecf\u662f\u56de\u6587\u4e86\u3002  \n\u7b2c\u4e09\u7ec4\u6570\u636e\uff1aabc*d* -> abc*c* -> abc*b* -> abc*a* = ab*c*a -> ab*b*a\u3002  \n", 
                    "input_format": " ", 
                    "explanation": " ", 
                    "sample_input": " ", 
                    "output_format": " "
                }, 
                "name": "The Love-Letter Mystery", 
                "language": "Chinese", 
                "challenge_id": 2343, 
                "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>James\u627e\u5230\u4e86\u4ed6\u7684\u670b\u53cbHarry\u8981\u7ed9\u5973\u670b\u53cb\u7684\u60c5\u4e66\u3002James\u5f88\u7231\u6076\u4f5c\u5267\uff0c\u6240\u4ee5\u4ed6\u51b3\u5b9a\u8981\u80e1\u641e\u4e00\u4e0b\u3002\u4ed6\u628a\u4fe1\u4e2d\u7684\u6bcf\u4e2a\u5355\u5b57\u90fd\u53d8\u6210\u4e86<a href=\"http://zh.wikipedia.org/zh-cn/%E5%9B%9E%E6%96%87\">\u56de\u6587</a>\u3002\u5bf9\u4efb\u4f55\u7ed9\u5b9a\u7684\u5b57\u7b26\u4e32\uff0c\u4ed6\u53ef\u4ee5\u51cf\u5c11\u5176\u4e2d\u4efb\u4f55\u4e00\u4e2a\u5b57\u7b26\u7684\u503c\uff0c\u4f8b\u5982'd'\u53ef\u4ee5\u53d8\u6210'c'\uff0c\u8fd9\u7b97\u662f\u4e00\u6b21\u64cd\u4f5c\u3002(\u53e6\u5916\uff0c\u4ed6\u6700\u591a\u53ea\u80fd\u5c06\u5b57\u7b26\u7684\u503c\u51cf\u5c11\u81f3'a'\uff0c'a'\u4e0d\u80fd\u518d\u88ab\u51cf\u5c11\u6210'z')\u3002\u627e\u51fa\u5c06\u7ed9\u5b9a\u5b57\u7b26\u4e32\u8f6c\u6362\u6210\u56de\u6587\u6240\u9700\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002<br><br></p>\n\n<p><strong>\u8f93\u5165\u683c\u5f0f</strong> <br>\n\u7b2c\u4e00\u884c\u5305\u542b\u6574\u6570 <em>T</em> \u4ee3\u8868\u6d4b\u8bd5\u6570\u636e\u7684\u7ec4\u6570\u3002 <br>\n\u63a5\u7740 <em>T</em> \u884c\u5404\u5305\u542b\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002  </p>\n\n<p><strong>\u8f93\u51fa\u683c\u5f0f</strong> <br>\n\u6bcf\u4e2a\u6d4b\u8bd5\u6570\u636e\u5404\u8f93\u51fa\u4e00\u884c\uff0c\u4ee3\u8868\u6b64\u6570\u636e\u9700\u8981\u7684\u6700\u5c11\u64cd\u4f5c\u6b21\u6570\u3002</p>\n\n<p><strong>\u53d6\u503c\u8303\u56f4</strong> <br>\n1 \u2264 <em>T</em> \u2264 10<br>\n1 \u2264 <em>\u5b57\u7b26\u4e32\u957f\u5ea6</em> \u2264 10<sup>4</sup>  </p>\n\n<p><strong>\u6837\u4f8b\u8f93\u5165 #00</strong>  </p>\n\n<pre><code>3\nabc\nabcba\nabcd\n</code></pre>\n\n<p><strong>\u6837\u4f8b\u8f93\u51fa #00</strong>  </p>\n\n<pre><code>2\n0\n4\n</code></pre>\n\n<p><strong>\u6837\u4f8b\u89e3\u6790</strong>  </p>\n\n<p>\u7b2c\u4e00\u7ec4\u6570\u636e\uff1aab*c* -&gt; ab*b* -&gt; ab*a*\u3002 <br>\n\u7b2c\u4e8c\u7ec4\u6570\u636e\uff1aabcba\u672c\u8eab\u5df2\u7ecf\u662f\u56de\u6587\u4e86\u3002 <br>\n\u7b2c\u4e09\u7ec4\u6570\u636e\uff1aabc*d* -&gt; abc*c* -&gt; abc*b* -&gt; abc*a* = ab*c*a -&gt; ab*b*a\u3002  </p></div></div>", 
                "preview": null
            }, 
            {
                "body": "\u0414\u0436\u0435\u0439\u043c\u0441 \u0440\u0430\u0437\u0434\u043e\u0431\u044b\u043b \u043b\u044e\u0431\u043e\u0432\u043d\u043e\u0435 \u043f\u0438\u0441\u044c\u043c\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0435\u0433\u043e \u0434\u0440\u0443\u0433 \u0413\u0430\u0440\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0441\u0432\u043e\u0435\u0439 \u0434\u0435\u0432\u0443\u0448\u043a\u0435. \u0411\u0443\u0434\u0443\u0447\u0438 \u0448\u0443\u0442\u043d\u0438\u043a\u043e\u043c, \u0414\u0436\u0435\u0439\u043c\u0441 \u0440\u0435\u0448\u0438\u043b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0433\u043e. \u041e\u043d \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043b \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 [\u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u044b](https://ru.wikipedia.org/wiki/\u041f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c). \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043b\u043e\u0432\u0435 \u043e\u043d \u0438\u0437\u043c\u0435\u043d\u044f\u043b \u0431\u0443\u043a\u0432\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043c\u0435\u043d\u044c\u0448\u0438\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 'd' \u043e\u043d \u043c\u043e\u0433 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0432 'c' \u0438 \u044d\u0442\u043e \u0441\u0447\u0438\u0442\u0430\u043b\u043e\u0441\u044c \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439. (\u041e\u043d \u043c\u043e\u0433 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e \u0431\u0443\u043a\u0432\u044b 'a', 'a' \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043e \u0432 'z')\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0432\u0430 \u0432 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c.\n\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430**  \n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e _T_ - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432.  \n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 _T_ \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u043b\u043e\u0432\u0443.  \n\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430**  \n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430.\n\n**\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f**  \n1 &le; _T_ &le; 10<br> \n1 &le; _\u0434\u043b\u0438\u043d\u0430 \u0441\u043b\u043e\u0432\u0430_ &le; 10<sup>4</sup>  \n\u0412\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b - \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430 \u043e\u0442 'a' \u0434\u043e 'z'\n\n**\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u0432\u043e\u0434 #00**  \n\n    3\n    abc\n    abcba\n    abcd\n\n**\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u044b\u0432\u043e\u0434 #00**  \n\n    2\n    0\n    4\n\n**\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435**  \n\n\u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430, ab*c* -> ab*b* -> ab*a*.  \n\u0414\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430, abcba - \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c.  \n\u0414\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0442\u0435\u0441\u0442\u0430, abc*d* -> abc*c* -> abc*b* -> abc*a* = ab*c*a -> ab*b*a.  \n", 
                "problem_statement_fields": {
                    "sample_output": " ", 
                    "problem_statement": "\u0414\u0436\u0435\u0439\u043c\u0441 \u0440\u0430\u0437\u0434\u043e\u0431\u044b\u043b \u043b\u044e\u0431\u043e\u0432\u043d\u043e\u0435 \u043f\u0438\u0441\u044c\u043c\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0435\u0433\u043e \u0434\u0440\u0443\u0433 \u0413\u0430\u0440\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0441\u0432\u043e\u0435\u0439 \u0434\u0435\u0432\u0443\u0448\u043a\u0435. \u0411\u0443\u0434\u0443\u0447\u0438 \u0448\u0443\u0442\u043d\u0438\u043a\u043e\u043c, \u0414\u0436\u0435\u0439\u043c\u0441 \u0440\u0435\u0448\u0438\u043b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0433\u043e. \u041e\u043d \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043b \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 [\u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u044b](https://ru.wikipedia.org/wiki/\u041f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c). \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043b\u043e\u0432\u0435 \u043e\u043d \u0438\u0437\u043c\u0435\u043d\u044f\u043b \u0431\u0443\u043a\u0432\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043c\u0435\u043d\u044c\u0448\u0438\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 'd' \u043e\u043d \u043c\u043e\u0433 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0432 'c' \u0438 \u044d\u0442\u043e \u0441\u0447\u0438\u0442\u0430\u043b\u043e\u0441\u044c \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439. (\u041e\u043d \u043c\u043e\u0433 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e \u0431\u0443\u043a\u0432\u044b 'a', 'a' \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043e \u0432 'z')\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0432\u0430 \u0432 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c.\n\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430**  \n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e _T_ - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432.  \n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 _T_ \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u043b\u043e\u0432\u0443.  \n\n**\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430**  \n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430.\n\n**\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f**  \n1 &le; _T_ &le; 10<br> \n1 &le; _\u0434\u043b\u0438\u043d\u0430 \u0441\u043b\u043e\u0432\u0430_ &le; 10<sup>4</sup>  \n\u0412\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b - \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430 \u043e\u0442 'a' \u0434\u043e 'z'\n\n**\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u0432\u043e\u0434 #00**  \n\n    3\n    abc\n    abcba\n    abcd\n\n**\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u044b\u0432\u043e\u0434 #00**  \n\n    2\n    0\n    4\n\n**\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435**  \n\n\u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430, ab*c* -> ab*b* -> ab*a*.  \n\u0414\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430, abcba - \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c.  \n\u0414\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0442\u0435\u0441\u0442\u0430, abc*d* -> abc*c* -> abc*b* -> abc*a* = ab*c*a -> ab*b*a.  \n", 
                    "input_format": " ", 
                    "explanation": " ", 
                    "sample_input": " ", 
                    "output_format": " "
                }, 
                "name": "The Love-Letter Mystery", 
                "language": "Russian", 
                "challenge_id": 2343, 
                "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>\u0414\u0436\u0435\u0439\u043c\u0441 \u0440\u0430\u0437\u0434\u043e\u0431\u044b\u043b \u043b\u044e\u0431\u043e\u0432\u043d\u043e\u0435 \u043f\u0438\u0441\u044c\u043c\u043e, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0435\u0433\u043e \u0434\u0440\u0443\u0433 \u0413\u0430\u0440\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043b \u0441\u0432\u043e\u0435\u0439 \u0434\u0435\u0432\u0443\u0448\u043a\u0435. \u0411\u0443\u0434\u0443\u0447\u0438 \u0448\u0443\u0442\u043d\u0438\u043a\u043e\u043c, \u0414\u0436\u0435\u0439\u043c\u0441 \u0440\u0435\u0448\u0438\u043b \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0435\u0433\u043e. \u041e\u043d \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u043b \u0432\u0441\u0435 \u0441\u043b\u043e\u0432\u0430 \u0432 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c\u044b. \u0412 \u043a\u0430\u0436\u0434\u043e\u043c \u0441\u043b\u043e\u0432\u0435 \u043e\u043d \u0438\u0437\u043c\u0435\u043d\u044f\u043b \u0431\u0443\u043a\u0432\u044b \u0442\u043e\u043b\u044c\u043a\u043e \u043d\u0430 \u043c\u0435\u043d\u044c\u0448\u0438\u0435, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, 'd' \u043e\u043d \u043c\u043e\u0433 \u043f\u0440\u0435\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u0432 'c' \u0438 \u044d\u0442\u043e \u0441\u0447\u0438\u0442\u0430\u043b\u043e\u0441\u044c \u043e\u0434\u043d\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439. (\u041e\u043d \u043c\u043e\u0433 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043e \u0431\u0443\u043a\u0432\u044b 'a', 'a' \u043d\u0435 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u043e \u0432 'z')\n\u041d\u0430\u0439\u0434\u0438\u0442\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u043f\u0440\u0435\u0432\u0440\u0430\u0449\u0435\u043d\u0438\u044f \u0441\u043b\u043e\u0432\u0430 \u0432 \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c.</p>\n\n<p><strong>\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u0432\u043e\u0434\u0430</strong> <br>\n\u041f\u0435\u0440\u0432\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e <em>T</em> - \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0442\u0435\u0441\u0442\u043e\u0432. <br>\n\u0421\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 <em>T</em> \u0441\u0442\u0440\u043e\u043a \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442 \u043f\u043e \u043e\u0434\u043d\u043e\u043c\u0443 \u0441\u043b\u043e\u0432\u0443.  </p>\n\n<p><strong>\u0424\u043e\u0440\u043c\u0430\u0442 \u0432\u044b\u0432\u043e\u0434\u0430</strong> <br>\n\u0412 \u043a\u0430\u0436\u0434\u043e\u0439 \u0441\u0442\u043e\u043a\u0435 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442\u0441\u044f \u043e\u0434\u043d\u043e \u0447\u0438\u0441\u043b\u043e, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0435 \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u043c\u0443 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u0434\u043b\u044f \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430.</p>\n\n<p><strong>\u041e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u044f</strong> <br>\n1 \u2264 <em>T</em> \u2264 10<br> \n1 \u2264 <em>\u0434\u043b\u0438\u043d\u0430 \u0441\u043b\u043e\u0432\u0430</em> \u2264 10<sup>4</sup> <br>\n\u0412\u0441\u0435 \u0441\u0438\u043c\u0432\u043e\u043b\u044b - \u0442\u043e\u043b\u044c\u043a\u043e \u0441\u0442\u0440\u043e\u0447\u043d\u044b\u0435 \u0431\u0443\u043a\u0432\u044b \u0430\u043d\u0433\u043b\u0438\u0439\u0441\u043a\u043e\u0433\u043e \u0430\u043b\u0444\u0430\u0432\u0438\u0442\u0430 \u043e\u0442 'a' \u0434\u043e 'z'</p>\n\n<p><strong>\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u0432\u043e\u0434 #00</strong>  </p>\n\n<pre><code>3\nabc\nabcba\nabcd\n</code></pre>\n\n<p><strong>\u041f\u0440\u0438\u043c\u0435\u0440. \u0412\u044b\u0432\u043e\u0434 #00</strong>  </p>\n\n<pre><code>2\n0\n4\n</code></pre>\n\n<p><strong>\u041f\u043e\u044f\u0441\u043d\u0435\u043d\u0438\u0435</strong>  </p>\n\n<p>\u0414\u043b\u044f \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430, ab*c* -&gt; ab*b* -&gt; ab*a*. <br>\n\u0414\u043b\u044f \u0432\u0442\u043e\u0440\u043e\u0433\u043e \u0442\u0435\u0441\u0442\u0430, abcba - \u043f\u0430\u043b\u0438\u043d\u0434\u0440\u043e\u043c. <br>\n\u0414\u043b\u044f \u0442\u0440\u0435\u0442\u044c\u0435\u0433\u043e \u0442\u0435\u0441\u0442\u0430, abc*d* -&gt; abc*c* -&gt; abc*b* -&gt; abc*a* = ab*c*a -&gt; ab*b*a.  </p></div></div>", 
                "preview": null
            }, 
            {
                "body": "James pegou uma carta de amor que seu amigo Harry escreveu para sua namorada. Como \u00e9 muito brincalh\u00e3o, James decidiu pregar uma pe\u00e7a em seu amigo e modificou todas as palavras da carta por [pal\u00edndromos] (https://pt.wikipedia.org/wiki/Pal%C3%ADndromo).\n \nAo modificar as letras da palavra, ele seguiu duas regras: \n \n*(a)* Ele s\u00f3 poderia reduzir o valor da letra. Por exemplo, ele poderia trocar de 'd' para 'c', mas n\u00e3o poderia trocar de 'c' para 'd'. \n*(b)* Se ele tivesse que modificar repetidamente o valor de uma letra, ele poderia faz\u00ea-lo at\u00e9 a letra se tornar 'a'. Uma vez que a letra fosse alterada para 'a', ela n\u00e3o poderia mais ser modificada. \n \nCada redu\u00e7\u00e3o no valor de qualquer letra \u00e9 contabilizada como uma \u00fanica opera\u00e7\u00e3o. Encontre o n\u00famero m\u00ednimo de opera\u00e7\u00f5es que ele realiza para converter uma determinada string em um pal\u00edndromo.<br> \n \n \n**Formato de Entrada**\nA primeira linha cont\u00e9m um inteiro _T_ (n\u00famero de casos de teste).\nCada linha _T_ seguinte contem uma string.\n \n**Formato de Sa\u00edda**\nUma \u00fanica linha que contem o n\u00famero de opera\u00e7\u00f5es m\u00ednimas correspondentes a cada caso de ensaio. \n \n**Restri\u00e7\u00f5es**\n1 &le; _T_ &le; 10 <br> \n1 &le; _length de string_ &le; 10<sup>4</sup> \nTodos os caracteres s\u00e3o letras min\u00fasculas do alfabeto ingl\u00eas.\n \n**Exemplo de Entrada #00**\n \n     3 \n     abc \n     abcba \n     abcd \n \n**Exemplo de Sa\u00edda # 00**\n \n     2 \n     0 \n     4 \n \n**Explica\u00e7\u00e3o**\n \nPara o primeiro caso de teste, ab*c* -> ab*b* -> ab*a*.\nPara o segundo caso de teste, abcba \u00e9 uma sequ\u00eancia pal\u00edndroma.\nPara o terceiro caso de teste, abc*d* -> abc*c* -> abc*b* -> abc*a* = ab*c*a -> ab*b*a.", 
                "problem_statement_fields": {
                    "sample_output": " ", 
                    "problem_statement": "James pegou uma carta de amor que seu amigo Harry escreveu para sua namorada. Como \u00e9 muito brincalh\u00e3o, James decidiu pregar uma pe\u00e7a em seu amigo e modificou todas as palavras da carta por [pal\u00edndromos] (https://pt.wikipedia.org/wiki/Pal%C3%ADndromo).\n \nAo modificar as letras da palavra, ele seguiu duas regras: \n \n*(a)* Ele s\u00f3 poderia reduzir o valor da letra. Por exemplo, ele poderia trocar de 'd' para 'c', mas n\u00e3o poderia trocar de 'c' para 'd'. \n*(b)* Se ele tivesse que modificar repetidamente o valor de uma letra, ele poderia faz\u00ea-lo at\u00e9 a letra se tornar 'a'. Uma vez que a letra fosse alterada para 'a', ela n\u00e3o poderia mais ser modificada. \n \nCada redu\u00e7\u00e3o no valor de qualquer letra \u00e9 contabilizada como uma \u00fanica opera\u00e7\u00e3o. Encontre o n\u00famero m\u00ednimo de opera\u00e7\u00f5es que ele realiza para converter uma determinada string em um pal\u00edndromo.<br> \n \n \n**Formato de Entrada**\nA primeira linha cont\u00e9m um inteiro _T_ (n\u00famero de casos de teste).\nCada linha _T_ seguinte contem uma string.\n \n**Formato de Sa\u00edda**\nUma \u00fanica linha que contem o n\u00famero de opera\u00e7\u00f5es m\u00ednimas correspondentes a cada caso de ensaio. \n \n**Restri\u00e7\u00f5es**\n1 &le; _T_ &le; 10 <br> \n1 &le; _length de string_ &le; 10<sup>4</sup> \nTodos os caracteres s\u00e3o letras min\u00fasculas do alfabeto ingl\u00eas.\n \n**Exemplo de Entrada #00**\n \n     3 \n     abc \n     abcba \n     abcd \n \n**Exemplo de Sa\u00edda # 00**\n \n     2 \n     0 \n     4 \n \n**Explica\u00e7\u00e3o**\n \nPara o primeiro caso de teste, ab*c* -> ab*b* -> ab*a*.\nPara o segundo caso de teste, abcba \u00e9 uma sequ\u00eancia pal\u00edndroma.\nPara o terceiro caso de teste, abc*d* -> abc*c* -> abc*b* -> abc*a* = ab*c*a -> ab*b*a.", 
                    "input_format": " ", 
                    "explanation": " ", 
                    "sample_input": " ", 
                    "output_format": " "
                }, 
                "name": "The Love-Letter Mystery", 
                "language": "Portuguese", 
                "challenge_id": 2343, 
                "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>James pegou uma carta de amor que seu amigo Harry escreveu para sua namorada. Como \u00e9 muito brincalh\u00e3o, James decidiu pregar uma pe\u00e7a em seu amigo e modificou todas as palavras da carta por [pal\u00edndromos] (<a href=\"https://pt.wikipedia.org/wiki/Pal%C3%ADndromo\">https://pt.wikipedia.org/wiki/Pal%C3%ADndromo</a>).</p>\n\n<p>Ao modificar as letras da palavra, ele seguiu duas regras: </p>\n\n<p><em>(a)</em> Ele s\u00f3 poderia reduzir o valor da letra. Por exemplo, ele poderia trocar de 'd' para 'c', mas n\u00e3o poderia trocar de 'c' para 'd'. \n<em>(b)</em> Se ele tivesse que modificar repetidamente o valor de uma letra, ele poderia faz\u00ea-lo at\u00e9 a letra se tornar 'a'. Uma vez que a letra fosse alterada para 'a', ela n\u00e3o poderia mais ser modificada. </p>\n\n<p>Cada redu\u00e7\u00e3o no valor de qualquer letra \u00e9 contabilizada como uma \u00fanica opera\u00e7\u00e3o. Encontre o n\u00famero m\u00ednimo de opera\u00e7\u00f5es que ele realiza para converter uma determinada string em um pal\u00edndromo.<br> </p>\n\n<p><strong>Formato de Entrada</strong>\nA primeira linha cont\u00e9m um inteiro <em>T</em> (n\u00famero de casos de teste).\nCada linha <em>T</em> seguinte contem uma string.</p>\n\n<p><strong>Formato de Sa\u00edda</strong>\nUma \u00fanica linha que contem o n\u00famero de opera\u00e7\u00f5es m\u00ednimas correspondentes a cada caso de ensaio. </p>\n\n<p><strong>Restri\u00e7\u00f5es</strong>\n1 \u2264 <em>T</em> \u2264 10 <br> \n1 \u2264 <em>length de string</em> \u2264 10<sup>4</sup> \nTodos os caracteres s\u00e3o letras min\u00fasculas do alfabeto ingl\u00eas.</p>\n\n<p><strong>Exemplo de Entrada #00</strong></p>\n\n<pre><code> 3 \n abc \n abcba \n abcd \n</code></pre>\n\n<p><strong>Exemplo de Sa\u00edda # 00</strong></p>\n\n<pre><code> 2 \n 0 \n 4 \n</code></pre>\n\n<p><strong>Explica\u00e7\u00e3o</strong></p>\n\n<p>Para o primeiro caso de teste, ab*c* -&gt; ab*b* -&gt; ab*a*.\nPara o segundo caso de teste, abcba \u00e9 uma sequ\u00eancia pal\u00edndroma.\nPara o terceiro caso de teste, abc*d* -&gt; abc*c* -&gt; abc*b* -&gt; abc*a* = ab*c*a -&gt; ab*b*a.</p></div></div>", 
                "preview": null
            }
        ], 
        "clojure_template_tail": "", 
        "cpp_template": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nint theLoveLetterMystery(string s){\n    // Complete this function\n}\n\nint main() {\n    int q;\n    cin >> q;\n    for(int a0 = 0; a0 < q; a0++){\n        string s;\n        cin >> s;\n        int result = theLoveLetterMystery(s);\n        cout << result << endl;\n    }\n    return 0;\n}", 
        "c_template_tail": "", 
        "cpp_template_tail": "", 
        "category": "ai", 
        "haskell_template_tail": "", 
        "php_template": "<?php\n\n$handle = fopen (\"php://stdin\", \"r\");\nfunction theLoveLetterMystery($s){\n    // Complete this function\n}\n\nfscanf($handle, \"%i\",$q);\nfor($a0 = 0; $a0 < $q; $a0++){\n    fscanf($handle, \"%s\",$s);\n    $result = theLoveLetterMystery($s);\n    echo $result . \"\\n\";\n}\n\n?>", 
        "perl_template": "#!/usr/bin/perl\n\nsub theLoveLetterMystery {\n\t\n}\n\n$q = <STDIN>;\nchomp $q;\nfor my $a0 (0..$q-1){\n    $s = <STDIN>;\n    chomp $s;\n    $result = theLoveLetterMystery($s);\n    print \"$result\\n\";\n\n}\n", 
        "can_be_viewed": true, 
        "submitted_hackers_count": 60943, 
        "public_solutions": true, 
        "javascript_template_tail": "", 
        "c_template_head": "", 
        "deleted": false, 
        "real_dynamic": false, 
        "php_template_tail": "", 
        "difficulty_score": "0.06", 
        "difficulty": 0.9329806829452605, 
        "active": true, 
        "slug": "the-love-letter-mystery", 
        "show_skeliton": null, 
        "player_count": 2, 
        "is_preview_contest": false, 
        "is_editorial_available": true, 
        "epoch_endtime": null, 
        "cpp_template_head": "", 
        "perl_template_tail": "", 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/20791764-b9ea-4720-bc8c-416ec41364c8/150x150.png", 
        "judgebot_language": null, 
        "php_template_head": "", 
        "java_template": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static int theLoveLetterMystery(String s){\n        // Complete this function\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int q = in.nextInt();\n        for(int a0 = 0; a0 < q; a0++){\n            String s = in.next();\n            int result = theLoveLetterMystery(s);\n            System.out.println(result);\n        }\n    }\n}", 
        "python3_template_tail": "", 
        "python_template": "#!/bin/python\n\nimport sys\n\ndef theLoveLetterMystery(s):\n    # Complete this function\n\nq = int(raw_input().strip())\nfor a0 in xrange(q):\n    s = raw_input().strip()\n    result = theLoveLetterMystery(s)\n    print(result)\n\n", 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "scala_template": "object Solution {\n\n    def main(args: Array[String]) {\n        val sc = new java.util.Scanner (System.in);\n        var q = sc.nextInt();\n        int a0 = 0;\n        while(a0 < q){\n            var s = sc.next();\n            a0+=1;\n        }\n    }\n}", 
        "lua_template_head": "", 
        "kind": "code", 
        "is_custom": false, 
        "ruby_template": "#!/bin/ruby\n\ndef theLoveLetterMystery(s)\n    # Complete this function\nend\n\nq = gets.strip.to_i\nfor a0 in (0..q-1)\n    s = gets.strip\n    result = theLoveLetterMystery(s)\n    puts result;\nend\n", 
        "haskell_template": "import Control.Applicative\nimport Control.Monad\nimport System.IO\n\n\nmain :: IO ()\nmain = do\n    q_temp <- getLine\n    let q = read q_temp :: Int\n    forM_ [1..q] $ \\a0  -> do\n        s <- getLine\n\n\ngetMultipleLines :: Int -> IO [String]\n\ngetMultipleLines n\n    | n <= 0 = return []\n    | otherwise = do          \n        x <- getLine         \n        xs <- getMultipleLines (n-1)    \n        let ret = (x:xs)    \n        return ret          \n\n", 
        "java8_template": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n    static int theLoveLetterMystery(String s){\n        // Complete this function\n    }\n\n    public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int q = in.nextInt();\n        for(int a0 = 0; a0 < q; a0++){\n            String s = in.next();\n            int result = theLoveLetterMystery(s);\n            System.out.println(result);\n        }\n    }\n}", 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "objectivec_template_tail": "", 
        "custom": false, 
        "preview": "Find the minimum number of operations required to convert a given string into a palindrome under certain conditions", 
        "company": null, 
        "is_text": false, 
        "python3_template_head": "", 
        "clojure_template": "(use '[clojure.string :only (split triml)])\n\n(\n        let [\n          q_t (read-line) \n          q (Integer/parseInt q_t) \n        ]\n\n      (\n        loop [a0 q]\n        (when (> a0 0)\n\n          (\n            let [\n              s (read-line)  \n            ]\n          )\n\n        (recur (- a0 1) ) )\n      )\n\n)", 
        "java_template_head": "", 
        "require_unlock": true, 
        "erlang_template_tail": "", 
        "csharp_template": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Linq;\nclass Solution {\n\n    static int theLoveLetterMystery(string s){\n        // Complete this function\n    }\n\n    static void Main(String[] args) {\n        int q = Convert.ToInt32(Console.ReadLine());\n        for(int a0 = 0; a0 < q; a0++){\n            string s = Console.ReadLine();\n            int result = theLoveLetterMystery(s);\n            Console.WriteLine(result);\n        }\n    }\n}", 
        "has_started": true, 
        "erlang_template": "-module(solution).\n-export([main/0]).\n\nmain() ->\n\n    { ok, [Q]} = io:fread(\"\", \"~d\"),\n    Q_list = lists:seq(1,Q),\n    lists:foreach( fun(Q0) ->\n            { ok, [S]} = io:fread(\"\", \"~s\")\n    end,Q_list),\n    true.\n\nread_array(0,D) -> [];\nread_array(N,D) -> \n\t{ok, [X]} = io:fread(\"\", D),\n\t[X | read_array(N-1,D)].\n\nread_2darray(0,M,D) -> [];\nread_2darray(N,M,D) ->\n\tQ=read_array(M,D),\n\t[Q | read_2darray(N-1,M,D)].\n\n", 
        "judgebot": null, 
        "custom_checker_language": null, 
        "custom_case": true, 
        "scala_template_head": "", 
        "topics": [
            {
                "slug": "string-basics", 
                "title": "String Basics"
            }, 
            {
                "slug": "palindrome", 
                "title": "Palindrome"
            }, 
            {
                "slug": "alphabets", 
                "title": "Alphabets"
            }
        ], 
        "updated_at": "2017-07-11T15:46:08.000Z", 
        "author_name": "amititkgp", 
        "onboarding": null, 
        "id": 2343, 
        "lua_template": "function theLoveLetterMystery(s)\n    -- Complete this function\n\nq = io.read(\"*number\", \"*l\")\na0 = 0\nwhile a0 < q do\n    s = io.read()\n    a0 = a0 + 1\nend\n", 
        "has_ended": false, 
        "javascript_template": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar input_stdin = \"\";\nvar input_stdin_array = \"\";\nvar input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    input_stdin += data;\n});\n\nprocess.stdin.on('end', function () {\n    input_stdin_array = input_stdin.split(\"\\n\");\n    main();    \n});\n\nfunction readLine() {\n    return input_stdin_array[input_currentline++];\n}\n\n/////////////// ignore above this line ////////////////////\n\nfunction theLoveLetterMystery(s){\n    // Complete this function\n}\n\nfunction main() {\n    var q = parseInt(readLine());\n    for(var a0 = 0; a0 < q; a0++){\n        var s = readLine();\n        var result = theLoveLetterMystery(s);\n        process.stdout.write(\"\" + result + \"\\n\");\n    }\n\n}\n", 
        "c_template": "#include <math.h>\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n#include <assert.h>\n#include <limits.h>\n#include <stdbool.h>\n\nint theLoveLetterMystery(char* s){\n    // Complete this function\n}\n\nint main() {\n    int q; \n    scanf(\"%i\", &q);\n    for(int a0 = 0; a0 < q; a0++){\n        char* s = (char *)malloc(512000 * sizeof(char));\n        scanf(\"%s\", s);\n        int result = theLoveLetterMystery(s);\n        printf(\"%d\\n\", result);\n    }\n    return 0;\n}", 
        "java8_template_tail": "", 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "scala_template_tail": "", 
        "status": null, 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "track": {
            "name": "Strings", 
            "taxonomy": 1, 
            "track_slug": "algorithms", 
            "track_id": 3, 
            "track_name": "Algorithms", 
            "id": 34, 
            "rewards_system_enabled": true, 
            "slug": "strings"
        }, 
        "csharp_template_head": "", 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>James found a love letter his friend Harry has written for his girlfriend. James is a prankster, so he decides to meddle with the letter. He changes all the words in the letter into <a href=\"https://en.wikipedia.org/wiki/Palindrome\">palindromes</a>.   </p>\n\n<p>To do this, he follows two rules:  </p>\n\n<ol>\n<li>He can reduce the value of a letter, e.g. he can change <em>d</em> to <em>c</em>, but he cannot change <em>c</em> to <em>d</em>.  </li>\n<li>In order to form a palindrome, if he has to repeatedly reduce the value of a letter, he can do it until the letter becomes <em>a</em>.  Once a letter has been changed to <em>a</em>, it can no longer be changed.  </li>\n</ol>\n\n<p>Each reduction in the value of any letter is counted as a single operation. Find the minimum number of operations required to convert a given string into a palindrome.</p></div></div></div><div class='challenge_input_format'><div class='msB challenge_input_format_title'><p><strong>Input Format</strong></p></div><div class='msB challenge_input_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>The first line contains an integer <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.636ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 704.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g></svg></span>, i.e., the number of test cases. <br>\nThe next <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.636ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 704.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g></svg></span> lines will contain a string each. The strings do not contain any spaces.</p>\n\n<p><strong>Constraints</strong> <br>\n<span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"11.321ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 4874.1 1008.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(1834,0)\"><path stroke-width=\"1\" d=\"M40 437Q21 437 21 445Q21 450 37 501T71 602L88 651Q93 669 101 677H569H659Q691 677 697 676T704 667Q704 661 687 553T668 444Q668 437 649 437Q640 437 637 437T631 442L629 445Q629 451 635 490T641 551Q641 586 628 604T573 629Q568 630 515 631Q469 631 457 630T439 622Q438 621 368 343T298 60Q298 48 386 46Q418 46 427 45T436 36Q436 31 433 22Q429 4 424 1L422 0Q419 0 415 0Q410 0 363 1T228 2Q99 2 64 0H49Q43 6 43 9T45 27Q49 40 55 46H83H94Q174 46 189 55Q190 56 191 56Q196 59 201 76T241 233Q258 301 269 344Q339 619 339 625Q339 630 310 630H279Q212 630 191 624Q146 614 121 583T67 467Q60 445 57 441T43 437H40Z\"></path></g><g transform=\"translate(2816,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(3873,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path></g></g></svg></span> <br>\n<span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.616ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 1556.8 1008.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g></g></svg></span> <em>length of string</em> <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"5.832ex\" height=\"2.843ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -1006.6 2511.2 1223.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path><g transform=\"translate(1056,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\" transform=\"translate(500,0)\"></path><g transform=\"translate(1001,393)\"><path stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></g></svg></span> <br>\nAll characters are lower case English letters.</p></div></div></div><div class='challenge_output_format'><div class='msB challenge_output_format_title'><p><strong>Output Format</strong></p></div><div class='msB challenge_output_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>A single line containing the number of minimum operations corresponding to each test case.</p></div></div></div><div class='challenge_sample_input'><div class='msB challenge_sample_input_title'><p><strong>Sample Input</strong></p></div><div class='msB challenge_sample_input_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>4\nabc\nabcba\nabcd\ncba\n</code></pre></div></div></div><div class='challenge_sample_output'><div class='msB challenge_sample_output_title'><p><strong>Sample Output</strong></p></div><div class='msB challenge_sample_output_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>2\n0\n4\n2\n</code></pre></div></div></div><div class='challenge_explanation'><div class='msB challenge_explanation_title'><p><strong>Explanation</strong></p></div><div class='msB challenge_explanation_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><ol>\n<li>For the first test case, ab<strong>c</strong> -&gt; ab<strong>b</strong> -&gt; aba.</li>\n<li>For the second test case, <em>abcba</em> is already a palindromic string.</li>\n<li>For the third test case, <em>abc<strong>d</strong> -&gt; abc<strong>c</strong> -&gt; abc<strong>b</strong> -&gt; abc<strong>a</strong> = ab<strong>c</strong>a -&gt; ab<strong>b</strong>a</em>.</li>\n<li>For the fourth test case, <em><strong>c</strong>ba -&gt; <strong>b</strong>ba -&gt; aba</em>.  </li>\n</ol></div></div></div>", 
        "haskell_template_head": "", 
        "max_score": 20, 
        "user_score": 0, 
        "requirements_description": null, 
        "created_at": "2014-04-10T16:59:58.000Z", 
        "countdown_time": 0, 
        "objectivec_template": "#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n    int q;\n    scanf(\"%i\",&q);\n    for(int a0 = 0; a0 < q; a0++){\n        NSString* s;\n        char* s_temp = (char *)malloc(512000 * sizeof(char));\n        scanf(\"%s\",s_temp);\n        s = [NSString stringWithFormat:@\"%s\", s_temp];\n    }\n    [pool drain];\n    return 0;\n}\n\n", 
        "csharp_template_tail": "", 
        "lua_template_tail": "", 
        "perl_template_head": ""
    }
}
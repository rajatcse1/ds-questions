{
    "status": true, 
    "model": {
        "tagAncestry": [], 
        "solved_count": 748, 
        "can_solve": true, 
        "dynamic": true, 
        "epoch_starttime": null, 
        "difficulty_name": "Expert", 
        "compile_and_test": true, 
        "submit_disabled": false, 
        "company_id": null, 
        "languages": [
            "c", 
            "cpp", 
            "java", 
            "csharp", 
            "php", 
            "ruby", 
            "python", 
            "perl", 
            "haskell", 
            "clojure", 
            "scala", 
            "lua", 
            "go", 
            "javascript", 
            "erlang", 
            "d", 
            "ocaml", 
            "pascal", 
            "python3", 
            "groovy", 
            "objectivec", 
            "fsharp", 
            "visualbasic", 
            "lolcode", 
            "smalltalk", 
            "tcl", 
            "whitespace", 
            "sbcl", 
            "java8", 
            "octave", 
            "racket", 
            "rust", 
            "bash", 
            "r", 
            "swift", 
            "fortran", 
            "cpp14", 
            "coffeescript", 
            "ada", 
            "pypy", 
            "pypy3", 
            "elixir", 
            "kotlin", 
            "julia"
        ], 
        "leaderboard_out_of_sync_message": null, 
        "primary_contest": null, 
        "factor": 100, 
        "default_language": null, 
        "leaderboard_out_of_sync": null, 
        "contest_slug": "master", 
        "python3_template": "#!/usr/bin/py\n# Head ends here\ndef findStrings(a,query):\n    \n   \n# Tail starts here\n\nif __name__ == '__main__':\n    n = int(input())\n    string=[]\n    for i in range(0,n):\n        string.append(input().strip())\n    q= int(input())\n    query=[]\n    for i in range(0,q):\n        t1=int(input())\n        query.append(t1)\n    findStrings(string,query)\n", 
        "name": "Find Strings", 
        "moderator_or_support": false, 
        "success_ratio": 0.18270639960918417, 
        "total_count": 4094, 
        "level": 95, 
        "codechecker_handle": "", 
        "migrated_resource": null, 
        "custom_tabs": null, 
        "is_skip_band_challenge": false, 
        "public_test_cases": true, 
        "available_translations": [], 
        "cpp_template": "#include <map>\n#include <set>\n#include <list>\n#include <cmath>\n#include <ctime>\n#include <deque>\n#include <queue>\n#include <stack>\n#include <bitset>\n#include <cstdio>\n#include <limits>\n#include <vector>\n#include <cstdlib>\n#include <numeric>\n#include <sstream>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n/* Head ends here */\nvoid findStrings (vector <string>a, vector <int> a_query) {\n    \n    \n}\n/* Tail starts here */\nint main() {\n    int res;\n    \n    int _cases,_query, _a_i;\n    scanf(\"%d\", &_cases);\n    vector <string> _a;\n    char _a_item[2001];\n    for (_a_i = 0; _a_i<_cases; _a_i++) {\n        scanf(\"%s\",_a_item);\n        _a.push_back(_a_item);\n    }\n    vector <int> _a_query;\n    scanf(\"%d\", &_query);\n    int _q_item;\n    for(_a_i = 0; _a_i < _query; _a_i++) { \n        scanf(\"%d\", &_q_item);\n        _a_query.push_back(_q_item);\n    }\n    findStrings(_a, _a_query);    \n    return 0;\n}", 
        "is_preview_contest": false, 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "php_template": "<?php\n/* Head ends here */\nfunction findStrings( $a,$x) {\n   \n\n}\n/* Tail starts here */\n$__fp = fopen(\"php://stdin\", \"r\");\n\nfscanf($__fp, \"%d\", $n);\nfor ($i=0; $i<$n; $i++) {\n    $_a[$i] = trim(fgets($__fp));\n}\nfscanf($__fp, \"%d\", $q);\nfor ($i=0; $i<$q; $i++) {\n    $_x[$i] = trim(fgets($__fp));\n}\nfindStrings($_a,$_x);\n\n?>", 
        "perl_template": "#!/usr/bin/perl\n# Head ends here\n\nsub findStrings{\n    my($a1,$x)=@_;\n    \n}\n\n# Tail starts here\n$n = <>;\n\nfor ($i=0;$i<$n;$i++) {\n    $_a[$i]=<>;\n}\n\n$q = <>;\n\nfor ($i=0;$i<$q;$i++) {\n    $_x[$i] = <>;\n}\n&findStrings(\\@_a,\\@_x);", 
        "can_be_viewed": true, 
        "submitted_hackers_count": 4094, 
        "public_solutions": true, 
        "deleted": false, 
        "real_dynamic": false, 
        "difficulty_score": "0.835", 
        "difficulty": 0.16521048451151707, 
        "active": true, 
        "slug": "find-strings", 
        "show_skeliton": null, 
        "player_count": 2, 
        "is_editorial_available": true, 
        "epoch_endtime": null, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png", 
        "judgebot_language": null, 
        "requirements_description": null, 
        "java_template": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n/* Head ends here */\nstatic void findStrings(String[] a, int[] querry) {\n\n\n    }\n/* Tail starts here */\npublic static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n                \n        int _cases = Integer.parseInt(in.nextLine());\n        String[] _a = new String[_cases];\n        \n    \tfor(int _a_i = 0; _a_i < _cases; _a_i++) {\n            _a[_a_i] = in.nextLine();\n        }\n        int _query = Integer.parseInt(in.nextLine());\n    \tint[] query = new int[_query];\n        for(int _a_i = 0; _a_i < _query; _a_i++) {\n            query[_a_i] = Integer.parseInt(in.nextLine());\n        }\n        \n        findStrings(_a,query);\n    }\n}", 
        "python_template": "#!/usr/bin/py\n# Head ends here\ndef findStrings(a,query):\n    \n# Tail starts here\n\nif __name__ == '__main__':\n    n = input()\n    string=[]\n    for i in range(0,n):\n        string.append(raw_input())\n    q= input()\n    query=[]\n    for i in range(0,q):\n        query.append(input())\n    findStrings(string,query)", 
        "color": null, 
        "has_all_test_cases_public": false, 
        "time_left": null, 
        "kind": "code", 
        "is_custom": false, 
        "ruby_template": "#!/bin/ruby\n# Head ends here\ndef  findStrings( a,q) \n\n\nend\n# Tail starts here\nn = gets.strip.to_i\na=Array.new(n)\n(0...n).each do |i|\n    temp = gets.strip\n    a[i]=temp\nend\nq = gets.strip.to_i\nx=Array.new(a)\n(0...q).each do |i|\n    x[i] = gets.strip.to_i\nend\nfindStrings(a,x)", 
        "solved_score": 0.5, 
        "expert_solution_status": false, 
        "custom": false, 
        "preview": "Given a list of strings, sort their substrings in lexicographic order and remove duplicates. ", 
        "company": null, 
        "is_text": false, 
        "require_unlock": true, 
        "csharp_template": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n/* Head ends here */\nstatic void findStrings(String[] a, int[] querry) {\n\n  \n    }\n/* Tail starts here */\nstatic void Main(String[] args) {\n        int _cases = Convert.ToInt32(Console.ReadLine());\n        String[] _a = new String [_cases];\n    \tfor(int _a_i = 0; _a_i < _cases; _a_i++) {\n            _a[_a_i]=Console.ReadLine();\n        }\n    \n        int _query = Convert.ToInt32(Console.ReadLine());\n    \tint[] query = new int [_query];\n        \n        for(int _a_i = 0; _a_i < _query; _a_i++) {\n            query[_a_i] = Convert.ToInt32(Console.ReadLine());\n        }\n        \n        findStrings(_a,query);       \n    }\n}", 
        "has_started": true, 
        "judgebot": null, 
        "custom_checker_language": null, 
        "custom_case": true, 
        "topics": [
            {
                "slug": "lcp-array", 
                "title": "LCP Array"
            }
        ], 
        "updated_at": "2017-07-11T15:41:22.000Z", 
        "author_name": "HackerRank", 
        "onboarding": null, 
        "id": 66, 
        "has_ended": false, 
        "c_template": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n#include <assert.h>\n/* Head ends here */\nvoid findStrings (char a[51][2001], int numstring,int a_query[],int numquery) {\n  \n \n}\n/* Tail starts here */\nint main() {\n    int res;\n    \n    int _cases,_query, _a_i;\n    scanf(\"%d\", &_cases);\n    \n    char _a[51][2001];\n    for (_a_i = 0; _a_i<_cases; _a_i++) {\n       scanf(\"%s\",_a[_a_i]);\n    }\n    int _a_query[501];\n    scanf(\"%d\", &_query);\n    for(_a_i = 0; _a_i < _query; _a_i++) { \n        scanf(\"%d\", &_a_query[_a_i]);\n    }\n    findStrings(_a, _cases,_a_query, _query);    \n    return 0;\n}", 
        "is_solution_unlocked": false, 
        "checker_program": null, 
        "status": null, 
        "category": "algorithm", 
        "track": {
            "name": "Strings", 
            "taxonomy": 1, 
            "track_slug": "algorithms", 
            "track_id": 3, 
            "track_name": "Algorithms", 
            "id": 34, 
            "rewards_system_enabled": true, 
            "slug": "strings"
        }, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>You are given <em>n</em> strings w<sub>1</sub>, w<sub>2</sub>, ......, w<sub>n</sub>. Let S<sub>i</sub> denote the set of strings formed by considering all unique substrings of the string w<sub>i</sub>. A substring is defined as a contiguous sequence of one or more characters in the string. More information on substrings can be found <a href=\"http://en.wikipedia.org/wiki/Substring\" title=\"Substring\">here</a>. Let <em>S</em> = {S<sub>1</sub> U S<sub>2</sub> U .... S<sub>n</sub>} .i.e <em>S</em> is a set of strings formed by considering all the unique strings in all sets S<sub>1</sub>, S<sub>2</sub>, ..... S<sub>n</sub>. You will be given many queries, and for each query, you will be given an integer 'k'. Your task is to display the lexicographically k<sup>th</sup> smallest string from the set <em>S</em>.</p></div></div></div><div class='challenge_input_format'><div class='msB challenge_input_format_title'><p><strong>Input Format</strong></p></div><div class='msB challenge_input_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>The first line of input contains a single integer <em>n</em>, denoting the number of strings. Each of the next <em>n</em> lines consists of a string. The string on the i<sup>th</sup> line (1&lt;=<em>i</em>&lt;=<em>n</em>) is denoted by w<sub>i</sub> and has a length m<sub>i</sub>. The next line consists of a single integer <em>q</em>, denoting the number of queries. Each of the next <em>q</em> lines consists of a single integer <em>k</em>.</p>\n\n<p>Note: The input strings consist only of lowercase english alphabets 'a' - 'z'.</p></div></div></div><div class='challenge_constraints'><div class='msB challenge_constraints_title'><p><strong>Constraints</strong></p></div><div class='msB challenge_constraints_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>1&lt;= <em>n</em> &lt;=50 <br>\n1&lt;= <em>m<sub>i</sub></em> &lt;=2000 <br>\n1&lt;= <em>q</em> &lt;=500 <br>\n1&lt;= <em>k</em> &lt;=1000000000  </p></div></div></div><div class='challenge_output_format'><div class='msB challenge_output_format_title'><p><strong>Output Format</strong></p></div><div class='msB challenge_output_format_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Output <em>q</em> lines, where the i<sup>th</sup> line consists of a string which is the answer to the i<sup>th</sup> query. If the input is invalid (i.e., <em>k</em> &gt; size of <em>S</em>), display \"INVALID\" for that case.</p></div></div></div><div class='challenge_sample_input'><div class='msB challenge_sample_input_title'><p><strong>Sample Input</strong></p></div><div class='msB challenge_sample_input_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>2 <br>\naab <br>\naac <br>\n3 <br>\n3 <br>\n8 <br>\n23  </p></div></div></div><div class='challenge_sample_output'><div class='msB challenge_sample_output_title'><p><strong>Sample Output</strong></p></div><div class='msB challenge_sample_output_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>aab <br>\nc <br>\nINVALID  </p></div></div></div><div class='challenge_explanation'><div class='msB challenge_explanation_title'><p><strong>Explanation</strong></p></div><div class='msB challenge_explanation_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>For the sample test case, we have 2 strings \"aab\" and \"aac\". <br>\nS1 = {\"a\", \"aa\", \"aab\", \"ab\", \"b\"} . These are the 5 unique substrings of \"aab\". <br>\nS2 = {\"a\", \"aa\", \"aac\",&nbsp; \"ac\", \"c\" } . These are the 5 unique substrings of \"aac\". <br>\nNow, <em>S</em> = {S1 U S2} = {\"a\", \"aa\", \"aab\", \"aac\", \"ab\", \"ac\", \"b\", \"c\"}. Totally, 8 unique strings are present in the set <em>S</em>. <br>\nThe lexicographically 3rd smallest string in <em>S</em> is \"aab\" and the lexicographically 8th smallest string in <em>S</em> is \"c\". Since there are only 8 distinct substrings, the answer to the last query is \"INVALID\".</p></div></div></div>", 
        "max_score": 100, 
        "user_score": 0, 
        "created_at": "2013-01-04T20:26:24.000Z", 
        "countdown_time": 0
    }
}
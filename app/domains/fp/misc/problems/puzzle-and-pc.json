{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 84, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": "{-# LANGUAGE DeriveGeneric #-}\n-- {{{\nmodule Main where\n\nimport Data.List\nimport Data.Char\nimport qualified Data.ByteString.Lazy as B\nimport qualified Data.ByteString.Char8 as BS -- BS.getContents\nimport Control.Applicative\nimport Text.Printf                           -- printf \"%0.6f\" (1.0)\nimport Control.Monad\nimport Data.Aeson\nimport Data.Maybe\nimport GHC.Generics\n-- }}}\n\ndata Testcase_sources = Testcase_sources {\n      kind :: String\n    , meta :: String\n    , path :: String\n  } deriving (Show, Generic)\n\ninstance FromJSON Testcase_sources\n\ndata Request = Reqest {\n      --expected_outputs:: [String]\n      testcase_sources :: [Testcase_sources]\n  } deriving (Show, Generic)\n\ninstance FromJSON Request\nmain :: IO ()\nmain =\n  liftM (takeWhile (not. isSpace). dropWhile isSpace) getContents >>=\n  \\runDir -> (B.readFile. (runDir ++) $\"request.json\") >>=\n  return. (\\(Right x) -> testcase_sources x). (eitherDecode :: B.ByteString -> Either String Request ) >>=\n  \\files -> forM (let len = length files in [0 .. (len-1)])  (tmpFunc runDir) >>=\n  \\status -> print (getScore status) >>\n  (putStrLn. unwords. map show $status) \n  where\n    getScore testStatus = (fromIntegral. sum$ testStatus) / genericLength testStatus\n    tmpFunc runDir idx = do\n      input <- readFile. (runDir++). printf \"input%05d.in\" $ idx\n      output <- BS.readFile. (runDir++). printf \"output%05d.out\" $ idx\n      validate input output\n\n\ntype Point = (Int, Int)\ntype Tromino = (Point, Point, Point)\n\nvalidate inputStr outputStr =\n  if isJust (isValidInput inputStr outputStr) then\n    return 1\n  else\n    return 0\n\n--isValid :: String -> BS.ByteString -> Bool\nisValidInput inputStr outputStr =\n  checkLength inpLen str              >>=\n  sequence. map readCoordinates       >>=\n  getTrominos n (r,c)\n  where\n    str = BS.lines. trimWhiteSpace $ outputStr\n    [m, r, c] = map read. words $ inputStr\n    n = 2^m\n    inpLen = ((n*n)-1)`div`3\n\n------------Parsing trominoes from [[Int]]--------------\ngetTrominos :: Int -> Point -> [[Point]] -> Maybe [Tromino]\ngetTrominos n (r, c) arr =\n  if any (\\x -> length x > 1). group. sort. concat $ arr then\n    Nothing\n  else\n    sequence. map getTrominos' $ arr\n  where\n    isOutofRange (x, y) = x < 1 || x > n || y < 1 || y > n\n    getTrominos' xs@[(a,b),(c1,d),(e,f)]\n      | (a,b)==(r,c) || (c1,d)==(r,c) || (e,f)==(r,c) = Nothing\n      | any isOutofRange xs                           = Nothing\n      | otherwise = isValidTromino ((a, b), (c1, d), (e, f))\n\nisValidTromino :: Tromino -> Maybe Tromino\nisValidTromino t\n  | or [isT p | p <- permute t] = Just t\n  | otherwise                   = Nothing\n  where\n    permute (x,y,z)=[(x,y,z),(x,z,y),(y,x,z),(y,z,x),(z,x,y),(z,y,x)]\n    isT :: Tromino -> Bool\n    isT p = isT1 p || isT2 p || isT3 p || isT4 p\n    isT1 ((x1,y1), (x2,y2), (x3,y3)) =\n      x1==x2 && y1==(y2+1) && (x2+1)==x3 && y2==y3\n    isT2 ((x1,y1), (x2,y2), (x3,y3)) =\n      (x1+1)==x2 && y1==y2 && x2==x3 && y3==(y2+1)\n    isT3 ((x1,y1), (x2,y2), (x3,y3)) =\n      x1==x2 && y2==(y1+1) && (x3+1)==x2 && y2==y3\n    isT4 ((x1,y1), (x2,y2), (x3,y3)) =\n      x1==(x2+1) && y1==y2 && x2==x3 && y2==(y3+1)\n\n\n------------Parsing bytesting--------------------------------------\nreadCoordinates :: BS.ByteString -> Maybe [Point]\nreadCoordinates str =\n  (\\[a,b,c,d,e,f]->[(a,b),(c,d),(e,f)]) <$> readIntArray 6 str\n\nreadIntArray :: Int -> BS.ByteString -> Maybe [Int]\nreadIntArray n str\n  | n == 0 =\n      if BS.null str then Just [] else Nothing\n  | Nothing <- curVal =\n      Nothing\n  | Just (v, leftStr) <- curVal =\n      (v:) <$> readIntArray (n-1) (BS.dropWhile isSpace leftStr)\n  where\n    curVal = BS.readInt str\n\n-----Check if output file contains given lines---------\ncheckLength :: Int -> [BS.ByteString] -> Maybe [BS.ByteString]\ncheckLength len input =\n  if length input == len then\n    Just input\n  else\n    Nothing\n\ntrimWhiteSpace :: BS.ByteString -> BS.ByteString\ntrimWhiteSpace = BS.reverse. BS.dropWhile isSpace. BS.reverse\n", 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2016-09-01T16:34:30.000Z", 
        "author_name": "pkacprzak", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Hard", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Mom has to go to work and she doesn't want little Johnny to get bored. So she gives him a simple puzzle to solve. She also tells him that he can play a PC game only if he solves this problem. Johnny loves PC games and wants to solve this puzzle quickly. So he asks you for help.  </p>\n\n<p>You are given a square <em>NxN</em> board divided into single cells, where <em>N</em> is always a power of 2. You are also given an infinite number of L-shaped trominoes:  </p>\n\n<p><img src=\"http://hr-challenge-images.s3.amazonaws.com/4022/tromino.png\" alt=\"tromino\" title=\"\"></p>\n\n<p>Note that each tromino can covers three cells.</p>\n\n<p>The board has one special cell <em>S</em> on which you are not allowed to place any tromino. Your task is to cover the whole board with trominoes in such a way that any two trominoes don't overlap, and every cell (except cell <em>S</em>) is covered by some tromino.  </p>\n\n<p>Indexing starts from 1, and top-left cell is indexed (1, 1).</p>\n\n<p><strong>Input</strong> <br>\nIn the first line, there is an integer <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"2.442ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1051.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></svg></span>. <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"8.284ex\" height=\"2.676ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -1006.6 3566.6 1152.1\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path><g transform=\"translate(1166,0)\"><path stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g transform=\"translate(2222,0)\"><path stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><g transform=\"translate(500,393)\"><path stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></span> denotes the size of the board. <br>\nIn the second line, there are two integers, <em>r c</em>, denoting the row and the column of cell <em>S</em>.</p>\n\n<p><strong>Output</strong> <br>\nFor every tromino placed, print one line containing 6 space separated numbers, denoting the coordinates (in row major form) of 3 cells covered by this block.</p>\n\n<p><strong>Constraints</strong></p>\n\n<ul>\n<li><span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"10.964ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 4720.6 1008.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(1834,0)\"><path stroke-width=\"1\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g><g transform=\"translate(3163,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(4220,0)\"><path stroke-width=\"1\" d=\"M352 287Q304 211 232 211Q154 211 104 270T44 396Q42 412 42 436V444Q42 537 111 606Q171 666 243 666Q245 666 249 666T257 665H261Q273 665 286 663T323 651T370 619T413 560Q456 472 456 334Q456 194 396 97Q361 41 312 10T208 -22Q147 -22 108 7T68 93T121 149Q143 149 158 135T173 96Q173 78 164 65T148 49T135 44L131 43Q131 41 138 37T164 27T206 22H212Q272 22 313 86Q352 142 352 280V287ZM244 248Q292 248 321 297T351 430Q351 508 343 542Q341 552 337 562T323 588T293 615T246 625Q208 625 181 598Q160 576 154 546T147 441Q147 358 152 329T172 282Q197 248 244 248Z\"></path></g></g></svg></span></li>\n<li><span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-4-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"13.57ex\" height=\"3.009ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -1006.6 5842.8 1295.7\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(1834,0)\"><path stroke-width=\"1\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"></path></g><g transform=\"translate(2286,0)\"><path stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"></path></g><g transform=\"translate(2731,0)\"><path stroke-width=\"1\" d=\"M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z\"></path></g><g transform=\"translate(3442,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(4498,0)\"><path stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><g transform=\"translate(500,393)\"><path stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z\"></path></g></g></g></svg></span></li>\n</ul>\n\n<p><strong>Note</strong>  </p>\n\n<ul>\n<li>You are also allowed to rotate the trominoes.</li>\n<li>There may be multiple solution for a case. All valid solutions will be considered correct.</li>\n</ul>\n\n<p><strong>Sample Input #00</strong></p>\n\n<pre><code>1\n2 2\n</code></pre>\n\n<p><strong>Sample Output #00</strong></p>\n\n<pre><code>1 1 1 2 2 1\n</code></pre>\n\n<p><strong>Sample Input #01</strong>  </p>\n\n<pre><code>2\n1 1\n</code></pre>\n\n<p><strong>Sample Output #01</strong>  </p>\n\n<pre><code>2 3 3 2 3 3\n1 2 2 1 2 2\n1 3 1 4 2 4\n3 1 4 1 4 2\n3 4 4 3 4 4\n</code></pre>\n\n<p><strong>Explanation #00</strong> <br>\n<em>Sample Case #00:</em> Since you are not allowed to cover bottom-right cell, you will cover points (1,1), (1,2) &amp; (2,1) with a single tromino.</p>\n\n<pre><code>    1   2\n1 | 1 | 1 |\n2 | 1 | x |\n</code></pre>\n\n<p><em>Sample Case #01:</em> Since <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-5-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"11.64ex\" height=\"2.676ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -1006.6 5011.5 1152.1\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path><g transform=\"translate(1166,0)\"><path stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g transform=\"translate(2222,0)\"><path stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path><g transform=\"translate(500,393)\"><path stroke-width=\"1\" transform=\"scale(0.707)\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"></path></g></g><g transform=\"translate(3454,0)\"><path stroke-width=\"1\" d=\"M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z\"></path></g><g transform=\"translate(4511,0)\"><path stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></svg></span>, board is of size <span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-6-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.655ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1573.5 936.9\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path><g transform=\"translate(500,0)\"><path stroke-width=\"1\" d=\"M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z\"></path></g><g transform=\"translate(1073,0)\"><path stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"></path></g></g></svg></span> and you are not allowed cover top-left cell. You will need 5 trominoes to cover whole board, except cell (1, 1).</p>\n\n<ol>\n<li><code>2 3 3 2 3 3</code>: This tromino will cover points (2, 3), (3, 2), (3, 3).</li>\n<li><code>1 2 2 1 2 2</code>: This tromino will cover points (1, 2), (2, 1), (2, 2).</li>\n<li><code>1 3 1 4 2 4</code>: This tromino will cover points (1, 3), (1, 4), (2, 4).</li>\n<li><code>3 1 4 1 4 2</code>: This tromino will cover points (3, 1), (4, 1), (4, 2).</li>\n<li><code>3 4 4 3 4 4</code>: This tromino will cover ponits (3, 4), (4, 3), (4, 4).</li>\n</ol>\n\n<p>.</p>\n\n<pre><code>    1   2   3   4\n1 | x | 2 | 3 | 3 |\n2 | 2 | 2 | 1 | 3 |\n3 | 4 | 1 | 1 | 5 |\n4 | 4 | 4 | 5 | 5 |\n</code></pre>\n\n<p>Note that there can be multiple configurations to this input, and all will be considered correct</p>\n\n<hr>\n\n<p><strong>Tested by</strong> <a href=\"/wanbo\">Wanbo</a></p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 4022, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "haskell", 
            "clojure", 
            "scala", 
            "erlang", 
            "sbcl", 
            "ocaml", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": true, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": true, 
        "can_be_viewed": true, 
        "track": {
            "name": "Ad Hoc", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 41, 
            "rewards_system_enabled": null, 
            "slug": "misc"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-05-06T21:53:49.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1409898600, 
            "timezone": "PST", 
            "disable_forum": false, 
            "id": 1109, 
            "primary_track_id": 5, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": false, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "A contest for functional programming enthusiasts.", 
            "effective_epoch_endtime": 1410762600, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Functional Programming", 
                "id": 5, 
                "priority": 2, 
                "descriptions": "The art of programming with expressions and functions. Experience the challenge of programming without state. A good paradigm for those interested in Map-Reduce and parallel computing.", 
                "rewards_system_enabled": null, 
                "slug": "fp"
            }, 
            "primary_tag_id": null, 
            "hide_navigation": null, 
            "show_penalty": true, 
            "effective_time_left": -92594268.85627516, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "The contest hosts 7 challenges ranging from algorithms to logics to compilers. \n<br><br>\n\n<strong>Problem Setters</strong> <a href=\"/pkacprzak\">Pawe\u0139 Kacprzak</a>, <a href=\"/jspha\">Joseph Abrahamson</a>, <a href=\"https://www.hackerrank.com/wanbo\">Wanbo</a>, <a href=\"/abhiranjan\">Abhiranjan</a>.\n<br><br>\n<strong>Validators</strong> <a href=\"https://www.hackerrank.com/Javran\">Javran (Fang) Cheng</a>, <a href=\"https://www.hackerrank.com/shaka_shadows\">Ray Williams Robinson Valiente</a>, <a href=\"https://www.hackerrank.com/wanbo\">Wanbo</a>, <a href=\"/abhiranjan\">Abhiranjan</a>.\n<br><br>\n<strong>Languages allowed</strong>: <i>Haskell, Scala, Lisp, Erlang, Clojure, OCaml and F#.</i>\n<br><br>\n<strong>Want to contribute problems?</strong> Mail to <a href=\"mailto:hackers@hackerrank.com?subject=Lambda Calculi\">hackers@hackerrank.com</a> with the subject \"Lambda Calculi\".", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -92594268.84867738, 
            "challenges_count": 7, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": false, 
            "endtime": "2014-09-15T06:30:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "lambda-calculi-sep14", 
            "hide_leaderboard": null, 
            "kind": "", 
            "comment_live_sync": null, 
            "name": "Functional Programming Contest - September'14", 
            "is_multi_round": false, 
            "created_at": "2014-07-22T16:27:04.000Z", 
            "epoch_endtime": 1410762600, 
            "company_associated_contest": null, 
            "rating_category": null, 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-09-05T06:30:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 181
        }, 
        "factor": 80, 
        "is_solution_unlocked": false, 
        "preview": "Help little Johnny with the puzzle.", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 1.0, 
        "difficulty_score": "0.05", 
        "difficulty": 0.5, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 80, 
        "slug": "puzzle-and-pc", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 91, 
        "name": "Puzzle and PC", 
        "is_preview_contest": false, 
        "level": 77, 
        "success_ratio": 0.9230769230769231, 
        "total_count": 91, 
        "created_at": "2014-08-29T19:51:24.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": null, 
        "countdown_time": 0, 
        "author_avatar": "https://secure.gravatar.com/avatar/987009fca9c36d9b67be61070ccbfbc9?d=https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg&s=150", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": "haskell"
    }
}
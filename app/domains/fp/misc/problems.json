{
    "models": [
        {
            "onboarding": null, 
            "solved_count": 1408, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:26:18.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 2371, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Help bunnies meet again.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 20, 
            "slug": "jumping-bunnies", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Jumping Bunnies", 
            "level": 41, 
            "success_ratio": 0.9125081011017498, 
            "total_count": 1543, 
            "created_at": "2014-04-15T19:56:59.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2936, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:29:21.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 3054, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Help Chen in rotating string.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9822222222222222, 
            "active": true, 
            "max_score": 20, 
            "slug": "rotate-string", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Rotate String", 
            "level": 34, 
            "success_ratio": 0.9898853674983142, 
            "total_count": 2966, 
            "created_at": "2014-06-16T19:02:52.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2157, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:23:00.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 3223, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": "Remove redundant characters from string", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9668508287292817, 
            "active": true, 
            "max_score": 10, 
            "slug": "remove-duplicates", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Remove Duplicates", 
            "level": 33, 
            "success_ratio": 0.9885426214482127, 
            "total_count": 2182, 
            "created_at": "2014-07-05T19:30:20.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 843, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:30:24.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 1852, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Calculate gcd of two list of numbers.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.8907563025210085, 
            "active": true, 
            "max_score": 30, 
            "slug": "huge-gcd-fp", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Huge GCD", 
            "level": 58, 
            "success_ratio": 0.8808777429467085, 
            "total_count": 957, 
            "created_at": "2014-02-06T14:48:46.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 419, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-15T02:53:37.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 3284, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "How much time will Kundu take to pop the whole wrap ?", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 50, 
            "slug": "kundu-and-bubble-wrap", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Kundu And Bubble Wrap", 
            "level": 61, 
            "success_ratio": 0.9436936936936937, 
            "total_count": 444, 
            "created_at": "2014-07-16T11:48:18.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python"
        }, 
        {
            "onboarding": null, 
            "solved_count": 879, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:36:05.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 1589, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Can you find the missing numbers?", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.823170731707317, 
            "active": true, 
            "max_score": 30, 
            "slug": "missing-numbers-fp", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Missing Numbers (FP)", 
            "level": 47, 
            "success_ratio": 0.8711595639246779, 
            "total_count": 1009, 
            "created_at": "2013-12-23T08:37:27.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 671, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:24:23.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 2108, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Find the common divisors between two integers.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.8064516129032258, 
            "active": true, 
            "max_score": 20, 
            "slug": "common-divisors", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Common Divisors", 
            "level": 60, 
            "success_ratio": 0.8356164383561644, 
            "total_count": 803, 
            "created_at": "2014-03-13T00:49:10.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 207, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:32:40.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 2412, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Time for a treat.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7567567567567568, 
            "active": true, 
            "max_score": 50, 
            "slug": "mango", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Mangoes", 
            "level": 79, 
            "success_ratio": 0.708904109589041, 
            "total_count": 292, 
            "created_at": "2014-04-20T10:49:39.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 102, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-03-09T10:34:52.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 2526, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Pin bowling", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.3, 
            "active": true, 
            "max_score": 80, 
            "slug": "game-of-kyles", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Game of Kyles", 
            "level": 86, 
            "success_ratio": 0.5340314136125655, 
            "total_count": 191, 
            "created_at": "2014-05-14T13:52:46.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 331, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:27:55.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 2376, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Find the minimal subset with sum not less than S.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 20, 
            "slug": "subset-sum", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Subset Sum", 
            "level": 65, 
            "success_ratio": 0.6073394495412844, 
            "total_count": 545, 
            "created_at": "2014-04-16T14:22:04.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 37, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:36:47.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 2559, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 200, 
            "is_solution_unlocked": false, 
            "preview": null, 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.1, 
            "active": true, 
            "max_score": 200, 
            "slug": "elementary-watson", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Elementary Watson", 
            "level": 93, 
            "success_ratio": 0.8604651162790697, 
            "total_count": 43, 
            "created_at": "2014-05-28T10:41:52.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 414, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:31:52.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 4488, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Build troop for Captain Prime", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 30, 
            "slug": "captain-prime", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Captain Prime", 
            "level": 68, 
            "success_ratio": 0.9387755102040817, 
            "total_count": 441, 
            "created_at": "2014-09-27T23:34:32.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 84, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:34:30.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 4022, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "{-# LANGUAGE DeriveGeneric #-}\n-- {{{\nmodule Main where\n\nimport Data.List\nimport Data.Char\nimport qualified Data.ByteString.Lazy as B\nimport qualified Data.ByteString.Char8 as BS -- BS.getContents\nimport Control.Applicative\nimport Text.Printf                           -- printf \"%0.6f\" (1.0)\nimport Control.Monad\nimport Data.Aeson\nimport Data.Maybe\nimport GHC.Generics\n-- }}}\n\ndata Testcase_sources = Testcase_sources {\n      kind :: String\n    , meta :: String\n    , path :: String\n  } deriving (Show, Generic)\n\ninstance FromJSON Testcase_sources\n\ndata Request = Reqest {\n      --expected_outputs:: [String]\n      testcase_sources :: [Testcase_sources]\n  } deriving (Show, Generic)\n\ninstance FromJSON Request\nmain :: IO ()\nmain =\n  liftM (takeWhile (not. isSpace). dropWhile isSpace) getContents >>=\n  \\runDir -> (B.readFile. (runDir ++) $\"request.json\") >>=\n  return. (\\(Right x) -> testcase_sources x). (eitherDecode :: B.ByteString -> Either String Request ) >>=\n  \\files -> forM (let len = length files in [0 .. (len-1)])  (tmpFunc runDir) >>=\n  \\status -> print (getScore status) >>\n  (putStrLn. unwords. map show $status) \n  where\n    getScore testStatus = (fromIntegral. sum$ testStatus) / genericLength testStatus\n    tmpFunc runDir idx = do\n      input <- readFile. (runDir++). printf \"input%05d.in\" $ idx\n      output <- BS.readFile. (runDir++). printf \"output%05d.out\" $ idx\n      validate input output\n\n\ntype Point = (Int, Int)\ntype Tromino = (Point, Point, Point)\n\nvalidate inputStr outputStr =\n  if isJust (isValidInput inputStr outputStr) then\n    return 1\n  else\n    return 0\n\n--isValid :: String -> BS.ByteString -> Bool\nisValidInput inputStr outputStr =\n  checkLength inpLen str              >>=\n  sequence. map readCoordinates       >>=\n  getTrominos n (r,c)\n  where\n    str = BS.lines. trimWhiteSpace $ outputStr\n    [m, r, c] = map read. words $ inputStr\n    n = 2^m\n    inpLen = ((n*n)-1)`div`3\n\n------------Parsing trominoes from [[Int]]--------------\ngetTrominos :: Int -> Point -> [[Point]] -> Maybe [Tromino]\ngetTrominos n (r, c) arr =\n  if any (\\x -> length x > 1). group. sort. concat $ arr then\n    Nothing\n  else\n    sequence. map getTrominos' $ arr\n  where\n    isOutofRange (x, y) = x < 1 || x > n || y < 1 || y > n\n    getTrominos' xs@[(a,b),(c1,d),(e,f)]\n      | (a,b)==(r,c) || (c1,d)==(r,c) || (e,f)==(r,c) = Nothing\n      | any isOutofRange xs                           = Nothing\n      | otherwise = isValidTromino ((a, b), (c1, d), (e, f))\n\nisValidTromino :: Tromino -> Maybe Tromino\nisValidTromino t\n  | or [isT p | p <- permute t] = Just t\n  | otherwise                   = Nothing\n  where\n    permute (x,y,z)=[(x,y,z),(x,z,y),(y,x,z),(y,z,x),(z,x,y),(z,y,x)]\n    isT :: Tromino -> Bool\n    isT p = isT1 p || isT2 p || isT3 p || isT4 p\n    isT1 ((x1,y1), (x2,y2), (x3,y3)) =\n      x1==x2 && y1==(y2+1) && (x2+1)==x3 && y2==y3\n    isT2 ((x1,y1), (x2,y2), (x3,y3)) =\n      (x1+1)==x2 && y1==y2 && x2==x3 && y3==(y2+1)\n    isT3 ((x1,y1), (x2,y2), (x3,y3)) =\n      x1==x2 && y2==(y1+1) && (x3+1)==x2 && y2==y3\n    isT4 ((x1,y1), (x2,y2), (x3,y3)) =\n      x1==(x2+1) && y1==y2 && x2==x3 && y2==(y3+1)\n\n\n------------Parsing bytesting--------------------------------------\nreadCoordinates :: BS.ByteString -> Maybe [Point]\nreadCoordinates str =\n  (\\[a,b,c,d,e,f]->[(a,b),(c,d),(e,f)]) <$> readIntArray 6 str\n\nreadIntArray :: Int -> BS.ByteString -> Maybe [Int]\nreadIntArray n str\n  | n == 0 =\n      if BS.null str then Just [] else Nothing\n  | Nothing <- curVal =\n      Nothing\n  | Just (v, leftStr) <- curVal =\n      (v:) <$> readIntArray (n-1) (BS.dropWhile isSpace leftStr)\n  where\n    curVal = BS.readInt str\n\n-----Check if output file contains given lines---------\ncheckLength :: Int -> [BS.ByteString] -> Maybe [BS.ByteString]\ncheckLength len input =\n  if length input == len then\n    Just input\n  else\n    Nothing\n\ntrimWhiteSpace :: BS.ByteString -> BS.ByteString\ntrimWhiteSpace = BS.reverse. BS.dropWhile isSpace. BS.reverse\n", 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Help little Johnny with the puzzle.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 1.0, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 80, 
            "slug": "puzzle-and-pc", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Puzzle and PC", 
            "level": 77, 
            "success_ratio": 0.9230769230769231, 
            "total_count": 91, 
            "created_at": "2014-08-29T19:51:24.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "haskell"
        }, 
        {
            "onboarding": null, 
            "solved_count": 28, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:43:09.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 5507, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "{-# LANGUAGE DeriveGeneric #-}\n\nmodule Main where\n\nimport           Control.Applicative\nimport           Control.Arrow\nimport           Control.Monad\nimport           Data.Aeson\nimport qualified Data.ByteString.Lazy as B\nimport           Data.Char\nimport           Data.List\nimport           GHC.Generics\nimport           Text.Printf -- printf \"%0.6f\" (1.0)\n\ndata Request = Reqest {\n    expected_outputs :: [String]\n  } deriving (Show, Generic)\n\ninstance FromJSON Request\n\ngrade :: String -> String -> Double\ngrade actual expected = errs / len\n  where errs = sum (zipWith errorMap actual expected)\n        len = fromIntegral (length expected)\n        errorMap a b = if a == b then 1 else 0\n\nvalidate :: String -> String -> String -> Double\nvalidate input1 output1 expOutput1 =\n  case (output, expOutput) of\n    ([o], [e]) -> grade o e\n    _          -> 0\n  where\n    input     = lines. trimSpaces $ input1\n    output    = lines. trimSpaces $ output1\n    expOutput = lines. trimSpaces $ expOutput1\n\ntrimSpaces :: String -> String\ntrimSpaces = reverse. dropWhile isSpace. reverse\n\nfromRight :: Either a b -> b\nfromRight (Right x) = x\n\nmean :: [Double] -> Double\nmean xs = sum xs / genericLength xs\n\nmain :: IO ()\nmain = do\n  subDir <- filter isPrint <$>getContents\n  jsonContent <- B.readFile (subDir ++ \"request.json\")\n  let\n    expOutputs :: [String]\n    expOutputs = expected_outputs. fromRight. eitherDecode $ jsonContent\n  scores <- forM (zip [(0::Int)..] expOutputs) $ \\(idx, expOutput) -> do\n    --input  <- readFile (subDir ++ printf \"input%05d.in\"   idx)\n    output <- readFile (subDir ++ printf \"output%05d.out\" idx)\n    return (validate \"\" output expOutput)\n  print (mean scores)\n  putStrLn (unwords. map show $ scores)\n\n", 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 200, 
            "is_solution_unlocked": false, 
            "preview": "Convolutional codes are a mechanism for sending messages across an unreliable channel with minimal recipient confusion. Encoding is carried out using a shift register model and decoding is carried out using a probabilistic model with fast posterior maximization via the Viterbi algorithm.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Ad Hoc", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 41, 
                "rewards_system_enabled": null, 
                "slug": "misc"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.2, 
            "difficulty": 0.1, 
            "active": true, 
            "max_score": 200, 
            "slug": "convolutional-coding", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "[Approximate Challenge] Convolutional Coding", 
            "level": 95, 
            "success_ratio": 0.9032258064516129, 
            "total_count": 31, 
            "created_at": "2014-12-09T19:18:00.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "haskell"
        }
    ], 
    "tutorial_signed_up": true, 
    "current_track": {
        "name": "Functional Programming", 
        "id": 5, 
        "priority": 2, 
        "descriptions": "The art of programming with expressions and functions. Experience the challenge of programming without state. A good paradigm for those interested in Map-Reduce and parallel computing.", 
        "rewards_system_enabled": null, 
        "slug": "fp"
    }, 
    "total": 14
}
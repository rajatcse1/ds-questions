{
    "models": [
        {
            "onboarding": null, 
            "solved_count": 530, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:22:34.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 1405, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Find total number of Binary Search Tree possible with N nodes.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 20, 
            "slug": "number-of-binary-search-tree", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Number of Binary Search Tree", 
            "level": 39, 
            "success_ratio": 0.9137931034482759, 
            "total_count": 580, 
            "created_at": "2013-12-02T13:05:30.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 924, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:26:23.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 2520, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Find N'th pentagonal number.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.8461538461538461, 
            "active": true, 
            "max_score": 30, 
            "slug": "pentagonal-numbers", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Pentagonal Numbers", 
            "level": 51, 
            "success_ratio": 0.8635514018691589, 
            "total_count": 1070, 
            "created_at": "2014-05-13T19:41:39.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 190, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:34:24.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Advanced", 
            "id": 2374, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 80, 
            "is_solution_unlocked": false, 
            "preview": "Who eats the best chocolate.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.3, 
            "active": true, 
            "max_score": 80, 
            "slug": "bitter-chocolate", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Bitter Chocolate", 
            "level": 72, 
            "success_ratio": 0.945273631840796, 
            "total_count": 201, 
            "created_at": "2014-04-16T11:10:44.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 1297, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-06-09T15:22:25.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 1343, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Find n'th fibonacci number.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.8828571428571429, 
            "active": true, 
            "max_score": 30, 
            "slug": "fibonacci-fp", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Fibonacci", 
            "level": 28, 
            "success_ratio": 0.9159604519774012, 
            "total_count": 1416, 
            "created_at": "2013-11-23T09:43:20.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 227, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-03-10T08:53:18.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 2152, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Find multiples to reach `N`.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 50, 
            "slug": "reverse-factorization", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Reverse Factorization", 
            "level": 67, 
            "success_ratio": 0.850187265917603, 
            "total_count": 267, 
            "created_at": "2014-03-17T22:45:59.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 491, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:24:20.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 1411, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Select K out of N lemurs.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.84, 
            "active": true, 
            "max_score": 20, 
            "slug": "different-ways-fp", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Different Ways", 
            "level": 56, 
            "success_ratio": 0.8629173989455184, 
            "total_count": 569, 
            "created_at": "2013-12-03T08:41:06.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 125, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:31:39.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 2508, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Find the maximum path sum.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7741935483870968, 
            "active": true, 
            "max_score": 50, 
            "slug": "dice-path", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Dice Path", 
            "level": 90, 
            "success_ratio": 0.7183908045977011, 
            "total_count": 174, 
            "created_at": "2014-05-12T14:03:50.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 97, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:32:47.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 3957, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Account numbers", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 50, 
            "slug": "bangalore-bank", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Bangalore Bank", 
            "level": 95, 
            "success_ratio": 0.8818181818181818, 
            "total_count": 110, 
            "created_at": "2014-08-24T18:19:12.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 99, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:33:42.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 3250, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": null, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 50, 
            "is_solution_unlocked": false, 
            "preview": "Help Sherlock traverse through maze.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 50, 
            "slug": "sherlock-and-the-maze", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Sherlock and the Maze", 
            "level": 92, 
            "success_ratio": 0.792, 
            "total_count": 125, 
            "created_at": "2014-07-10T00:55:30.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 272, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-03-10T08:45:03.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 2352, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "{-# LANGUAGE DeriveGeneric #-}\n-- {{{\nmodule Main where\n\nimport Control.Arrow\nimport Data.List\nimport Data.Char\nimport qualified Data.ByteString.Lazy as B\nimport Control.Applicative\nimport Text.Printf                           -- printf \"%0.6f\" (1.0)\nimport Control.Monad\nimport Data.Aeson\nimport GHC.Generics\n-- }}}\n\ndata Request = Reqest {\n      expected_outputs:: [String]\n  } deriving (Show, Generic)\n\ninstance FromJSON Request\n\ncheck :: (([String], [String]), [String], [String]) -> Bool\ncheck ((keys, [pass]), output, expOutput)\n  | expOutput == [\"WRONG\", \"PASSWORD\"] = expOutput == output\n  | any (`notElem` keys) output        = False\n  | concat output /= pass              = False\n  | otherwise                          =  True\ncheck _ = False\n\nvalidate :: String -> String -> String -> IO Int\nvalidate input1 output1 expOutput1\n  | n /= length output = return 0\n  | otherwise = return (if all check args then 1 else 0)\n  where\n    (n, input)= (\\([n']:rest) -> (read n'::Int, parseInput rest)). map words. lines $ input1\n    output    = map words. lines $ output1\n    expOutput = map words. lines $ expOutput1\n    args = zip3 input output expOutput\n    parseInput [] = []\n    parseInput (_:a:b:c) = (a, b): parseInput c\n\nmain :: IO ()\nmain =\n  liftM (takeWhile (not. isSpace). dropWhile isSpace) getContents >>=\n  \\runDir -> (B.readFile. (runDir ++) $\"request.json\") >>=\n  return. (\\(Right x) -> expected_outputs x). (eitherDecode :: B.ByteString -> Either String Request ) >>=\n  \\files -> forM (zip [(0::Int)..] files)  (tmpFunc runDir) >>=\n  \\status -> print (getScore status) >>\n  (putStrLn. unwords. map show $status) >>\n  (putStrLn. unwords. map show $status)\n  where\n    getScore testStatus = (fromIntegral. sum$ testStatus) / genericLength testStatus\n    tmpFunc runDir (idx, expOutput) = do\n      input <- readFile. (runDir++). printf \"input%05d.in\" $ idx\n      output <- readFile. (runDir++). printf \"output%05d.out\" $ idx\n      validate input output expOutput\n\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 40, 
            "is_solution_unlocked": false, 
            "preview": "Kittens kittens everywhere.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 40, 
            "slug": "password-cracker-fp", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Password Cracker FP", 
            "level": 63, 
            "success_ratio": 0.9679715302491103, 
            "total_count": 281, 
            "created_at": "2014-04-11T18:57:53.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "haskell"
        }, 
        {
            "onboarding": null, 
            "solved_count": 129, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-03-10T08:04:47.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Hard", 
            "id": 4495, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "{-# LANGUAGE DeriveGeneric #-}\n-- {{{\nmodule Main where\n---------------------Import-------------------------\nimport qualified Data.ByteString.Lazy as B\nimport Data.List\nimport Data.Char\nimport Control.Applicative\nimport Text.Printf                           -- printf \"%0.6f\" (1.0)\nimport Control.Monad\nimport Data.Aeson\nimport GHC.Generics\n-- }}}\n\ndata Request = Reqest {\n      expected_outputs:: [String]\n  } deriving (Show, Generic)\n\ninstance FromJSON Request\n\nmain :: IO ()\nmain =\n  liftM (takeWhile (not. isSpace). dropWhile isSpace) getContents >>=\n  \\runDir -> (B.readFile. (runDir ++) $\"request.json\") >>=\n  return. (\\(Right x) -> expected_outputs x). (eitherDecode :: B.ByteString -> Either String Request ) >>=\n  \\files -> forM (zip [(0::Int)..] files)  (tmpFunc runDir) >>=\n  \\status -> print (getScore' status) >>\n  (putStrLn. unwords. map show $status)\n  where\n    getScore' testStatus = (fromIntegral. sum$ testStatus) / genericLength testStatus\n    tmpFunc runDir (idx, expOutput) = do\n      input <- readFile. (runDir++). printf \"input%05d.in\" $ idx\n      output <- readFile. (runDir++). printf \"output%05d.out\" $ idx\n      validate input output expOutput\n\nvalidate :: String -> String -> String -> IO Int\nvalidate input1 output1 expOutput1 =\n  return $ getScore input1 output1\n\ngetScore :: String -> String -> Int\ngetScore input output =\n  case ans of\n    Just 1 -> 1\n    _      -> 0\n  where\n    ([n]: inArr:_) = map (map (read::String->Int). words). lines $ input\n    ans =\n      checkLength (10*n) output   >>=\n      tokenize                    >>=\n      matchTokens inArr           >>=\n      evaluateExpr\n\n----------------Tokenizer-------------------------------\ndata Operator = Plus | Minus | Times\n  deriving (Show, Eq)\n\noperator :: Char -> Operator\noperator '+' = Plus\noperator '-' = Minus\noperator '*' = Times\n\ndata Token =  TokNum Int\n            | TokOp  Operator\n  deriving (Show, Eq)\n\nisTokOp :: Token -> Bool\nisTokOp (TokOp _) = True\nisTokOp  _       = False\n\nnumEqualTok :: Int -> Token -> Bool\nnumEqualTok val (TokNum num) = val == num\nnumEqualTok _ _ = False\n\ncheckLength :: Int -> String -> Maybe String\ncheckLength len str\n  | length str > len+2 = Nothing\n  | otherwise          = Just str\n\nmatchTokens :: [Int] -> [Token] -> Maybe [Token]\nmatchTokens = checkContent True\n  where\n    checkContent :: Bool -> [Int] -> [Token] -> Maybe [Token]\n    checkContent _ nums toks\n      | null nums && null toks = Just []\n      | null nums || null toks = Nothing\n    checkContent isNum (n:nums) (t:toks)\n      | isNum && numEqualTok n t =\n          (t:) <$> checkContent (not isNum) nums toks\n      | not isNum && isTokOp t   =\n          (t:) <$> checkContent (not isNum) (n:nums) toks\n      | otherwise                = Nothing\n\np = 101\n\ntokenize :: String -> Maybe [Token]\ntokenize [] = Just []\ntokenize (c:cs)\n  | isSpace c = tokenize cs\n  | c == '+' = ((TokOp Plus):) <$> (tokenize cs)\n  | c == '-' = ((TokOp Minus):) <$> (tokenize cs)\n  | c == '*' = ((TokOp Times):) <$> tokenize cs\n  | isNumber c =\n      let\n        (num', cs') = span isNumber (c:cs)\n        num = read num'\n      in\n        if length num' > 7 || num < 1 || num > p-1\n        then Nothing\n        else ((TokNum num):) <$> tokenize cs'\n  | otherwise = Nothing\n\nevaluateExpr :: [Token] -> Maybe Int\nevaluateExpr (TokNum v: toks') =\n  evaluate' v undefined toks'\n  where\n    evaluate' :: Int -> Operator -> [Token] -> Maybe Int\n    evaluate' curVal _     [] = Just $ if curVal == 0 then 1 else 0\n    evaluate' curVal lstOp (TokNum val:toks)\n      | lstOp == Times = evaluate' ((curVal*val)`mod`p) undefined toks\n      | lstOp == Plus  = evaluate' ((curVal+val)`mod`p) undefined toks\n      | lstOp == Minus = evaluate' ((curVal-val)`mod`p) undefined toks\n    evaluate' curVal _      (TokOp op: toks) = evaluate' curVal op toks\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 40, 
            "is_solution_unlocked": false, 
            "preview": "Help Kazama with expressions", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.999, 
            "difficulty": 0.5, 
            "active": true, 
            "max_score": 40, 
            "slug": "expressions", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Expressions", 
            "level": 80, 
            "success_ratio": 0.7865853658536586, 
            "total_count": 164, 
            "created_at": "2014-09-28T19:43:12.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "haskell"
        }, 
        {
            "onboarding": null, 
            "solved_count": 16, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:43:10.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Expert", 
            "id": 5050, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "{-# LANGUAGE DeriveGeneric #-}\n-- {{{\nmodule Main where\n\nimport Control.Applicative\nimport Control.Monad\nimport Control.Monad.State\nimport Data.List\nimport Data.Maybe\nimport Data.Function\nimport Data.Tuple\nimport Data.Ix\nimport Data.Monoid\nimport System.Environment\nimport Text.Read hiding (lift)\n\nimport qualified Data.Map.Strict as M\nimport qualified Data.Set as S\n\nimport Control.Arrow\nimport Data.Char\nimport qualified Data.ByteString.Lazy as B\nimport Text.Printf                           -- printf \"%0.6f\" (1.0)\nimport Data.Aeson\nimport GHC.Generics\n-- }}}\n\ndata Request = Reqest {\n      expected_outputs:: [String]\n  } deriving (Show, Generic)\n\ninstance FromJSON Request\n\ntype Coord = (Int,Int)\ntype Box = M.Map String [Coord]\ntype Move = (String,(Coord,Coord))\n\ndata Problem = Problem\n    { rowN, colN  :: Int\n    , target      :: String\n    , initBox     :: Box\n    , isSolution  :: Box -> Bool\n    }\n\nnonDetMove :: [Coord -> Coord]\nnonDetMove = [ first  (+ 1)\n             , first  (subtract 1)\n             , second (+ 1)\n             , second (subtract 1)\n             ]\n\ngrow :: Problem -> Box -> String -> S.Set Coord\ngrow p box name = grow' S.empty S.empty ((:[]) .fromJust . M.lookup name $ box)\n    where\n      otherCells = mconcat (map S.fromList (M.elems (M.delete name box)))\n      grow' _ valids [] = valids\n      grow' visited valids  (x:xs)\n          | topLeft x `S.member` visited = grow' visited valids xs\n          | all (`S.notMember` otherCells) x &&\n            all (inRange ((0,0),(rowN p-1,colN p-1))) x =\n                let moves = [ map f x | f <- nonDetMove ]\n                in grow' (S.insert (topLeft x) visited)\n                         (S.insert (topLeft x) valids)\n                         (xs ++ moves)\n          | otherwise = grow' (S.insert (topLeft x) visited) valids xs\n\nvalidate :: String -> String -> String -> IO Int\nvalidate input output expOutput =\n  return $\n  if validateOutput input output expOutput\n  then 1\n  else 0\n\nvalidateOutput :: String -> String -> String -> Bool\nvalidateOutput inputStr outputStr expOutputStr = isJust validate\n    where\n      problem = parseInput inputStr\n      optimal :: Int\n      optimal = read . head . lines $ expOutputStr\n      outputs = lines outputStr\n      readMove :: String -> Maybe Move\n      readMove s = do\n          let line = words s\n          guard $ length line == 3\n          let (a:c1:c2:_) = line\n          (x1,y1) <- readMaybe c1\n          (x2,y2) <- readMaybe c2\n          return (a,((x1,y1),(x2,y2)))\n\n      performMove :: Box -> Move -> Maybe Box\n      performMove b (n,((x1,y1),(x2,y2)))= do\n          cells <- M.lookup n b\n          guard $ topLeft cells == (x1,y1)\n          guard $ (x2,y2) `S.member` grow problem b n\n          let dx = x2 - x1\n              dy = y2 - y1\n              newCells = map ((+ dx) *** (+ dy)) cells\n          return (M.insert n newCells b)\n      validate :: Maybe ()\n      validate = do\n          n <- listToMaybe outputs >>= readMaybe\n          guard $ n == optimal\n          guard $ length outputs == n+1\n          let parsedMoves = mapMaybe readMove (tail outputs)\n          guard $ length parsedMoves == n\n          finalBox <- foldM performMove (initBox problem) parsedMoves\n          guard $ isSolution problem finalBox\n\nparseInput :: String -> Problem\nparseInput = evalState parseInput' . lines\n    where\n      parseInput' :: State [String] Problem\n      parseInput' = do\n          let nextLine :: State [String] String\n              nextLine = gets head <* modify tail\n              readPair xs = let (a:b:_) = words xs in (read a, read b)\n          (m,n) <- readPair <$> nextLine\n          rawPuzzle <- map words <$> replicateM m nextLine\n          tgt <- nextLine\n          tgtCoord <- readPair <$> nextLine\n          let box = M.fromListWith (++)\n                  . filter (not . all (== '.') . fst)\n                  . map (second (:[]) . swap)\n                  . tagWithCoord $ rawPuzzle\n              isSol = (== tgtCoord) . topLeft . fromJust . M.lookup tgt\n          return (Problem m n tgt box isSol)\n      tagWithCoord = concat\n                 . zipWith (\\row ->\n                            map (\\(col,x) ->\n                                 ((row,col),x))) [0..]\n                 . map (zip [0..])\n\ntopLeft :: [Coord] -> Coord\ntopLeft = (,) <$> fst . minimumBy (compare `on` fst)\n              <*> snd . minimumBy (compare `on` snd)\n\n\nmain :: IO ()\nmain =\n  liftM (takeWhile (not. isSpace). dropWhile isSpace) getContents >>=\n  \\runDir -> (B.readFile. (runDir ++) $\"request.json\") >>=\n  return. (\\(Right x) -> expected_outputs x). (eitherDecode :: B.ByteString -> Either String Request ) >>=\n  \\files -> forM (zip [(0::Int)..] files)  (tmpFunc runDir) >>=\n  \\status -> print (getScore status) >>\n  (putStrLn. unwords. map show $status)\n  where\n    getScore testStatus = (fromIntegral. sum$ testStatus) / genericLength testStatus\n    tmpFunc runDir (idx, expOutput) = do\n      input <- readFile. (runDir++). printf \"input%05d.in\" $ idx\n      output <- readFile. (runDir++). printf \"output%05d.out\" $ idx\n      validate input output expOutput\n\n", 
            "submit_disabled": null, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 150, 
            "is_solution_unlocked": false, 
            "preview": "Slide blocks to solve the puzzle.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Memoization and DP", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 40, 
                "rewards_system_enabled": null, 
                "slug": "dp"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.99, 
            "difficulty": 0.1, 
            "active": true, 
            "max_score": 150, 
            "slug": "klotski", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Klotski", 
            "level": 99, 
            "success_ratio": 0.5517241379310345, 
            "total_count": 29, 
            "created_at": "2014-11-02T08:42:24.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "haskell"
        }
    ], 
    "tutorial_signed_up": true, 
    "current_track": {
        "name": "Functional Programming", 
        "id": 5, 
        "priority": 2, 
        "descriptions": "The art of programming with expressions and functions. Experience the challenge of programming without state. A good paradigm for those interested in Map-Reduce and parallel computing.", 
        "rewards_system_enabled": null, 
        "slug": "fp"
    }, 
    "total": 12
}
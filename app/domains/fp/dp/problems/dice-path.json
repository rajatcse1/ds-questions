{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 125, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2016-09-01T16:31:39.000Z", 
        "author_name": "gman007", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Medium", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>You are given an <em>MxN</em> grid and a 6 sided dice starting at the point (1, 1). You can only move dice toward right or down by rotating it in the respective direction. The value of the dice is the number of pips on the top face of it.</p>\n\n<p><img src=\"http://hr-challenge-images.s3.amazonaws.com/2508/Initial_Grid.png\" alt=\"Initial Grid\" title=\"\"></p>\n\n<p>If at <em>i<sup>th</sup></em> step dice is rotated to right, then new configuration will be</p>\n\n<ol>\n<li><em>Top[i]</em> = <em>Left[i-1]</em></li>\n<li><em>Bottom[i]</em> = <em>Right[i-1]</em></li>\n<li><em>Left[i]</em> = <em>Bottom[i-1]</em></li>\n<li><em>Right[i]</em> = <em>Top[i-1]</em></li>\n<li><em>Front[i]</em> = <em>Front[i-1]</em></li>\n<li><em>Back[i]</em> = <em>Back[i-1]</em></li>\n</ol>\n\n<p>Similarly, if at <em>i<sup>th</sup></em> step dice is rotated down, then new configuration will be</p>\n\n<ol>\n<li><em>Top[i]</em> = <em>Back[i-1]</em></li>\n<li><em>Bottom[i]</em> = <em>Front[i-1]</em></li>\n<li><em>Left[i]</em> = <em>Left[i-1]</em></li>\n<li><em>Right[i]</em> = <em>Right[i-1]</em></li>\n<li><em>Front[i]</em> = <em>Top[i-1]</em></li>\n<li><em>Back[i]</em> = <em>Bottom[i-1]</em></li>\n</ol>\n\n<p>Initially dice is at point (1, 1), and its top face has 1 pip, front face has 2 pips, and left face has 3 pips. <br>\nA path sum to a point is the sum of value of dice when it is rolled to that point from (1, 1). As already stated, value at the current location is the number of pips on the top face of the dice. Find the maximum path sum to (<em>M</em>, <em>N</em>).</p>\n\n<p><strong>Note</strong> <br>\nThe sum of pips at each pair of opposing sides is always 7.  </p>\n\n<p><strong>Input</strong> <br>\nThe first line contains an integer, <em>T</em>, which denotes the number of test cases. <em>T</em> lines follow. <br>\nEach of these lines contains two space separated integers, <em>M N</em>, which represent the final point in the grid.</p>\n\n<p><strong>Output</strong> <br>\nFor each test case, print the sum of maximal path to (<em>M</em>, <em>N</em>).  </p>\n\n<p><strong>Constraints</strong>  </p>\n\n<p>1 \u2264 <em>T</em> \u2264 3600 <br>\n1 \u2264 <em>M, N</em> \u2264 60  </p>\n\n<p><strong>Sample Input #00</strong>  </p>\n\n<pre><code>4\n2 2\n1 2\n2 1\n3 3\n</code></pre>\n\n<p><strong>Sample Output #00</strong>  </p>\n\n<pre><code>9\n4\n6\n19\n</code></pre>\n\n<p><strong>Explanation</strong> <br>\n<em>Case #00:</em> There are two ways to reach (2, 2). Both's sum will be 9.</p>\n\n<pre><code>Position :    (1, 1) -&gt; (1, 2) -&gt; (2, 2)\nDirection:          Right     Down\nValue    :      1    +    3    +    5     =    9\n</code></pre>\n\n<p><em>Case #01:</em> Dice has to roll toward right only one time.</p>\n\n<pre><code>Position :    (1, 1) -&gt; (1, 2)\nDirection:          Right\nValue    :      1    +    3      =    4\n</code></pre>\n\n<p><em>Case #02:</em> Dice has to roll down only one time.</p>\n\n<pre><code>Position :    (1, 1) -&gt; (2, 1)\nDirection:          Down\nValue    :      1    +    5      =    6\n</code></pre>\n\n<p><em>Case #03:</em> There are six ways in which dice can be rotated to (3, 3)</p>\n\n<pre><code>Position :    (1, 1) -&gt; (1, 2) -&gt; (1, 3) -&gt; (2, 3) -&gt; (3, 3)\nDirection:          Right     Right     Down      Down\nValue    :      1    +    3    +     6   +    5    +    1    = 16\n\nPosition :    (1, 1) -&gt; (1, 2) -&gt; (2, 2) -&gt; (2, 3) -&gt; (3, 3)\nDirection:          Right     Down      Right     Down\nValue    :      1    +    3    +     5   +    6    +    4    = 19\n\nPosition :    (1, 1) -&gt; (1, 2) -&gt; (2, 2) -&gt; (3, 2) -&gt; (3, 4)\nDirection:          Right     Down      Down      Right\nValue    :      1    +    3    +     5   +    4    +    6    = 19\n\nPosition :    (1, 1) -&gt; (2, 1) -&gt; (2, 2) -&gt; (2, 3) -&gt; (3, 3)\nDirection:          Down      Right     Right     Down\nValue    :      1    +    5    +     3   +    2    +    6    = 17\n\nPosition :    (1, 1) -&gt; (2, 1) -&gt; (2, 2) -&gt; (3, 2) -&gt; (3, 3)\nDirection:          Down      Right     Down      Right\nValue    :      1    +    5    +     3   +    6    +    2    = 17\n\nPosition :    (1, 1) -&gt; (2, 1) -&gt; (3, 1) -&gt; (3, 2) -&gt; (3, 3)\nDirection:          Down      Down      Right     Right\nValue    :      1    +    5    +     6   +    3    +    1    = 16\n</code></pre>\n\n<p>So (Right, Down, Right, Down) or (Right, Down, Down, Right) will be best rotations for this case.</p>\n\n<hr>\n\n<p><em>Tested by:</em> <a href=\"/abhiranjan\">abhiranjan</a></p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 2508, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "haskell", 
            "clojure", 
            "scala", 
            "erlang", 
            "sbcl", 
            "ocaml", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": null, 
        "can_be_viewed": true, 
        "track": {
            "name": "Memoization and DP", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 40, 
            "rewards_system_enabled": null, 
            "slug": "dp"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-05-06T21:52:39.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1403245800, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 950, 
            "primary_track_id": 5, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": null, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "A contest for functional programming enthusiasts.", 
            "effective_epoch_endtime": 1404109800, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Functional Programming", 
                "id": 5, 
                "priority": 2, 
                "descriptions": "The art of programming with expressions and functions. Experience the challenge of programming without state. A good paradigm for those interested in Map-Reduce and parallel computing.", 
                "rewards_system_enabled": null, 
                "slug": "fp"
            }, 
            "primary_tag_id": null, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -99247019.74886255, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "Functional programming is an elegant programming style where we use functional languages to write mathematically pure functions. The outputs of these pure functions depend only on the input parameters and not on the state of the program. Hence, these programs have almost negligible side effects.  \n<br>  \n<br>  \n<strong>Problem Setters</strong> <a href=\"/boleyn_su\"> Boleyn Su</a>, <a href=\"/AlMag\">Alex</a>, <a href=\"/gman007\">Grant Boudreaux</a>, <a href=\"/deepakgupta\">Deepak Gupta</a> and <a href=\"/abhiranjan\">Abhiranjan</a>.  \n<br>  \n\n<strong>Problem Testers</strong>  <a href=\"/scturtle\">scturtle</a>, <a href=\"/stimim\">Stimim Chen</a>, <a href=\"/darkshadows\">Lalit Kundu</a> and <a href=\"/abhiranjan\">Abhiranjan</a>. \n<br>  \n<br>\nYou can solve this contest in any of these functional languages: <i>Haskell, Scala, Lisp, Erlang, Clojure, OCaml and F#</i>.", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -99247019.73978378, 
            "challenges_count": 5, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2014-06-30T06:30:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "lambda-calculi-jun14", 
            "hide_leaderboard": null, 
            "kind": null, 
            "comment_live_sync": null, 
            "name": "Functional Programming Contest - June'14", 
            "is_multi_round": false, 
            "created_at": "2014-05-27T12:24:32.000Z", 
            "epoch_endtime": 1404109800, 
            "company_associated_contest": null, 
            "rating_category": null, 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-06-20T06:30:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 153
        }, 
        "factor": 50, 
        "is_solution_unlocked": false, 
        "preview": "Find the maximum path sum.", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.263", 
        "difficulty": 0.7741935483870968, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 50, 
        "slug": "dice-path", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 174, 
        "name": "Dice Path", 
        "is_preview_contest": false, 
        "level": 90, 
        "success_ratio": 0.7183908045977011, 
        "total_count": 174, 
        "created_at": "2014-05-12T14:03:50.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": null, 
        "countdown_time": 0, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/cf1de7c1-76c3-4f4a-bddd-c569a24deb37/150x150.png", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
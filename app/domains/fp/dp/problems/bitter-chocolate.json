{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 190, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2016-09-01T16:34:24.000Z", 
        "author_name": "abhiranjan", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Advanced", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Shashank and Arpith are both fond of chocolate, where a chocolate bar can be represented as a <em>3xN</em> block of bars. On a particular day the leftmost-lowest block has been mixed with a very bitter ingredient by a not-so-good Prashant. He then gave that chocolate to them and told about this.</p>\n\n<p>Prashant asked them to play a game with it, where a move of game consists of eating a block of bar along with all the blocks of bar which lies on the right and above it. Player alternate moves, and the person who eats the leftmost-lowest (bitter) block of bar is declared loser.</p>\n\n<p><em>Example:</em> <br>\n    Let the size of chocolate be 3x8. Block (1, 1) had been bittered. Player 1 starts the game, then they alternate moves.</p>\n\n<p><em>Player 1:</em> Choses a block at (2, 6) to eat.</p>\n\n<pre><code>    _ _ _ _ _ _ _ _\n3  |_|_|_|_|_|_|_|_|\n2  |_|_|_|_|_|x|_|_|\n1  |$|_|_|_|_|_|_|_|\n    1 2 3 4 5 6 7 8\n</code></pre>\n\n<p><em>Player 2:</em> Choses a block at (3, 3) to eat.</p>\n\n<pre><code>    _ _ _ _ _\n3  |_|_|x|_|_|\n2  |_|_|_|_|_|_ _ _\n1  |$|_|_|_|_|_|_|_|\n    1 2 3 4 5 6 7 8\n</code></pre>\n\n<p><em>Player 1:</em> Choses a block at (1, 2) to eat.</p>\n\n<pre><code>    _ _\n3  |_|_|_ _ _\n2  |_|_|_|_|_|_ _ _\n1  |$|x|_|_|_|_|_|_|\n    1 2 3 4 5 6 7 8\n</code></pre>\n\n<p><em>Player 2:</em> Choses a block at (2, 1) to eat.</p>\n\n<pre><code>    _\n3  |_|\n2  |x|\n1  |$|\n    1\n</code></pre>\n\n<p><em>Player 1:</em> Doesn't have any option. So had to eat the bitter part of chocolate and be the loser.</p>\n\n<pre><code>    _\n1  |$|\n    1\n</code></pre>\n\n<p>Of course this is not an optimal game.</p>\n\n<p>As player 1 realised that he is noob after playing some steps, he asked you to help him to find whether now there exists any chance for him to win. Player 2 is expert at this game.</p>\n\n<p>Given number of bar blocks in row<sub>1</sub>, row<sub>2</sub> and row<sub>3</sub> (row<sub>1</sub> \u2265 row<sub>2</sub> \u2265 row<sub>3</sub>) and its player 1 turn, find that if from now on he plays optimally whether he can win the game or not.</p>\n\n<p><strong>Input Format</strong> <br>\nFirst line of input containts number of test cases T. Then follows T lines, each line containing three positive integers row<sub>1</sub>, row<sub>2</sub> and row<sub>3</sub>, number of blocks of bar in row 1, row 2 and row 3 respectively.</p>\n\n<p><strong>Output Format</strong> <br>\nFor each input, tell whether player 1 can win if he play optimally or not. Print <code>WIN</code> if player 1 can win, otherwise print <code>LOSE</code>.</p>\n\n<p><strong>Constraints</strong>  </p>\n\n<ul>\n<li>1 \u2264 row1 \u2264 25</li>\n<li>25 \u2265 <em>row<sub>1</sub></em> \u2265 <em>row<sub>2</sub></em> \u2265 <em>row<sub>3</sub></em> \u2265 0  </li>\n<li>Currently it's player 1' turn.  </li>\n<li>0 &lt; <em>T</em> \u2264 100  </li>\n<li>Both players play optimally.  </li>\n</ul>\n\n<p><strong>Sample Input</strong></p>\n\n<pre><code>2\n1 1 1\n2 2 1\n</code></pre>\n\n<p><strong>Sample Output</strong></p>\n\n<pre><code>WIN\nLOSE\n</code></pre>\n\n<p><strong>Explanation</strong>\n<em>Test Case #00:</em>  Player 1 can easily win this game.</p>\n\n<p><em>Player 1:</em> Eats block (2, 1).</p>\n\n<pre><code>    _\n3  |_|\n2  |x|\n1  |$|\n    1\n</code></pre>\n\n<p><em>Player 2:</em> Does'nt have any option other than to eat block (1, 1) and lose, thus Player 1 <code>WIN</code>.</p>\n\n<pre><code>    _\n1  |$|\n    1\n</code></pre>\n\n<p><em>Test Case #01:</em> Player 1 is doomed to lose this game for any of his move. Let us explain what happen if he eats block (1, 2).</p>\n\n<p><em>Player 1:</em> Eats block (1, 2)</p>\n\n<pre><code>    _\n3  |_|_\n2  |_|_|\n1  |$|x|\n    1 2\n</code></pre>\n\n<p><em>Player 2:</em> Eats block (2, 1).</p>\n\n<pre><code>    _\n3  |_|\n2  |x|\n1  |$|\n    1\n</code></pre>\n\n<p><em>Player 1:</em> Doesn't have any option other than to eat block (1, 1) and <code>LOSE</code>.</p>\n\n<pre><code>    _\n1  |$|\n    1\n</code></pre></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 2374, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "haskell", 
            "clojure", 
            "scala", 
            "erlang", 
            "sbcl", 
            "ocaml", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": null, 
        "can_be_viewed": true, 
        "track": {
            "name": "Memoization and DP", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 40, 
            "rewards_system_enabled": null, 
            "slug": "dp"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-05-06T21:51:55.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1397802600, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 826, 
            "primary_track_id": 5, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": true, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "A contest for functional programming enthusiasts.", 
            "effective_epoch_endtime": 1398666600, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Functional Programming", 
                "id": 5, 
                "priority": 2, 
                "descriptions": "The art of programming with expressions and functions. Experience the challenge of programming without state. A good paradigm for those interested in Map-Reduce and parallel computing.", 
                "rewards_system_enabled": null, 
                "slug": "fp"
            }, 
            "primary_tag_id": null, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -104690212.51955375, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "Let's code the functional way. This is a programming paradigm where we code \"what\" instead of \"how\". In this we can clearly separate \"pure\" code from \"impure\".  \n  \nYou can code in any of the functional languages, including Haskell, Scala, Lisp, Erlang, Clojure, OCaml and F#.", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -104690212.51232009, 
            "challenges_count": 5, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2014-04-28T06:30:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "lambda-calculi-apr14", 
            "hide_leaderboard": null, 
            "kind": null, 
            "comment_live_sync": null, 
            "name": "Functional Programming Contest - April'14", 
            "is_multi_round": false, 
            "created_at": "2014-04-08T19:07:16.000Z", 
            "epoch_endtime": 1398666600, 
            "company_associated_contest": null, 
            "rating_category": "Functional Programming", 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-04-18T06:30:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 142
        }, 
        "factor": 80, 
        "is_solution_unlocked": false, 
        "preview": "Who eats the best chocolate.", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.019", 
        "difficulty": 0.3, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 80, 
        "slug": "bitter-chocolate", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 201, 
        "name": "Bitter Chocolate", 
        "is_preview_contest": false, 
        "level": 72, 
        "success_ratio": 0.945273631840796, 
        "total_count": 201, 
        "created_at": "2014-04-16T11:10:44.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": null, 
        "countdown_time": 0, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/bb90185f-75e5-4069-8206-6decf4427384/150x150.png", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
{
    "models": [
        {
            "onboarding": {
                "fsharp": {
                    "solution": "open System\n\n[<EntryPoint>]\nlet main argv = \n    let a = Console.ReadLine() |> int\n    let b = Console.ReadLine() |> int\n    printfn \"%d\" (a+b)\n    0 // return an integer exit code\n", 
                    "template": "open System\n\n[<EntryPoint>]\nlet main argv = \n    let a = Console.ReadLine() |> int\n    let b = Console.ReadLine() |> int\n    // print the sum\n    0 // return an integer exit code\n"
                }, 
                "pascal": {
                    "solution": "Program solveMeFirst;\nfunction solveMeFirst(num1, num2: integer): integer;\nvar\n   result: integer;\nbegin\n   result := num1+num2;\n   solveMeFirst := result;\nend;\n\nvar A : integer;\n    B : integer;\n    Res : integer;\nbegin\n  Readln (A);\n  Readln (B);\n  Res := solveMeFirst(A,B);\n  WriteLn(Res);\nend.\n", 
                    "template": "Program solveMeFirst;\nfunction solveMeFirst(num1, num2: integer): integer;\nvar\n   result: integer;\nbegin\n\nend;\n\nvar A : integer;\n    B : integer;\n    Res : integer;\nbegin\n  Readln (A);\n  Readln (B);\n  Res := solveMeFirst(A,B);\n  WriteLn(Res);\nend.\n"
                }, 
                "haskell": {
                    "solution": "solveMeFirst a b = a + b\n\nmain = do\n    val1 <- readLn\n    val2 <- readLn\n    let sum = solveMeFirst val1 val2\n    print sum\n", 
                    "template": "solveMeFirst a b =\n\nmain = do\n    val1 <- readLn\n    val2 <- readLn\n    let sum = solveMeFirst val1 val2\n    print sum\n"
                }, 
                "csharp": {
                    "solution": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int solveMeFirst(int a, int b) { \n        return a+b;\n    }\n    static void Main(String[] args) {\n        int val1 = Convert.ToInt32(Console.ReadLine());\n        int val2 = Convert.ToInt32(Console.ReadLine());\n        int sum = solveMeFirst(val1,val2);\n        Console.WriteLine(sum);\n    }\n}      \n", 
                    "template": "using System;\nusing System.Collections.Generic;\nusing System.IO;\nclass Solution {\n    static int solveMeFirst(int a, int b) { \n\n    }\n    static void Main(String[] args) {\n        int val1 = Convert.ToInt32(Console.ReadLine());\n        int val2 = Convert.ToInt32(Console.ReadLine());\n        int sum = solveMeFirst(val1,val2);\n        Console.WriteLine(sum);\n    }\n}      \n"
                }, 
                "go": {
                    "solution": "package main\nimport \"fmt\"\n\nfunc solveMeFirst(a uint32,b uint32) uint32{\n    return (a+b)\n}\n\nfunc main() {\n    var a, b, res uint32\n    fmt.Scanf(\"%v %v\", &a,&b)\n    res = solveMeFirst(a,b)\n    fmt.Println(res)\n}\n", 
                    "template": "package main\nimport \"fmt\"\n\nfunc solveMeFirst(a uint32,b uint32) uint32{\n\n}\n\nfunc main() {\n    var a, b, res uint32\n    fmt.Scanf(\"%v %v\", &a,&b)\n    res = solveMeFirst(a,b)\n    fmt.Println(res)\n}\n"
                }, 
                "smalltalk": {
                    "solution": "solveMeFirst := [ :num1 :num2 | \n    num1 + num2 \n].\n\n\ninput := stdin.\n[input atEnd] whileFalse: [\n    a:= input nextLine asInteger.\n    b:= input nextLine asInteger.\n    res := solveMeFirst value: a value: b\n].\n(res) printNl\n", 
                    "template": "solveMeFirst := [ :num1 :num2 | \n\n].\n\n\ninput := stdin.\n[input atEnd] whileFalse: [\n    a:= input nextLine asInteger.\n    b:= input nextLine asInteger.\n    res := solveMeFirst value: a value: b\n].\n(res) printNl\n"
                }, 
                "java": {
                    "solution": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n\n    static int solveMeFirst(int a, int b) {\n        return a+b;\n   }\n\n   \n public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int _a;\n        _a = in.nextInt();\n        int _b;\n        _b = in.nextInt();\n        int sum;\n        sum = solveMeFirst(_a, _b);\n        System.out.println(sum);\n   }\n}\n", 
                    "template": "import java.io.*;\nimport java.util.*;\nimport java.text.*;\nimport java.math.*;\nimport java.util.regex.*;\n\npublic class Solution {\n\n\n    static int solveMeFirst(int a, int b) {\n   }\n\n   \n public static void main(String[] args) {\n        Scanner in = new Scanner(System.in);\n        int _a;\n        _a = in.nextInt();\n        int _b;\n        _b = in.nextInt();\n        int sum;\n        sum = solveMeFirst(_a, _b);\n        System.out.println(sum);\n   }\n}\n"
                }, 
                "lolcode": {
                    "solution": "HAI 1.2\n\nHOW IZ I SOLVEMEFIRST YR NUM1 AN YR NUM2\n  FOUND YR SUM OF NUM1 AN NUM2\nIF U SAY SO\n\nI HAS A Num1\nI HAS A Num2\nI HAS A Res\nGIMMEH Num1\nGIMMEH Num2\nRes R I IZ SOLVEMEFIRST YR Num1 AN YR Num2 MKAY\nVISIBLE Res\nKTHXBYE\n", 
                    "template": "HAI 1.2\n\nHOW IZ I SOLVEMEFIRST YR NUM1 AN YR NUM2\n\nIF U SAY SO\n\nI HAS A Num1\nI HAS A Num2\nI HAS A Res\nGIMMEH Num1\nGIMMEH Num2\nRes R I IZ SOLVEMEFIRST YR Num1 AN YR Num2 MKAY\nVISIBLE Res\nKTHXBYE\n"
                }, 
                "scala": {
                    "solution": "object Solution {\n\n    def main(args: Array[String]) {\n        println(io.Source.stdin.getLines().take(2).map(_.toInt).sum)\n    }\n}\n", 
                    "template": "object Solution {\n\n    def main(args: Array[String]) {\n\n    }\n}\n"
                }, 
                "perl": {
                    "solution": "sub solveMeFirst{\n    ($x,$y) = @_;   \n    $res = $x + $y ;\n    return $res ;   \n}\n\n\n$choise1 = <STDIN> ;\n$choise2 = <STDIN> ;\n$res = solveMeFirst($choise1 , $choise2);\nprint \"$res\" ;\n", 
                    "template": "sub solveMeFirst{\n    ($x,$y) = @_;\n    \n}\n\n\n$choise1 = <STDIN> ;\n$choise2 = <STDIN> ;\n$res = solveMeFirst($choise1 , $choise2);\nprint \"$res\" ;\n"
                }, 
                "lua": {
                    "solution": "solveMeFirst = function(a,b)\n    return a+b\nend\n\n    \na = io.read(\"*number\")\nb = io.read(\"*number\")\nres = solveMeFirst(a,b)\nprint (res)\n", 
                    "template": "solveMeFirst = function(a,b)\n\nend\n\n    \na = io.read(\"*number\")\nb = io.read(\"*number\")\nres = solveMeFirst(a,b)\nprint (res)\n"
                }, 
                "sbcl": {
                    "solution": "(defun solveMeFirst (x y)    \n    (+ x y))\n(setq a (read-line))\n(setq b (read-line))\n\n(write (solveMeFirst (parse-integer a) (parse-integer b)))\n", 
                    "template": "(defun solveMeFirst (x y)    \n    )\n(setq a (read-line))\n(setq b (read-line))\n\n(write (solveMeFirst (parse-integer a) (parse-integer b)))\n"
                }, 
                "statement": "Complete the function solveMeFirst which takes two integers and returns their sum.", 
                "objectivec": {
                    "solution": "#import <Foundation/Foundation.h>\nint solveMeFirst(int a, int b) { \n    return a+b;\n}\n \nint main (int argc, const char * argv[]) {\n    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n    int a,b,res;\n    scanf(\"%d %d\", &a, &b);\n    res = solveMeFirst(a,b);\n    printf(\"%d\", res);\n    [pool drain];\n    return 0;\n}\n", 
                    "template": "#import <Foundation/Foundation.h>\nint solveMeFirst(int a, int b) { \n\n}\n \nint main (int argc, const char * argv[]) {\n    NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];\n    int a,b,res;\n    scanf(\"%d %d\", &a, &b);\n    res = solveMeFirst(a,b);\n    printf(\"%d\", res);\n    [pool drain];\n    return 0;\n}\n"
                }, 
                "erlang": {
                    "solution": "-module(solution).\n-export([main/0]).\nsolveMeFirst(A, B) ->\n    A + B.\nmain() -> \n    {ok, [A, B]} = io:fread(\"\", \"~d~d\"),\n    Res = solveMeFirst(A,B),\n    io:format(\"~p~n\",[Res]).\n", 
                    "template": "-module(solution).\n-export([main/0]).\nsolveMeFirst(A, B) ->\n    \nmain() -> \n    {ok, [A, B]} = io:fread(\"\", \"~d~d\"),\n    Res = solveMeFirst(A,B),\n    io:format(\"~p~n\",[Res]).\n"
                }, 
                "python": {
                    "solution": "def solveMeFirst(a,b):\n  return a+b\n\n\nnum1 = input()\nnum2 = input()\nres = solveMeFirst(num1,num2)\nprint res\n", 
                    "template": "def solveMeFirst(a,b):\n    \n\n\nnum1 = input()\nnum2 = input()\nres = solveMeFirst(num1,num2)\nprint res\n"
                }, 
                "javascript": {
                    "solution": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nfunction solveMeFirst(a, b) {\n    return a+b;\n}\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _b = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = solveMeFirst(_a, _b);\n    process.stdout.write(\"\"+res+\"\\n\");\n    \n});\n", 
                    "template": "process.stdin.resume();\nprocess.stdin.setEncoding('ascii');\n\nvar __input_stdin = \"\";\nvar __input_stdin_array = \"\";\nvar __input_currentline = 0;\n\nprocess.stdin.on('data', function (data) {\n    __input_stdin += data;\n});\n\nfunction solveMeFirst(a, b) {\n\n}\nprocess.stdin.on('end', function () {\n    __input_stdin_array = __input_stdin.split(\"\\n\");\n    var res;\n    var _a = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    var _b = parseInt(__input_stdin_array[__input_currentline].trim(), 10);\n    __input_currentline += 1;\n    \n    res = solveMeFirst(_a, _b);\n    process.stdout.write(\"\"+res+\"\\n\");\n    \n});\n"
                }, 
                "php": {
                    "solution": "<?php\nfunction solveMeFirst($a,$b){\n    return $a + $b;\n}\n$handle = fopen (\"php://stdin\",\"r\");\n$_a = fgets($handle);\n$_b = fgets($handle);\n$sum = solveMeFirst((int)$_a,(int)$_b);\nprint ($sum);\nfclose($handle);\n?>\n", 
                    "template": "<?php\nfunction solveMeFirst($a,$b){\n}\n$handle = fopen (\"php://stdin\",\"r\");\n$_a = fgets($handle);\n$_b = fgets($handle);\n$sum = solveMeFirst((int)$_a,(int)$_b);\nprint ($sum);\nfclose($handle);\n?>\n"
                }, 
                "ruby": {
                    "solution": "def solveMeFirst (a, b)\n    return a+b\nend\nval1 = gets.to_i\nval2 = gets.to_i\nsum = solveMeFirst(val1,val2)\nprint (sum)\n", 
                    "template": "def solveMeFirst (a, b)\n\nend\nval1 = gets.to_i\nval2 = gets.to_i\nsum = solveMeFirst(val1,val2)\nprint (sum)\n"
                }, 
                "python3": {
                    "solution": "def solveMeFirst(a,b):\n  return a+b\n\nnum1 = int(input())\nnum2 = int(input())\nres = solveMeFirst(num1,num2)\nprint (res)\n", 
                    "template": "def solveMeFirst(a,b):\n  \n\nnum1 = int(input())\nnum2 = int(input())\nres = solveMeFirst(num1,num2)\nprint (res)\n"
                }, 
                "visualbasic": {
                    "solution": "Imports System\n\n\nModule Solution\n    Function solveMeFirst(ByVal a,b As Integer) As Integer\n        Return a+b\n    End Function\n    \n   Public Shared Sub Main()\n      Dim a As Integer \n        Dim b As Integer \n        Dim res As Integer \n        a = Console.Readline() \n        b = Console.Readline() \n        res = solveMeFirst(a,b)\n        Console.WriteLine(\"{0}\",res)\n   End Sub\nEnd Module\n", 
                    "template": "Imports System\n\n\nModule Solution\n    Function solveMeFirst(ByVal a,b As Integer) As Integer\n\n    End Function\n    \n   Public Shared Sub Main()\n      Dim a As Integer \n        Dim b As Integer \n        Dim res As Integer \n        a = Console.Readline() \n        b = Console.Readline() \n        res = solveMeFirst(a,b)\n        Console.WriteLine(\"{0}\",res)\n   End Sub\nEnd Module\n"
                }, 
                "groovy": {
                    "solution": "def solveMeFirst(a,b) { \n    a+b\n}\n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\ndef a = Integer.parseInt(br.readLine())\ndef b = Integer.parseInt(br.readLine())\ndef res = solveMeFirst(a,b)\nprintln res\n", 
                    "template": "def solveMeFirst(a,b) { \n\n}\n\nBufferedReader br = new BufferedReader(new InputStreamReader(System.in))\ndef a = Integer.parseInt(br.readLine())\ndef b = Integer.parseInt(br.readLine())\ndef res = solveMeFirst(a,b)\nprintln res\n"
                }, 
                "c": {
                    "solution": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nint solveMeFirst(int a, int b) {\n  return a+b;\n}\nint main() {\n  int num1,num2;\n  scanf(\"%d %d\",&num1,&num2);\n  int sum; \n  sum = solveMeFirst(num1,num2);\n  printf(\"%d\",sum);\n  return 0;\n}\n", 
                    "template": "#include <stdio.h>\n#include <string.h>\n#include <math.h>\n#include <stdlib.h>\n\n\nint solveMeFirst(int a, int b) {\n  \n}\nint main() {\n  int num1,num2;\n  scanf(\"%d %d\",&num1,&num2);\n  int sum; \n  sum = solveMeFirst(num1,num2);\n  printf(\"%d\",sum);\n  return 0;\n}\n"
                }, 
                "d": {
                    "solution": "import std.stdio;\nint solveMeFirst (int a,int b) {\n    return a+b;\n}\n \nvoid main()\n{\n    int a,b,res;\n    readf(\"%d %d\", &a,&b);\n    res = solveMeFirst(a,b);\n    writeln(res);\n}\n", 
                    "template": "import std.stdio;\nint solveMeFirst (int a,int b) {\n\n}\n \nvoid main()\n{\n    int a,b,res;\n    readf(\"%d %d\", &a,&b);\n    res = solveMeFirst(a,b);\n    writeln(res);\n}\n"
                }, 
                "ocaml": {
                    "solution": "let () =\n    let a = read_int() in\n    let b = read_int() in\n    print_int(a+b);\n", 
                    "template": "let () =\n    let a = read_int() in\n    let b = read_int() in\n    print_int();\n"
                }, 
                "cpp": {
                    "solution": "#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n\nint solveMeFirst(int a, int b) {\n  return a+b;\n}\nint main() {\n  int num1, num2;\n  int sum;\n  cin>>num1>>num2;\n  sum = solveMeFirst(num1,num2);\n  cout<<sum;\n  return 0;\n}\n", 
                    "template": "#include <cmath>\n#include <cstdio>\n#include <vector>\n#include <iostream>\n#include <algorithm>\nusing namespace std;\n\n\nint solveMeFirst(int a, int b) {\n}\nint main() {\n  int num1, num2;\n  int sum;\n  cin>>num1>>num2;\n  sum = solveMeFirst(num1,num2);\n  cout<<sum;\n  return 0;\n}\n"
                }, 
                "tcl": {
                    "solution": "proc sum {a b} {\n    expr {$a+$b}\n}\n\nset a [gets stdin]\nset b [gets stdin]\nset res [sum $a $b]\nputs $res\n", 
                    "template": "proc sum {a b} {\n\n}\n\nset a [gets stdin]\nset b [gets stdin]\nset res [sum $a $b]\nputs $res\n"
                }, 
                "clojure": {
                    "solution": "(defn solveMeFirst [x y]    \n    (+ x y))\n\n\n(def a (read-line))\n(def b (read-line))\n\n(println (solveMeFirst (Integer/parseInt a) (Integer/parseInt b)))\n", 
                    "template": "(defn solveMeFirst [x y]    \n    )\n\n\n(def a (read-line))\n(def b (read-line))\n\n(println (solveMeFirst (Integer/parseInt a) (Integer/parseInt b)))\n"
                }
            }, 
            "solved_count": 38274, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:23:04.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 3433, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 3, 
            "is_solution_unlocked": false, 
            "preview": "This is a special challenge to make you familiar with IO.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9832007073386384, 
            "active": true, 
            "max_score": 3, 
            "slug": "fp-solve-me-first", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Solve Me First FP", 
            "level": 0, 
            "success_ratio": 0.9871302194826297, 
            "total_count": 38773, 
            "created_at": "2014-07-31T17:57:25.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 31344, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:24:10.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 747, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": "Write code to print the 'Hello World' program.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.943840856924254, 
            "active": true, 
            "max_score": 5, 
            "slug": "fp-hello-world", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Hello World", 
            "level": 2, 
            "success_ratio": 0.9590013462244523, 
            "total_count": 32684, 
            "created_at": "2013-07-03T14:48:26.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 19244, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-04-19T15:50:17.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 748, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": "Print 'hello world' n times.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9573210768220617, 
            "active": true, 
            "max_score": 5, 
            "slug": "fp-hello-world-n-times", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Hello World N Times", 
            "level": 3, 
            "success_ratio": 0.9674240900864669, 
            "total_count": 19892, 
            "created_at": "2013-07-03T15:20:18.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 13885, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:32:19.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 755, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": "Given a list, repeat each element of the list n times.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.96878612716763, 
            "active": true, 
            "max_score": 10, 
            "slug": "fp-list-replication", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "List Replication", 
            "level": 5, 
            "success_ratio": 0.9791270009167196, 
            "total_count": 14181, 
            "created_at": "2013-07-04T11:26:18.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 12956, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:29:56.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 753, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": "Filter the array with values less than a given delimiter.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9816204051012754, 
            "active": true, 
            "max_score": 10, 
            "slug": "fp-filter-array", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Filter Array", 
            "level": 7, 
            "success_ratio": 0.9924166985829185, 
            "total_count": 13055, 
            "created_at": "2013-07-04T10:50:51.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 11072, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:34:02.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 757, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": "For a given list, remove the values from the odd positions.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9742366412213741, 
            "active": true, 
            "max_score": 10, 
            "slug": "fp-filter-positions-in-a-list", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Filter Positions in a List", 
            "level": 16, 
            "success_ratio": 0.9840903030841703, 
            "total_count": 11251, 
            "created_at": "2013-07-04T12:15:09.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 11007, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-05-30T08:09:57.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 751, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "from __future__ import division\nimport json\nimport re\nfrom sys import stdin\n\ndef check_inputs (inputs, outputs, user_outputs):\n    #inputs is a \"python list\" of all input files. Inputs contains the contents of each of these files.\n\n    is_code_works = True\n    '''\n    This is the boolean flag to check if the code works or not.\n    If you want to give a complete 0 score and give a wrong answer, set this flag to False\n    '''\n\n    scores = [ 0 for i in range( len( inputs ) ) ]\n    '''\n    This is an array of scores for each test case\n    Each element in the array should be between 0 and 1\n    We initially fill this array with 0\n    '''\n\n    testcase_status = [ 0 for i in range( len( inputs ) ) ]\n    '''\n    This is an array of status for each test case.\n    Each element in the array can be either 0 or 1\n    We initially fill this array with 0\n    '''\n\n    loop_counter = 0\n    for input_tc, output_tc, useroutput_tc in zip(inputs, outputs, user_outputs):\n        '''\n        input_tc, output_tc and useroutput_tc is the content of 1 complete file.\n        Remember to split on \"\\n\". Default split is a common mistake. Remember to trim the lines.\n        Custom checker should NEVER throw an error\n        Run it in try: except: blocks and verify input to avoid infinite time errors\n        Your code will read input_tc, output_tc and useroutput_tc\n        Your code will update is_code_works, scores[loop_counter], testcase_status[loop_counter]\n        '''\n        try:\n            n = int(input_tc.strip())\n            # Must get rid of newlines added by fsharp and erlang pretty printing or tc 1 and 2 fail\n            useroutput_tc = useroutput_tc.replace('\\n', '')\n            # array = eval(useroutput_tc.strip()) #eval won't work for Scala \"List(...)\"\n            array = re.split(\"[, ;]+\", useroutput_tc.strip(\"List()[]{} \"))\n            if len(array) == n:\n                testcase_status[loop_counter] = 1\n                scores[loop_counter] = 1\n        except:\n            raise Exception(\"check\")\n\n        loop_counter += 1\n    return is_code_works, scores, testcase_status\n\ndef process(data):\n    score = 0\n    testcase_input  = data[\"inputs\"]\n    testcase_output = data[\"expected_outputs\"]\n    user_output     = data[\"outputs\"]\n    is_code_works, scores, testcase_statuses = check_inputs(testcase_input, testcase_output, user_output)\n    if is_code_works:\n        for current_testcase_score in scores:\n            score += current_testcase_score\n    return score/len(scores), testcase_statuses\n\nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n\n    # Get the run directory for the submission we need to evaluate.\n    run_directory = stdin[-1]\n\n    # request.json contains the data submitted for the current.\n    request = json.load(open(run_directory + \"request.json\"))\n\n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n        # The list of test cases\n        \"testcases\": request[\"testcase_sources\"],\n        # The submitted language key (Eg: 5 for python)\n        \"lang\": request[\"lang\"],\n        # I'll tell you how to fill this next\n        \"expected_outputs\": request[\"expected_outputs\"],\n        \"inputs\": [],\n        \"outputs\": []\n    }\n\n    for index in range(len(request[\"testcase_sources\"])):\n        #Let's read the input00000.in files.\n        inputs = open(run_directory + \"input%05d.in\" %(index)).read()\n        data[\"inputs\"].append(inputs)\n\n        #Let's read the output00000.out files.\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n\n    # Gathered all the data we could, lets process it\n    score, testcase_status = process(data)\n\n    #Let me explain what you should even print as output of customer checker.\n    #Line 1 should be the total score for the submission\n    #Line 2 should be a list of space separated integers (0/1), which denotes testcase status of each testcase\n    #Line 3 should be a list of space separated floats, which denotes testcase score of each testcase.\n    print score\n    print \" \".join(str(i) for i in testcase_status)", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": "Print an array of n elements.", 
            "is_editorial_available": true, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 1.0, 
            "difficulty": 0.9791256400157542, 
            "active": true, 
            "max_score": 10, 
            "slug": "fp-array-of-n-elements", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Array Of N Elements", 
            "level": 11, 
            "success_ratio": 0.978139162889896, 
            "total_count": 11253, 
            "created_at": "2013-07-04T10:07:57.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python"
        }, 
        {
            "onboarding": null, 
            "solved_count": 11011, 
            "preview_format": "html", 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:34:47.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 758, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": "Reverse a list without using <code>reverse</code>", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9800995024875622, 
            "active": true, 
            "max_score": 10, 
            "slug": "fp-reverse-a-list", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Reverse a List", 
            "level": 13, 
            "success_ratio": 0.9917139511843646, 
            "total_count": 11103, 
            "created_at": "2013-07-04T12:41:12.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 10631, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:31:23.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 754, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": "Return the sum of odd elements from a list.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9793672627235214, 
            "active": true, 
            "max_score": 10, 
            "slug": "fp-sum-of-odd-elements", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Sum of Odd Elements", 
            "level": 15, 
            "success_ratio": 0.9830774921398188, 
            "total_count": 10814, 
            "created_at": "2013-07-04T11:10:09.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 10584, 
            "preview_format": "html", 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-04-20T09:27:33.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 756, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": "Count the number of elements in an array without using <code>count</code>.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9787745294353224, 
            "active": true, 
            "max_score": 10, 
            "slug": "fp-list-length", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "List Length", 
            "level": 10, 
            "success_ratio": 0.9873134328358208, 
            "total_count": 10720, 
            "created_at": "2013-07-04T11:40:05.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 10526, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:28:50.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 752, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 10, 
            "is_solution_unlocked": false, 
            "preview": "Update the values of a list with their absolute values.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9755271084337349, 
            "active": true, 
            "max_score": 10, 
            "slug": "fp-update-list", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Update List", 
            "level": 8, 
            "success_ratio": 0.9919894449156536, 
            "total_count": 10611, 
            "created_at": "2013-07-04T10:33:08.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 7955, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-12-05T14:50:13.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 485, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "import json\nfrom sys import stdin\n\ndef check_inputs (inputs, outputs,source):\n    scores = []\n    percentage = []\n    valid = []\n    maxscore = 1\n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n        if  len(inps.split()) != len(outps.split()):\n            scores.append(0)\n            percentage.append(0)\n            valid.append(0)\n        else:\n            count = 0.0\n            score = 1.0\n            wrong = 0\n            for inp, outp in zip(inps.split(), outps.split()):\n                count += 1\n                if int(10*abs(float(inp)-float(outp)))>1:\n                    score = 0.0\n            scores.append(score * maxscore)\n            #scores.append(diff)\n            percentage.append(1000)\n            if score > 0:\n            \tvalid.append(1)\n            else:\n            \tvalid.append(0)\n\n    return valid, scores, percentage\n\ndef process(data,source):\n    # Whatever you do, I am not giving any marks!\n    score = 0.0\n    valid, scores, percentage = check_inputs(data[\"expected_outputs\"], data[\"outputs\"],source)\n    for s in scores:\n        score += s\n    if score < 0:\n        score = 0\n    return score/len(scores) , valid, percentage\n\nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n\n    # Get the run directory for the submission we need to evaluate. I know,\n    # hackish right?\n\n    run_directory = stdin[-1]\n\n    # request.json contains the data submitted for the current.\n    request = json.load(open(run_directory + \"request.json\"))\n\n\n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n\n        # The list of test cases\n        \"testcases\": request[\"testcase_sources\"],\n\n        # The submitted language key (Eg: 5 for python)\n        \"lang\": request[\"lang\"],\n\n        # I'll tell you how to fill this next\n        \"expected_outputs\": request[\"expected_outputs\"],\n\n        \"outputs\": []\n    }\n\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n\n\n    # Gathered all the data we could, lets process it\n    score, testcase_status, percentage = process(data,data[\"source\"])\n\n    print score\n    print \" \".join(str(i) for i in testcase_status)\n    print \" \".join(str(i) for i in percentage)\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Evaluate e^x using Series Expansion until the first 10 terms.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 1.0, 
            "difficulty": 0.9366053169734151, 
            "active": true, 
            "max_score": 20, 
            "slug": "eval-ex", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Evaluating e^x", 
            "level": 21, 
            "success_ratio": 0.9615617067569201, 
            "total_count": 8273, 
            "created_at": "2013-03-14T14:10:28.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python"
        }, 
        {
            "onboarding": null, 
            "solved_count": 3004, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-09-01T16:36:24.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 492, 
            "has_ended": false, 
            "is_custom": true, 
            "compile_and_test": true, 
            "checker_program": "import json\nfrom sys import stdin\n\ndef check_inputs (inputs, outputs,source):\n    scores = []\n    percentage = []\n    valid = []\n    maxscore = 1\n    \n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n        if  len(inps.split()) != len(outps.split()):\n            scores.append(0)\n            percentage.append(0)\n            valid.append(0)\n        else:\n            count = 0.0\n            score = 1.0\n            wrong = 0\n            for inp, outp in zip(inps.split(), outps.split()):\n                count += 1\n                if (abs(1.0-float(inp)/float(outp))) > 0.01001:\n                    score = 0.0\n            scores.append(score * maxscore)\n            #scores.append(diff)\n            percentage.append(1000)\n            if (score>0.0):\n            \tvalid.append(1)\n            else:\n                valid.append(0)\n\n    return valid, scores, percentage\n\ndef process(data,source):\n    # Whatever you do, I am not giving any marks!\n    score = 0.0\n    valid, scores, percentage = check_inputs(data[\"expected_outputs\"], data[\"outputs\"],source)\n    for s in scores:\n        score += s\n    if score < 0:\n        score = 0.0\n\n    return score/len(scores), valid, percentage\n\nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n\n    # Get the run directory for the submission we need to evaluate. I know,\n    # hackish right?\n\n    run_directory = stdin[-1]\n\n    # request.json contains the data submitted for the current.\n    request = json.load(open(run_directory + \"request.json\"))\n\n\n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n\n        # The list of test cases\n        \"testcases\": request[\"testcase_sources\"],\n\n        # The submitted language key (Eg: 5 for python)\n        \"lang\": request[\"lang\"],\n\n        # I'll tell you how to fill this next\n        \"expected_outputs\": request[\"expected_outputs\"],\n\n        \"outputs\": []\n    }\n\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n\n\n    # Gathered all the data we could, lets process it\n    score, testcase_status, percentage = process(data,data[\"source\"])\n\n    print score\n    print \" \".join(str(i) for i in testcase_status)\n    print \" \".join(str(i) for i in percentage)\n", 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": true, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 30, 
            "is_solution_unlocked": false, 
            "preview": "Numerical Integration.\nFinding the area under a polynomial curve, and the volume of the solid obtained by revolving it.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 1.0, 
            "difficulty": 0.9036144578313253, 
            "active": true, 
            "max_score": 30, 
            "slug": "area-under-curves-and-volume-of-revolving-a-curv", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Area Under Curves and Volume of Revolving a Curve", 
            "level": 26, 
            "success_ratio": 0.9180929095354523, 
            "total_count": 3272, 
            "created_at": "2013-03-15T05:19:08.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": "python"
        }, 
        {
            "onboarding": null, 
            "solved_count": 3344, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:32:29.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 14402, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": " Reduce the given lambda calculus expression, if possible.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 5, 
            "slug": "lambda-calculus-reductions-1", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Lambda Calculus - Reductions #1", 
            "level": 0, 
            "success_ratio": 0.885593220338983, 
            "total_count": 3776, 
            "created_at": "2015-11-13T10:00:11.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 3160, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:32:30.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 14403, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": " Reduce the given lambda calculus expression, if possible.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 5, 
            "slug": "lambda-calculus-reductions-2", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Lambda Calculus - Reductions #2", 
            "level": 0, 
            "success_ratio": 0.9441290708096803, 
            "total_count": 3347, 
            "created_at": "2015-11-13T10:01:50.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2979, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:32:30.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 14702, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": " Reduce the given lambda calculus expression, if possible.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 5, 
            "slug": "lambda-calculus-reductions-3", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Lambda Calculus - Reductions #3", 
            "level": 0, 
            "success_ratio": 0.9744847890088322, 
            "total_count": 3057, 
            "created_at": "2015-11-23T04:43:48.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2450, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:32:31.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 14703, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": "  Reduce the given lambda calculus expression, if possible.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 5, 
            "slug": "lambda-calculus-reductions-4", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Lambda Calculus - Reductions #4", 
            "level": 0, 
            "success_ratio": 0.9737678855325914, 
            "total_count": 2516, 
            "created_at": "2015-11-23T04:46:11.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 4556, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:32:32.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 14404, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": " Evaluate the integer value of the given lambda calculus expression.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 5, 
            "slug": "lambda-calculus-getting-started", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Lambda Calculus - Evaluating Expressions #1", 
            "level": 0, 
            "success_ratio": 0.9644369178662151, 
            "total_count": 4724, 
            "created_at": "2015-11-13T10:12:37.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 4596, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:32:33.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 14405, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": "  Evaluate the integer value of the given lambda calculus expression.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 5, 
            "slug": "lambda-calculus-understanding-the-syntax", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Lambda Calculus - Evaluating Expressions #2", 
            "level": 0, 
            "success_ratio": 0.9685985247629083, 
            "total_count": 4745, 
            "created_at": "2015-11-13T10:15:01.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 3520, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-03-06T06:28:22.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 14406, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": "  Evaluate the integer value of the given lambda calculus expression.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 5, 
            "slug": "lambda-calculus-evaluate-the-expression", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Lambda Calculus - Evaluating Expressions #3", 
            "level": 0, 
            "success_ratio": 0.9436997319034852, 
            "total_count": 3730, 
            "created_at": "2015-11-13T10:54:28.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2813, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:32:34.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 14407, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": "  Evaluate the integer value of the given lambda calculus expression.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 5, 
            "slug": "lambda-calculus-evaluate-the-expression-1", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Lambda Calculus - Evaluating Expressions #4", 
            "level": 0, 
            "success_ratio": 0.9376666666666666, 
            "total_count": 3000, 
            "created_at": "2015-11-13T10:56:13.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 2831, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:32:35.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Medium", 
            "id": 14408, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": "  Evaluate the integer value of the given lambda calculus expression.", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.7, 
            "active": true, 
            "max_score": 5, 
            "slug": "lambda-calculus-evaluate-the-expression-2", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Lambda Calculus - Evaluating Expressions #5", 
            "level": 0, 
            "success_ratio": 0.9668715846994536, 
            "total_count": 2928, 
            "created_at": "2015-11-13T10:58:09.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 1247, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:35:16.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 19713, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 5, 
            "is_solution_unlocked": false, 
            "preview": "Given a set of ordered pairs, identify whether they are representative of a function. ", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 5, 
            "slug": "functions-or-not", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Functions or Not?", 
            "level": 50, 
            "success_ratio": 0.9511823035850496, 
            "total_count": 1311, 
            "created_at": "2016-03-23T13:51:39.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 1437, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2016-11-18T08:35:17.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 18181, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 15, 
            "is_solution_unlocked": false, 
            "preview": "Given the coordinates of a polygon, compute its perimeter. ", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 15, 
            "slug": "lambda-march-compute-the-perimeter-of-a-polygon", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Compute the Perimeter of a Polygon", 
            "level": 50, 
            "success_ratio": 0.98559670781893, 
            "total_count": 1458, 
            "created_at": "2016-02-29T11:37:50.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }, 
        {
            "onboarding": null, 
            "solved_count": 1104, 
            "preview_format": null, 
            "can_solve": true, 
            "public_test_cases": true, 
            "topics": [], 
            "time_left": null, 
            "updated_at": "2017-06-02T13:36:42.000Z", 
            "has_started": true, 
            "epoch_starttime": null, 
            "difficulty_name": "Easy", 
            "id": 18167, 
            "has_ended": false, 
            "is_custom": false, 
            "compile_and_test": true, 
            "checker_program": null, 
            "submit_disabled": false, 
            "expert_solution_status": false, 
            "company_id": null, 
            "custom": false, 
            "can_be_viewed": true, 
            "deleted": false, 
            "factor": 20, 
            "is_solution_unlocked": false, 
            "preview": "Given the coordinates of a polygon, compute its area. ", 
            "is_editorial_available": false, 
            "status": null, 
            "category": "ai", 
            "public_solutions": true, 
            "color": null, 
            "track": {
                "name": "Introduction", 
                "taxonomy": 3, 
                "track_slug": "fp", 
                "track_id": 5, 
                "track_name": "Functional Programming", 
                "id": 27, 
                "rewards_system_enabled": null, 
                "slug": "intro"
            }, 
            "dynamic": false, 
            "company": null, 
            "is_text": false, 
            "solved_score": 0.5, 
            "difficulty": 0.9, 
            "active": true, 
            "max_score": 20, 
            "slug": "lambda-march-compute-the-area-of-a-polygon", 
            "contest_slug": "master", 
            "user_score": 0, 
            "kind": "code", 
            "player_count": 2, 
            "name": "Compute the Area of a Polygon", 
            "level": 40, 
            "success_ratio": 0.9460154241645244, 
            "total_count": 1167, 
            "created_at": "2016-02-29T07:57:56.000Z", 
            "epoch_endtime": null, 
            "judgebot": null, 
            "countdown_time": 0, 
            "custom_tabs": null, 
            "judgebot_language": null, 
            "custom_case": true, 
            "requirements_description": null, 
            "is_skip_band_challenge": false, 
            "custom_checker_language": null
        }
    ], 
    "tutorial_signed_up": true, 
    "current_track": {
        "name": "Functional Programming", 
        "id": 5, 
        "priority": 2, 
        "descriptions": "The art of programming with expressions and functions. Experience the challenge of programming without state. A good paradigm for those interested in Map-Reduce and parallel computing.", 
        "rewards_system_enabled": null, 
        "slug": "fp"
    }, 
    "total": 25
}
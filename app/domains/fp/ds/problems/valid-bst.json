{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 631, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2016-09-01T16:22:35.000Z", 
        "author_name": "abhiranjan", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Medium", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>A binary tree is a tree where each node has at most two children. It is characterized by any of the following properties:  </p>\n\n<ol>\n<li>It can be an empty tree, where root = null.</li>\n<li>It can contain a root node which contain some value and two subtree, left subtree and right subtree, which are also binary tree.</li>\n</ol>\n\n<p>A binary tree is a binary search tree (BST) if all the non-empty nodes follows both two properties:  </p>\n\n<ol>\n<li>Each node's left subtree contains only values less than it, and</li>\n<li>Each node's right subtree contains only values greater than it.</li>\n</ol>\n\n<p>Preorder traversal is a tree traversal method where the current node is visited first, then the left subtree and then the right subtree. More specifically, let's represent the preorder traversal of a tree by a list. Then this list is constructed in following way:  </p>\n\n<ol>\n<li>If the tree is empty, then this list be a null list.</li>\n<li><p>For non-empty tree, let's represent the preorder of left subtree as <code>L</code> and of right subtree as <code>R</code>. Then the preorder of tree is obtained by appending <code>L</code> to current node, and then appending <code>R</code> to it.   </p>\n\n<pre><code>1         2          3\n \\       / \\        / \\\n  3     1   3      2   5\n /                /   / \\\n2                1   4   6\n(a)       (b)        (c)\n</code></pre></li>\n</ol>\n\n<p>For the above trees, preorder will be </p>\n\n<pre><code>(a) 1 3 2\n(b) 2 1 3\n(c) 3 2 1 5 4 6\n</code></pre>\n\n<p>Given a list of numbers, determine whether it can represent the preorder traversal of a binary search tree(BST).</p>\n\n<p><strong>Input</strong> <br>\nThe first line contains the number of test cases, T. Then T test cases follow. The first line of each test case contains the number of nodes in the tree, N. In next line there will a list of N unique numbers, where each number is from set [1, N].</p>\n\n<p><strong>Output</strong> <br>\nFor each test case, print \"YES\" if there's exist a BST whose preorder is equal to the list otherwise \"NO\" (without quotes).</p>\n\n<p><strong>Constraints</strong> <br>\n1 &lt;= T &lt;= 10 <br>\n1 &lt;= N &lt;= 100  </p>\n\n<p><strong>Sample Input</strong>  </p>\n\n<pre><code>5\n3\n1 2 3\n3\n2 1 3\n6\n3 2 1 5 4 6\n4\n1 3 4 2\n5\n3 4 5 1 2\n</code></pre>\n\n<p><strong>Sample Output</strong>  </p>\n\n<pre><code>YES\nYES\nYES\nNO\nNO\n</code></pre>\n\n<p><strong>Explanation</strong> <br>\nFirst three cases are from examples. And last two test cases are invalid because the subtree for 3 is not valid as 2 and 4 are in the wrong order.</p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 1418, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "haskell", 
            "clojure", 
            "scala", 
            "erlang", 
            "ocaml", 
            "sbcl", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": false, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": false, 
        "can_be_viewed": true, 
        "track": {
            "name": "Functional Structures", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 45, 
            "rewards_system_enabled": null, 
            "slug": "ds"
        }, 
        "primary_contest": null, 
        "factor": 20, 
        "is_solution_unlocked": false, 
        "preview": "Check whether a preorder traversal is of BST.", 
        "is_editorial_available": false, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.114", 
        "difficulty": 0.7, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 20, 
        "slug": "valid-bst", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 735, 
        "name": "Valid BST", 
        "is_preview_contest": false, 
        "level": 32, 
        "success_ratio": 0.8585034013605443, 
        "total_count": 735, 
        "created_at": "2013-12-04T07:42:37.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": "", 
        "countdown_time": 0, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/bb90185f-75e5-4069-8206-6decf4427384/150x150.png", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
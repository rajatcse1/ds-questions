{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 315, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2016-09-01T16:34:00.000Z", 
        "author_name": "idlecool", 
        "scala_template": "object Solution {\n    \n    def solveNSuperQueens(n: Int): Int = {\n        \n    // Fill Up this function body to display the number of arrangements\n    // Of N Super-Quees on a chessboard\n  }\n\n\n    def main(args: Array[String]) {\n        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution\n*/\n        println(solveNSuperQueens(readInt))\n    }\n}", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Advanced", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>People on Mars have slightly different pieces on their Chessboard.\nOne of them is a Super-Queen. A Super-Queen is a combination of a Queen and a Knight.</p>\n\n<p>So, any of the following squares are in the \"zone of power\" of a Super-Queen. <br>\n    1. A square in the same row or column as the Super-Queen <br>\n    2. A square lying on a line drawn diagonally through the square on which the Super-Queen is. <br>\n    3. A square lying in an 'L-Shape' with the Queen: This includes any square which is (2 rows, 1 column) away from the Queen or (1 row, 2 columns) away from the Queen.  </p>\n\n<p>So, if the Super-Queen is placed at the position 'q' marked on this chessboard below, the squares marked with hyphens '-' are squares threatened by possible 'attack' from the Super-Queen, and the squares marked by '0' are squares which are safe from the Super-Queen.    </p>\n\n<pre><code>- O O - O O -  \nO - - - - - O\nO - - - - - O\n- - - q - - -\nO - - - - - O\nO - - - - - O\n- O O - O O -    \n</code></pre>\n\n<p><strong>Task</strong> <br>\nYour tasks is to compute the number of ways to place N Super-Queens on an N x N Chessboard such that none of the Super-Queens are in conflict with each other. Ignore the fact that some of these arrangements are reflections and rotations of each other: all of them count as unique positionings.  </p>\n\n<p><strong>Input Format</strong>  </p>\n\n<p>One Integer N (which is the number of rows in the chessboard).</p>\n\n<p><strong>Constraint</strong>  </p>\n\n<ul>\n<li><span style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"><svg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"11.748ex\" height=\"2.343ex\" style=\"vertical-align: -0.505ex;\" viewBox=\"0 -791.3 5058.1 1008.6\" role=\"img\" focusable=\"false\"><g stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"><path stroke-width=\"1\" d=\"M70 417T70 494T124 618T248 666Q319 666 374 624T429 515Q429 485 418 459T392 417T361 389T335 371T324 363L338 354Q352 344 366 334T382 323Q457 264 457 174Q457 95 399 37T249 -22Q159 -22 101 29T43 155Q43 263 172 335L154 348Q133 361 127 368Q70 417 70 494ZM286 386L292 390Q298 394 301 396T311 403T323 413T334 425T345 438T355 454T364 471T369 491T371 513Q371 556 342 586T275 624Q268 625 242 625Q201 625 165 599T128 534Q128 511 141 492T167 463T217 431Q224 426 228 424L286 386ZM250 21Q308 21 350 55T392 137Q392 154 387 169T375 194T353 216T330 234T301 253T274 270Q260 279 244 289T218 306L210 311Q204 311 181 294T133 239T107 157Q107 98 150 60T250 21Z\"></path><g transform=\"translate(778,0)\"><path stroke-width=\"1\" d=\"M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z\"></path></g><g transform=\"translate(1834,0)\"><path stroke-width=\"1\" d=\"M234 637Q231 637 226 637Q201 637 196 638T191 649Q191 676 202 682Q204 683 299 683Q376 683 387 683T401 677Q612 181 616 168L670 381Q723 592 723 606Q723 633 659 637Q635 637 635 648Q635 650 637 660Q641 676 643 679T653 683Q656 683 684 682T767 680Q817 680 843 681T873 682Q888 682 888 672Q888 650 880 642Q878 637 858 637Q787 633 769 597L620 7Q618 0 599 0Q585 0 582 2Q579 5 453 305L326 604L261 344Q196 88 196 79Q201 46 268 46H278Q284 41 284 38T282 19Q278 6 272 0H259Q228 2 151 2Q123 2 100 2T63 2T46 1Q31 1 31 10Q31 14 34 26T39 40Q41 46 62 46Q130 49 150 85Q154 91 221 362L289 634Q287 635 234 637Z\"></path></g><g transform=\"translate(3000,0)\"><path stroke-width=\"1\" d=\"M694 -11T694 -19T688 -33T678 -40Q671 -40 524 29T234 166L90 235Q83 240 83 250Q83 261 91 266Q664 540 678 540Q681 540 687 534T694 519T687 505Q686 504 417 376L151 250L417 124Q686 -4 687 -5Q694 -11 694 -19Z\"></path></g><g transform=\"translate(4057,0)\"><path stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"></path><path stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\" transform=\"translate(500,0)\"></path></g></g></svg></span></li>\n</ul>\n\n<p><strong>Output Format</strong>  </p>\n\n<p>One Integer W, which is the number of ways to place N Super-Queens in the prescribed manner.  </p>\n\n<p><strong>Sample Input</strong>  </p>\n\n<pre><code>10\n</code></pre>\n\n<p><strong>Sample Output</strong>  </p>\n\n<pre><code>4\n</code></pre>\n\n<p><strong>Explanations</strong>  </p>\n\n<p>These are the various combinations of positions of 10 Super-Queens on a 10x10 Chessboard such that none of them will be in conflict. Assume that the rows as well as the columns are numbered 1 to 10.    </p>\n\n<p><em>Combination 1</em>  </p>\n\n<pre><code>(10,8), (9,5), (8,2), (7,10), (6,7), (5,4), (4,1), (3,9), (2,6), (1,3)  \nExplanation: A Super-Queen can be placed on (Row 10, Column 8), the second can be placed at (Row 9, Column 5), the third can be placed at (Row 8, Column2)... and so on... without any of the Super-Queens being in conflict with each other.  \n</code></pre>\n\n<p><em>Combination 2</em>  </p>\n\n<pre><code>(10,7), (9,3), (8,10), (7,6), (6,2), (5,9), (4,5), (3,1), (2,8), (1,4)  \n</code></pre>\n\n<p><em>Combination 3</em>  </p>\n\n<pre><code>(10,4), (9,8), (8,1), (7,5), (6,9), (5,2), (4,6), (3,10), (2,3), (1,7)  \n</code></pre>\n\n<p><em>Combination 4</em>  </p>\n\n<pre><code>(10,3), (9,6), (8,9), (7,1), (6,4), (5,7), (4,10), (3,2), (2,5), (1,8)\n</code></pre></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 353, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "scala", 
            "clojure", 
            "erlang", 
            "haskell", 
            "ocaml", 
            "sbcl", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "clojure_template": ";; Enter your code here. Read input from STDIN. Print output to STDOUT", 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": null, 
        "can_be_viewed": true, 
        "track": {
            "name": "Recursion", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 26, 
            "rewards_system_enabled": null, 
            "slug": "fp-recursion"
        }, 
        "primary_contest": null, 
        "factor": 20, 
        "is_solution_unlocked": false, 
        "preview": "Super-Queens on a Chessboard", 
        "is_editorial_available": false, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.142", 
        "difficulty": 0.3, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 20, 
        "slug": "super-queens-on-a-chessboard", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 363, 
        "name": "Super-Queens on a Chessboard", 
        "is_preview_contest": false, 
        "level": 43, 
        "success_ratio": 0.8677685950413223, 
        "total_count": 363, 
        "created_at": "2013-02-12T06:46:18.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": "", 
        "countdown_time": 0, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/36d17f9f-2fc0-4f5e-b467-d348d3c4c478/150x150.png", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 1033, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2016-09-01T16:37:02.000Z", 
        "author_name": "PRASHANTB1984", 
        "scala_template": "object Solution {\n  def drawTriangles(n: Int) {\n    //Draw the N'th iteration of the fractal as described \n    // in the problem statement\n  }\n\n  def main(args: Array[String]) {\n    drawTriangles(readInt())\n  }\n}", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Advanced", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><pre><code>_______________________________1_______________________________\n______________________________111______________________________\n_____________________________1___1_____________________________\n____________________________111_111____________________________\n___________________________1_______1___________________________\n__________________________111_____111__________________________\n_________________________1___1___1___1_________________________\n________________________111_111_111_111________________________\n_______________________1_______________1_______________________\n______________________111_____________111______________________\n_____________________1___1___________1___1_____________________\n____________________111_111_________111_111____________________\n___________________1_______1_______1_______1___________________\n__________________111_____111_____111_____111__________________\n_________________1___1___1___1___1___1___1___1_________________\n________________111_111_111_111_111_111_111_111________________\n_______________1_______________________________1_______________\n______________111_____________________________111______________\n_____________1___1___________________________1___1_____________\n____________111_111_________________________111_111____________\n___________1_______1_______________________1_______1___________\n__________111_____111_____________________111_____111__________\n_________1___1___1___1___________________1___1___1___1_________\n________111_111_111_111_________________111_111_111_111________\n_______1_______________1_______________1_______________1_______\n______111_____________111_____________111_____________111______\n_____1___1___________1___1___________1___1___________1___1_____\n____111_111_________111_111_________111_111_________111_111____\n___1_______1_______1_______1_______1_______1_______1_______1___\n__111_____111_____111_____111_____111_____111_____111_____111__\n_1___1___1___1___1___1___1___1___1___1___1___1___1___1___1___1_\n111_111_111_111_111_111_111_111_111_111_111_111_111_111_111_111\n</code></pre>\n\n<p><strong>Sierpinski Triangle</strong>  </p>\n\n<p>The <a href=\"http://en.wikipedia.org/wiki/Sierpinski_triangle\">Sierpinski Triangle</a> is a pretty fractal which consistes of layers of self-similar triangles, nested inside each other. This challenge involves the construction of such triangles, in the form of ASCII Art. The restriction is, that you need to accomplish this with functional programming, and you cannot declare even local variables!  </p>\n\n<p>We have to deal with real world constraints, so we cannot keep repeating the pattern infinitely. So, we will provide you a number of iterations, and you need to generate the ASCII version of the Sierpinski Triangle for those many iterations (or, levels of recursion). A few samples are provided below.  </p>\n\n<p><strong>Iteration #0</strong> <br>\nIn the beginning, we simply print a triangle which points upwards. There are 32 rows and 63 columns in this matrix. The triangle is composed of underscores and ones as shown below.  </p>\n\n<pre><code>_______________________________1_______________________________\n______________________________111______________________________\n_____________________________11111_____________________________\n____________________________1111111____________________________\n___________________________111111111___________________________\n__________________________11111111111__________________________\n_________________________1111111111111_________________________\n________________________111111111111111________________________\n_______________________11111111111111111_______________________\n______________________1111111111111111111______________________\n_____________________111111111111111111111_____________________\n____________________11111111111111111111111____________________\n___________________1111111111111111111111111___________________\n__________________111111111111111111111111111__________________\n_________________11111111111111111111111111111_________________\n________________1111111111111111111111111111111________________\n_______________111111111111111111111111111111111_______________\n______________11111111111111111111111111111111111______________\n_____________1111111111111111111111111111111111111_____________\n____________111111111111111111111111111111111111111____________\n___________11111111111111111111111111111111111111111___________\n__________1111111111111111111111111111111111111111111__________\n_________111111111111111111111111111111111111111111111_________\n________11111111111111111111111111111111111111111111111________\n_______1111111111111111111111111111111111111111111111111_______\n______111111111111111111111111111111111111111111111111111______\n_____11111111111111111111111111111111111111111111111111111_____\n____1111111111111111111111111111111111111111111111111111111____\n___111111111111111111111111111111111111111111111111111111111___\n__11111111111111111111111111111111111111111111111111111111111__\n_1111111111111111111111111111111111111111111111111111111111111_\n111111111111111111111111111111111111111111111111111111111111111\n</code></pre>\n\n<p><strong>Iteration #1</strong> <br>\nThe \"Fractalization\" now begins. We create a new triangle, which points downwards, and its vertices co-incide with the midpoints of the outer, upward-pointing triangle. The ones are flipped into underscores. Note, that the original upward-pointing triangle has now been split into four segments: one downward-pointing triangle, filled with underscores - and three triangles which point upwards and are filled with ones.  </p>\n\n<pre><code>_______________________________1_______________________________\n______________________________111______________________________\n_____________________________11111_____________________________\n____________________________1111111____________________________\n___________________________111111111___________________________\n__________________________11111111111__________________________\n_________________________1111111111111_________________________\n________________________111111111111111________________________\n_______________________11111111111111111_______________________\n______________________1111111111111111111______________________\n_____________________111111111111111111111_____________________\n____________________11111111111111111111111____________________\n___________________1111111111111111111111111___________________\n__________________111111111111111111111111111__________________\n_________________11111111111111111111111111111_________________\n________________1111111111111111111111111111111________________\n_______________1_______________________________1_______________\n______________111_____________________________111______________\n_____________11111___________________________11111_____________\n____________1111111_________________________1111111____________\n___________111111111_______________________111111111___________\n__________11111111111_____________________11111111111__________\n_________1111111111111___________________1111111111111_________\n________111111111111111_________________111111111111111________\n_______11111111111111111_______________11111111111111111_______\n______1111111111111111111_____________1111111111111111111______\n_____111111111111111111111___________111111111111111111111_____\n____11111111111111111111111_________11111111111111111111111____\n___1111111111111111111111111_______1111111111111111111111111___\n__111111111111111111111111111_____111111111111111111111111111__\n_11111111111111111111111111111___11111111111111111111111111111_\n1111111111111111111111111111111_1111111111111111111111111111111\n</code></pre>\n\n<p><strong>Iteration #2</strong> <br>\nWe repeat the process on the three smaller upward-pointing triangles created at the end of Iteration #1. We create a downward pointing triangle inside each of those. </p>\n\n<pre><code>_______________________________1_______________________________\n______________________________111______________________________\n_____________________________11111_____________________________\n____________________________1111111____________________________\n___________________________111111111___________________________\n__________________________11111111111__________________________\n_________________________1111111111111_________________________\n________________________111111111111111________________________\n_______________________1_______________1_______________________\n______________________111_____________111______________________\n_____________________11111___________11111_____________________\n____________________1111111_________1111111____________________\n___________________111111111_______111111111___________________\n__________________11111111111_____11111111111__________________\n_________________1111111111111___1111111111111_________________\n________________111111111111111_111111111111111________________\n_______________1_______________________________1_______________\n______________111_____________________________111______________\n_____________11111___________________________11111_____________\n____________1111111_________________________1111111____________\n___________111111111_______________________111111111___________\n__________11111111111_____________________11111111111__________\n_________1111111111111___________________1111111111111_________\n________111111111111111_________________111111111111111________\n_______1_______________1_______________1_______________1_______\n______111_____________111_____________111_____________111______\n_____11111___________11111___________11111___________11111_____\n____1111111_________1111111_________1111111_________1111111____\n___111111111_______111111111_______111111111_______111111111___\n__11111111111_____11111111111_____11111111111_____11111111111__\n_1111111111111___1111111111111___1111111111111___1111111111111_\n111111111111111_111111111111111_111111111111111_111111111111111\n</code></pre>\n\n<p><strong>Input Format</strong>  </p>\n\n<p>One Integer N which is the Iteration Number for which you need to generate the Sierpinski triangle, in accordance with the triangles displayed above. <br>\nGenerate the N<sup>th</sup> triangle in the series shown above.  </p>\n\n<p><strong>Input Constraint</strong> <br>\nN &lt;= 5  </p>\n\n<p><strong>Notes about the Triangle</strong> <br>\nAs in the figures above, the canvas has a total of 32 rows and 63 columns. The outermost, upward-pointing triangle has a perpendicular height of 32 characters. The height of each of the downwards-pointing triangle, drawn in each iteration, is half of the upward-pointing one in which it is drawn.  </p>\n\n<p><strong>Output Format</strong> <br>\nThe N<sup>th</sup> triangle of the series shown above. The output will consist of 32 rows and 63 columns, and will be composed of ones (1) and underscores as in the triangles above.  </p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 812, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "scala", 
            "clojure", 
            "erlang", 
            "haskell", 
            "ocaml", 
            "sbcl", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": false, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": false, 
        "can_be_viewed": true, 
        "track": {
            "name": "Recursion", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 26, 
            "rewards_system_enabled": null, 
            "slug": "fp-recursion"
        }, 
        "primary_contest": null, 
        "factor": 30, 
        "is_solution_unlocked": false, 
        "preview": "Beautiful code can create beautiful shapes. An ASCII Art challenge.", 
        "is_editorial_available": false, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.038", 
        "difficulty": 0.3, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 30, 
        "slug": "functions-and-fractals-sierpinski-triangles", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 1080, 
        "name": "Functions and Fractals: Sierpinski triangles", 
        "is_preview_contest": false, 
        "level": 37, 
        "success_ratio": 0.9564814814814815, 
        "total_count": 1080, 
        "created_at": "2013-08-16T12:49:33.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": "", 
        "countdown_time": 0, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/e997a84f-678d-492e-a0fb-f5a0d8fd2ff5/150x150.png", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
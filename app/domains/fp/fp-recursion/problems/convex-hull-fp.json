{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 565, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": "import json\nfrom sys import stdin\n\ndef check_inputs (inputs, outputs,source):\n    scores = []\n    percentage = []\n    valid = []\n    maxscore = 1\n    \n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n        if  len(inps.split()) != len(outps.split()):\n            scores.append(0)\n            percentage.append(0)\n            valid.append(0)\n        else:\n            count = 0.0\n            score = 1.0\n            wrong = 0\n            for inp, outp in zip(inps.split(), outps.split()):\n                count += 1\n                if (abs(float(outp)-float(inp)))>0.2:\n                    score = 0.0\n            scores.append(score * maxscore)\n            #scores.append(diff)\n            percentage.append(1000)\n            if (score>0.0):\n            \tvalid.append(1)\n            else:\n                valid.append(0)\n\n    return valid, scores, percentage\n\ndef process(data,source):\n    # Whatever you do, I am not giving any marks!\n    score = 0.0\n    valid, scores, percentage = check_inputs(data[\"expected_outputs\"], data[\"outputs\"],source)\n    for s in scores:\n        score += s\n    if score < 0:\n        score = 0.0\n\n    return score/len(scores), valid, percentage\n\nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n\n    # Get the run directory for the submission we need to evaluate. I know,\n    # hackish right?\n\n    run_directory = stdin[-1]\n\n    # request.json contains the data submitted for the current.\n    request = json.load(open(run_directory + \"request.json\"))\n\n\n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n\n        # The list of test cases\n        \"testcases\": request[\"testcase_sources\"],\n\n        # The submitted language key (Eg: 5 for python)\n        \"lang\": request[\"lang\"],\n\n        # I'll tell you how to fill this next\n        \"expected_outputs\": request[\"expected_outputs\"],\n\n        \"outputs\": []\n    }\n\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n\n\n    # Gathered all the data we could, lets process it\n    score, testcase_status, percentage = process(data,data[\"source\"])\n\n    print score\n    print \" \".join(str(i) for i in testcase_status)\n    print \" \".join(str(i) for i in percentage)\n", 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2016-09-01T16:37:20.000Z", 
        "author_name": "abhiranjan", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Medium", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p><em>Contributed by <a href=\"https://www.hackerrank.com/abhiranjan\">Abhiranjan Kumar</a></em>  </p>\n\n<p>Convex Hull of a set of points, in 2D plane, is a convex polygon with minimum area such that each point lies either on the boundary of polygon or inside it.   </p>\n\n<p>Let's consider a 2D plane, where we plug pegs at the points mentioned. We enclose all the pegs with a elastic band and then release it to take its shape. The closed structure formed by elastic band is similar to that of convex hull.   </p>\n\n<p><img src=\"http://hr-testcases.s3.amazonaws.com/975\" alt=\"Convex Hull\" title=\"Convex hull: elastic-band analogy\"> <br>\nIn the above figure, convex hull of the points, represented as dots, is the polygon formed by blue line.   </p>\n\n<p><strong>Tasks</strong> <br>\nGiven a set of <em>N</em> points, Find the perimeter of the convex hull for the points.   </p>\n\n<p><strong>Input Format</strong> <br>\nFirst line of input will contain a integer,  <em>N</em>, number of points. Then follow <em>N</em> lines where each line contains the coordinate, <em>x<sub>i</sub>  y<sub>i</sub></em>, of <em>i<sup>th</sup></em> point.  </p>\n\n<p><strong>Output Format</strong> <br>\nPrint the perimeter of convex hull for the given set of points. An error margin of +/- 0.2 is acceptable.   </p>\n\n<p><strong>Constraints</strong> <br>\n3 &lt;= N &lt;= 10<sup>4</sup> <br>\n0 &lt;= x<sub>i</sub>, y<sub>i</sub> &lt;= 10<sup>4</sup> <br>\nThere exists, at least, three points which are non-colinear.</p>\n\n<p><strong>Sample Input</strong>  </p>\n\n<pre><code>6    \n1 1    \n2 5    \n3 3    \n5 3    \n3 2    \n2 2\n</code></pre>\n\n<p><strong>Sample Output</strong>   </p>\n\n<pre><code>12.2   \n</code></pre>\n\n<p><strong>Explanation</strong> <br>\nFor the given set of points in sample input, the convex hull is formed by the triangle whose vertices are given by <code>(1, 1), (2, 5), (5, 3)</code>. Here perimeter of the hull is 12.200792856.</p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 975, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "scala", 
            "clojure", 
            "erlang", 
            "haskell", 
            "ocaml", 
            "sbcl", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "haskell_template": "import Text.Printf\n\nsolve :: [(Int, Int)] -> Double\nsolve points = --Complete this function\n\nmain :: IO ()\nmain = do\n  n <- readLn :: IO Int\n  content <- getContents\n  let  \n    points = map (\\[x, y] -> (x, y)). map (map (read::String->Int)). map words. lines $ content\n    ans = solve points\n  printf \"%.1f\\n\" ans", 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": null, 
        "can_be_viewed": true, 
        "track": {
            "name": "Recursion", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 26, 
            "rewards_system_enabled": null, 
            "slug": "fp-recursion"
        }, 
        "primary_contest": null, 
        "factor": 30, 
        "is_solution_unlocked": false, 
        "preview": "(Geometry) Finding convex hull of a given set of points (Graham Scan Algorithm can be applied).", 
        "is_editorial_available": false, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 1.0, 
        "difficulty_score": "0.313", 
        "difficulty": 0.7, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 30, 
        "slug": "convex-hull-fp", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 749, 
        "name": "Convex Hull", 
        "is_preview_contest": false, 
        "level": 45, 
        "success_ratio": 0.7543391188251002, 
        "total_count": 749, 
        "created_at": "2013-09-28T20:21:52.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": "", 
        "countdown_time": 0, 
        "author_avatar": "https://hrcdn.net/s3_pub/hr-avatars/bb90185f-75e5-4069-8206-6decf4427384/150x150.png", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": "python"
    }
}
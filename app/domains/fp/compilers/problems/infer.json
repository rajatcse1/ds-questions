{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 34, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2016-09-01T16:23:15.000Z", 
        "author_name": "scturtle", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Expert", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>If we know that <code>one</code> is of type <code>int</code> and <code>id</code> is of type <code>forall[a] a -&gt; a</code>, we can infer that <code>id(one)</code> is of type <code>int</code>.</p>\n\n<p>A function <code>fun x y -&gt; x</code> has a generic type of <code>forall[a b] (a, b) -&gt; a</code>. </p>\n\n<p>Let's write a program to help us infer the type of expression in a given envrionment!</p>\n\n<p>First, we define the syntax of expression:</p>\n\n<pre>ident : [_A-Za-z][_A-Za-z0-9]*              // variable names\n\nexpr : \"<strong>let</strong> \" <em>ident</em> \" <strong>=</strong> \" <em>expr</em> \" <strong>in</strong> \" <em>expr</em>  // variable defination\n     | \"<strong>fun</strong> \" <em>argList</em> \" <strong>-&gt;</strong> \" <em>expr</em>           // function defination\n     | <em>simpleExpr</em>\n\nargList : { 0 or more <em>ident</em> seperated by ' ' }\n\nsimpleExpr : '<strong>(</strong>' <em>expr</em> '<strong>)</strong>'\n           | <em>ident</em>\n           | <em>simpleExpr</em> '<strong>(</strong>' <em>paramList</em> '<strong>)</strong>'   // function calling\n\nparamList : { 0 or more <em>expr</em> seperated \"<strong>,</strong> \" }\n</pre>\n\n<p>Then, we define the syntax of type:</p>\n\n<pre>ty : \"<strong>() -&gt;</strong> \" <em>ty</em>                            // function without arguments\n   | '<strong>(</strong>' <em>tyList</em> \"<strong>) -&gt;</strong> \" <em>ty</em>                  // uncurry function\n   | \"<strong>forall[</strong>\" <em>argList</em> \"<strong>]</strong>\" <em>ty</em>               // generic type\n   | <em>simpleTy</em> \" <strong>-&gt;</strong> \" <em>ty</em>                     // curry function\n   | <em>simpleTy</em>\n\ntyList : { 1 or more <em>ty</em> seperated by \"<strong>,</strong> \" }\n\nsimpleTy : '<strong>(</strong>' <em>ty</em> '<strong>)</strong>'\n         | <em>ident</em>\n         | <em>simpleTy</em> '<strong>[</strong>' <em>tyList</em> '<strong>]</strong>'          // such as list[int]\n</pre>\n\n<p>Hint in parsing:</p>\n\n<ul>\n<li>Spacing is strict.</li>\n<li>Pay attention to avoid dead loop.</li>\n</ul>\n\n<p>Type of given expression should be infered in an environment. The environment is consisted of a set of functions with types:</p>\n\n<pre><code>head: forall[a] list[a] -&gt; a\ntail: forall[a] list[a] -&gt; list[a]\nnil: forall[a] list[a]\ncons: forall[a] (a, list[a]) -&gt; list[a]\ncons_curry: forall[a] a -&gt; list[a] -&gt; list[a]\nmap: forall[a b] (a -&gt; b, list[a]) -&gt; list[b]\nmap_curry: forall[a b] (a -&gt; b) -&gt; list[a] -&gt; list[b]\none: int\nzero: int\nsucc: int -&gt; int\nplus: (int, int) -&gt; int\neq: forall[a] (a, a) -&gt; bool\neq_curry: forall[a] a -&gt; a -&gt; bool\nnot: bool -&gt; bool\ntrue: bool\nfalse: bool\npair: forall[a b] (a, b) -&gt; pair[a, b]\npair_curry: forall[a b] a -&gt; b -&gt; pair[a, b]\nfirst: forall[a b] pair[a, b] -&gt; a\nsecond: forall[a b] pair[a, b] -&gt; b\nid: forall[a] a -&gt; a\nconst: forall[a b] a -&gt; b -&gt; a\napply: forall[a b] (a -&gt; b, a) -&gt; b\napply_curry: forall[a b] (a -&gt; b) -&gt; a -&gt; b\nchoose: forall[a] (a, a) -&gt; a\nchoose_curry: forall[a] a -&gt; a -&gt; a\n</code></pre>\n\n<p><strong>Sample Input #00</strong></p>\n\n<pre><code>let x = id in x\n</code></pre>\n\n<p><strong>Sample Output #00</strong></p>\n\n<pre><code>forall[a] a -&gt; a\n</code></pre>\n\n<p><strong>Explanation #00</strong>: <br>\n<code>x</code> is just <code>id</code> in the environment.</p>\n\n<p><strong>Sample Input #01</strong></p>\n\n<pre><code>fun x -&gt; let y = fun z -&gt; z in y\n</code></pre>\n\n<p><strong>Sample Output #01</strong></p>\n\n<pre><code>forall[a b] a -&gt; b -&gt; b\n</code></pre>\n\n<p><strong>Explanation #01</strong>: <br>\nFunction with variables which are not bounded in the environment should be generic function. The variable names appear in <code>forall[]</code> should be from <code>a</code> to <code>z</code> subject to their appearance order in type body.</p>\n\n<p><strong>Sample Input #02</strong></p>\n\n<pre><code>choose(fun x y -&gt; x, fun x y -&gt; y)\n</code></pre>\n\n<p><strong>Sample Output #02</strong></p>\n\n<pre><code>forall[a] (a, a) -&gt; a\n</code></pre>\n\n<p><strong>Explanation #02</strong>: <br>\nThe type of <code>choose</code> is <code>forall[a] (a, a) -&gt; a</code>. So <code>x</code> and <code>y</code> should be of the same type.</p>\n\n<p><strong>Sample Input #03</strong></p>\n\n<pre><code>fun f -&gt; let x = fun g y -&gt; let _ = g(y) in eq(f, g) in x\n</code></pre>\n\n<p><strong>Sample Output #03</strong></p>\n\n<pre><code>forall[a b] (a -&gt; b) -&gt; (a -&gt; b, a) -&gt; bool\n</code></pre>\n\n<p><strong>Explanation #03</strong>: <br>\nThe longest test case.</p>\n\n<h3>Final note:</h3>\n\n<p>All given expression are valid, non-recursive and can be infered successfully in given environment. But an <em>optional</em> requirement is that your program should <em>fail</em> on incomplete uncurry version function calling. For example, <code>choose_curry(one)</code> should be infered as <code>int -&gt; int</code> but <code>choose(one)</code> just <em>fail</em> in infering.</p>\n\n<hr>\n\n<p><strong>Tested by</strong> <a href=\"/stoundmire\">Bo You</a>  </p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 4389, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "haskell", 
            "clojure", 
            "scala", 
            "erlang", 
            "sbcl", 
            "ocaml", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": null, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": null, 
        "can_be_viewed": true, 
        "track": {
            "name": "Interpreter and Compilers", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 48, 
            "rewards_system_enabled": null, 
            "slug": "compilers"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-05-06T21:55:26.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1412922600, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 1353, 
            "primary_track_id": 5, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": null, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "A contest for functional programming enthusiasts.", 
            "effective_epoch_endtime": 1413786600, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Functional Programming", 
                "id": 5, 
                "priority": 2, 
                "descriptions": "The art of programming with expressions and functions. Experience the challenge of programming without state. A good paradigm for those interested in Map-Reduce and parallel computing.", 
                "rewards_system_enabled": null, 
                "slug": "fp"
            }, 
            "primary_tag_id": null, 
            "hide_navigation": null, 
            "show_penalty": true, 
            "effective_time_left": -89570290.22834311, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "The contest hosts 7 challenges ranging from algorithms to logics to compilers. \n<br><br>\n\n<strong>Problem Setters</strong> <a href=\"/scturtle\">scturtle</a>, <a href=\"/pkacprzak\">Pawel Kacprzak</a>, <a href=\"/deepakgupta\">Deepak Gupta</a>, <a href=\"/newschoolburke\">Arjit Srivastava</a>, <a href=\"/abhiranjan\">Abhiranjan</a>.\n<br><br>\n<strong>Validators</strong>  <a href=\"/scturtle\">scturtle</a>, <a href=\"https://www.hackerrank.com/shaka_shadows\">Ray Williams Robinson Valiente</a>,  <a href=\"/stoundmire\">Bo You</a>, <a href=\"/pkacprzak\">Pawel Kacprzak</a>, <a href=\"/abhiranjan\">Abhiranjan</a>.\n<br><br>\n<strong>Languages allowed</strong>: <i>Haskell, Racket, Clojure, OCaml, F#, Scala, Common Lisp and Erlang.</i>\n<br><br>\n<strong>Want to contribute problems?</strong> Mail to  <a href=\"mailto:hackers@hackerrank.com?subject=Lambda Calculi\">hackers@hackerrank.com</a> with the subject \"Lambda Calculi\".", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -89570290.22521023, 
            "challenges_count": 7, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2014-10-20T06:30:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "lambda-calculi-oct14", 
            "hide_leaderboard": null, 
            "kind": null, 
            "comment_live_sync": null, 
            "name": "Functional Programming Contest - October'14", 
            "is_multi_round": false, 
            "created_at": "2014-09-09T20:05:40.000Z", 
            "epoch_endtime": 1413786600, 
            "company_associated_contest": null, 
            "rating_category": null, 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-10-10T06:30:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 202
        }, 
        "factor": 150, 
        "is_solution_unlocked": false, 
        "preview": null, 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.1", 
        "difficulty": 0.1, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 150, 
        "slug": "infer", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 40, 
        "name": "Infer", 
        "is_preview_contest": false, 
        "level": 99, 
        "success_ratio": 0.85, 
        "total_count": 40, 
        "created_at": "2014-09-21T07:02:21.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": null, 
        "countdown_time": 0, 
        "author_avatar": "https://secure.gravatar.com/avatar/869ccad8f69a57af5d3615a73d3ad172?d=https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg&s=150", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
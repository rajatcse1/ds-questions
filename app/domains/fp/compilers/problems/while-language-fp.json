{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 156, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2017-06-01T11:38:19.000Z", 
        "author_name": "keep_learning", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Expert", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Here you have to design an interpreter for a subset of the <em>While</em> language. It is a simple imperative language which only supports integer literals.  </p>\n\n<p>We will use similar grammar which its authors<sup><a href=\"http://lbtweb.pbworks.com/w/page/52117907/Hanne%20Riis%20Nielson\" title=\"Hanne Riis Nielson\">1</a>,<a href=\"http://www.doc.ic.ac.uk/~clh/\" title=\"Chris Hankin\">2</a>,<a href=\"http://lbtweb.pbworks.com/w/page/52415334/Flemming%20Nielson\" title=\"Flemming Nielson\">3</a></sup> have used. Below is the description of grammar that we will use.</p>\n\n<ul>\n<li>x, y \u2208 <strong>Var</strong> (variables)</li>\n<li><p>n \u2208 <strong>Num</strong> (numerals/integers)</p></li>\n<li><p>op<sub>a</sub> \u2208 <strong>Op<sub>a</sub></strong> (arithmetic operators) <br>\nop<sub>a</sub> ::= <code>+</code> | <code>-</code> | <code>*</code> | <code>/</code>  </p></li>\n<li><p>op<sub>b</sub> \u2208 <strong>Op<sub>b</sub></strong> (boolean operators) <br>\nop<sub>b</sub> ::= <code>and</code> | <code>or</code>  </p></li>\n<li><p>op<sub>r</sub> \u2208 <strong>Op<sub>r</sub></strong> (relational operators) <br>\nop<sub>r</sub> ::= <code>&gt;</code> | <code>&lt;</code>  </p></li>\n<li><p>a \u2208 <strong>AExp</strong> (arithmetic expressions) <br>\na ::= x | n | a<sub>1</sub> op<sub>a</sub> a<sub>2</sub> | ( a )</p></li>\n<li><p>b \u2208 <strong>BExp</strong> (boolean expressions) <br>\nb ::= <strong>true</strong> | <strong>false</strong> | b<sub>1</sub> op<sub>b</sub> b<sub>2</sub> | a<sub>1</sub> op<sub>r</sub> a<sub>2</sub>  | ( b )</p></li>\n<li><p>S \u2208 <strong>Stmt</strong> (statements) <br>\nS ::= x := a | S<sub>1</sub> <strong>;</strong> S<sub>2</sub> | <strong>if</strong> b <strong>then {</strong> S<sub>1</sub> <strong>} else {</strong> S<sub>2</sub> <strong>}</strong> | <strong>while</strong> b <strong>do {</strong> S <strong>}</strong>  </p></li>\n</ul>\n\n<p>Here all operators are left associative. Their <em>precedence order</em> is as follows.</p>\n\n<ol>\n<li><em>Arithmetic Operators:</em> (<code>*</code>, <code>/</code>) &gt; (<code>+</code>, <code>-</code>) &gt; (<code>&gt;</code>, <code>&lt;</code>)    </li>\n<li><em>Boolean Operators:</em> <code>and</code> &gt; <code>or</code>  </li>\n</ol>\n\n<p>You can safely assume that all variables have integer type and are initialized properly. All variables name will consist of only lowercase letter ('a'-'z') and it's length will not exceed 10.</p>\n\n<p>Note that \"<code>;</code>\" is more like of a sequencing operator. It is used to concatenate two statements. That's why there will be no \"<code>;</code>\" at the end of block of statements.</p>\n\n<p>All divisions are integers divisions, that is, <code>a/b = floor(a/b)</code>. Intermediate values of any variable will always be in range [0, 2*10<sup>18</sup>].  </p>\n\n<p>All test cases are <em>valid</em> programs. All of them will execute no more than 10<sup>6</sup> operations. All operators and operand will be separated by at least one white space.</p>\n\n<p><strong>Input</strong> <br>\nInput will be the multiline <em>While</em> program. You have to read it to the end of file.</p>\n\n<p><strong>Output</strong> <br>\nAt the end of program, you have to print each variable's name and its value, in different lines, sorted by the lexicographical order of name.</p>\n\n<p><strong>Sample Input #00</strong>  </p>\n\n<pre><code>fact := 1 ;\nval := 10000 ;\ncur := val ;\nmod := 1000000007 ;\n\nwhile ( cur &gt; 1 )\n  do\n   {\n      fact := fact * cur ;\n      fact := fact - fact / mod * mod ;\n      cur := cur - 1\n   } ;\n\ncur := 0\n</code></pre>\n\n<p><strong>Sample Output #00</strong>  </p>\n\n<pre><code>cur 0\nfact 531950728\nmod 1000000007\nval 10000\n</code></pre>\n\n<p><strong>Sample Input #01</strong>  </p>\n\n<pre><code>a := 10 ;\nb := 100 ;\n\nif ( a &lt; b ) then\n    {\n        min := a ;\n        max := b\n    }\nelse {\n    min := b ;\n    max := a\n    }\n</code></pre>\n\n<p><strong>Sample Output #01</strong>  </p>\n\n<pre><code>a 10\nb 100\nmax 100\nmin 10\n</code></pre>\n\n<p><strong>Explanation</strong> <br>\n<em>Sample Case #00:</em>  This programs calculate the factorial of a number. Here it calculate the value of <code>10000! % (10^9+7)</code> using <em>while</em> statement. Using the property <code>a % b == a - (a/b)*b</code> we calcuated the modulo of solution. <br>\n<em>Sample Case #01:</em>  This program finds the maximum and minimum of <code>a</code> and <code>b</code> using <em>if else</em> statement.</p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 2384, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "haskell", 
            "clojure", 
            "scala", 
            "erlang", 
            "sbcl", 
            "ocaml", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": false, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": false, 
        "can_be_viewed": true, 
        "track": {
            "name": "Interpreter and Compilers", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 48, 
            "rewards_system_enabled": null, 
            "slug": "compilers"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-05-06T21:51:55.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1397802600, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 826, 
            "primary_track_id": 5, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": true, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "A contest for functional programming enthusiasts.", 
            "effective_epoch_endtime": 1398666600, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Functional Programming", 
                "id": 5, 
                "priority": 2, 
                "descriptions": "The art of programming with expressions and functions. Experience the challenge of programming without state. A good paradigm for those interested in Map-Reduce and parallel computing.", 
                "rewards_system_enabled": null, 
                "slug": "fp"
            }, 
            "primary_tag_id": null, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -104690284.4154553, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "Let's code the functional way. This is a programming paradigm where we code \"what\" instead of \"how\". In this we can clearly separate \"pure\" code from \"impure\".  \n  \nYou can code in any of the functional languages, including Haskell, Scala, Lisp, Erlang, Clojure, OCaml and F#.", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -104690284.41306646, 
            "challenges_count": 5, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2014-04-28T06:30:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "lambda-calculi-apr14", 
            "hide_leaderboard": null, 
            "kind": null, 
            "comment_live_sync": null, 
            "name": "Functional Programming Contest - April'14", 
            "is_multi_round": false, 
            "created_at": "2014-04-08T19:07:16.000Z", 
            "epoch_endtime": 1398666600, 
            "company_associated_contest": null, 
            "rating_category": "Functional Programming", 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-04-18T06:30:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 142
        }, 
        "factor": 150, 
        "is_solution_unlocked": false, 
        "preview": "Write interpreter for While language.", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.174", 
        "difficulty": 0.1, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 150, 
        "slug": "while-language-fp", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 187, 
        "name": "While Language", 
        "is_preview_contest": false, 
        "level": 82, 
        "success_ratio": 0.8342245989304813, 
        "total_count": 187, 
        "created_at": "2014-04-17T20:59:01.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": null, 
        "countdown_time": 0, 
        "author_avatar": "https://secure.gravatar.com/avatar/51e634a7316f1a4101f65519d2110cce?d=https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg&s=150", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}
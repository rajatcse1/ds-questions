{
    "status": true, 
    "model": {
        "onboarding": null, 
        "tagAncestry": [], 
        "solved_count": 56, 
        "leaderboard_out_of_sync_message": null, 
        "public_test_cases": true, 
        "checker_program": null, 
        "topics": [], 
        "time_left": null, 
        "updated_at": "2016-09-01T16:24:34.000Z", 
        "author_name": "boleynsu", 
        "has_started": true, 
        "epoch_starttime": null, 
        "has_all_test_cases_public": false, 
        "difficulty_name": "Hard", 
        "require_unlock": true, 
        "body_html": "<div class='challenge_problem_statement'><div class='msB challenge_problem_statement_body'><div class='hackdown-content'><style id=\"MathJax_SVG_styles\">.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n</style><svg style=\"display: none;\"><defs id=\"MathJax_SVG_glyphs\"></defs></svg><p>Boleyn Su runs a company called Acme. There are <em>N</em> employees in the company, and each one of them is represented by a unique employee id whose range lies in <em>[1, N]</em>. Being the head of company, Boleyn's employee id is <em>1</em>. <br>\n<br>\nEach employee, except Boleyn, has exactly one direct superior. This means that the hierarchial structure of the company is like a tree, where</p>\n\n<ol>\n<li>Boleyn, employee id 1, represents the root node.</li>\n<li>Each pair of employee is directly or indirectly connected to one another.</li>\n<li>There is no cycle.</li>\n</ol>\n\n<p>Let's represent the salary by the array <em>s = {s[1], s[2], s[3]..., s[N]}</em>, where <em>s[i]</em> is the salary of the <em>i<sup>th</sup></em> employee. Salary structure in the company is non-uniform. Even a subordinate may get a higher salary than her superior. Some of the employees in Acme are curious about who gets the <em>k<sup>th</sup></em> lowest salary <em>among her subordinates</em>. Help them in solving their query.</p>\n\n<p><strong>Note</strong>  </p>\n\n<ol>\n<li><em>1<sup>st</sup></em> lowest salary is equivalent to lowest salary, <em>2<sup>nd</sup></em> lowest means lowest salary which is greater that <em>1<sup>st</sup></em> lowest salary, and so on.</li>\n<li>Salary of each employee is different.</li>\n<li>It is not necessary that the people who are placed higher on hierarchy will have a greater salary than their subordinates.</li>\n</ol>\n\n<p><strong>Input Format</strong> <br>\nThe first line contains two space separated integers, <em>N Q</em>, where <em>N</em> is the number of employees in Acme, and <em>Q</em> is the number of queries. <br>\nThen follows <em>N-1</em> lines. Each of these lines contain two space separated integers, <em>u p</em>, where <em>p</em> is the superior of <em>u</em>. <em>u</em> and <em>p</em> are employees id. <br>\nIn the next line there are <em>N</em> space separated integers, <em>s[1] s[2] ... s[n]</em>, where <em>s[i]</em>, <em>i \u2208 [1..N]</em>, is the salary of <em>i<sup>th</sup></em> employee. <br>\nThen, <em>Q</em> queries follow. Each query contains two space separated integers, <em>v k</em>. See output format for it's definition.</p>\n\n<p><strong>Output format</strong> <br>\nFor the first query, print the id of employee who has the <em>k<sup>th</sup></em> lowest salary among the subordinates of <em>v</em>. <br>\nFor the subsequent queries, we need to find the <em>k<sup>th</sup></em> lowest salary of the subordinates of <em>v+d</em>, where <em>d</em> is the answer of previous query.</p>\n\n<p><strong>Constraints</strong> <br>\n1 \u2264 <em>N</em> \u2264 3*10<sup>4</sup> <br>\n1 \u2264 <em>Q</em> \u2264 3*10<sup>4</sup> <br>\n1 \u2264 <em>s[i]</em> \u2264 10<sup>9</sup>, <em>i</em> \u2208 <em>[1..N]</em> <br>\n<em>s[i]</em> \u2260 s[j], 1 \u2264 i &lt; j \u2264 <em>N</em> <br>\n1 \u2264 <em>u, p</em> \u2264 <em>N</em>, <em>u</em> \u2260 <em>p</em> <br>\n<em>-N</em> \u2264 <em>d</em> \u2264 <em>N</em> <br>\nFor <em>1<sup>st</sup></em> query, 1 \u2264 <em>v</em> \u2264 <em>N</em> <br>\nFor later queries, 1 \u2264 <em>v+d</em> \u2264 <em>N</em> <br>\nFor each query, 1 \u2264 <em>K</em> \u2264 Number_of_subordinates  </p>\n\n<p><strong>Sample Input</strong></p>\n\n<pre><code>8 7\n2 1\n3 2\n4 2\n7 4\n8 4\n5 1\n6 5\n70 40 60 80 10 20 30 50\n2 1\n-6 5\n-4 1\n-5 3\n2 1\n-5 4\n2 2\n</code></pre>\n\n<p><strong>Sample Output</strong></p>\n\n<pre><code>7\n8\n7\n3\n6\n2\n8\n</code></pre>\n\n<p><strong>Explanation</strong> <br>\nTree structure will be</p>\n\n<pre><code>         1(70)\n        / \\\n       /   \\\n    2(40)  5(10)\n     / \\      \\\n    /   \\      \\\n 3(60)  4(80)  6(20)\n         / \\\n        /   \\\n     7(30)  8(50)\n</code></pre>\n\n<p><em>Query #1</em> <code>Node = 2</code>, <code>k = 1</code>: Subordinates, in increasing order of salary, are <em>(7, 30), (8, 50), (3, 60), (4, 80)</em>. So employee <em>7</em> has the <em>1<sup>st</sup></em> lowest salary among the subordinates of <em>2</em>. <br>\n<em>Query #2</em> <code>Node = -6+7 = 1</code>, <code>k = 5</code>: Subordinates are <em>(5, 10), (6, 20), (7, 30), (2, 40), (8, 50), (3, 60), (4, 80)</em> . <em>8<sup>th</sup></em> employee has the <em>5<sup>th</sup></em> lowest salary among the subordinate of <em>1</em>. <br>\n<em>Query #3</em> <code>Node = -4+8 = 4</code>, <code>k = 1</code>: Subordinates are <em>(7, 30), (8, 50)</em> . Similarly 7 is the answer of this query. <br>\n<em>Query #4</em> <code>Node = -5+7 = 2</code>, <code>k = 3</code>: Subordinates are <em>(7, 30), (8, 50), (3, 60), (4, 80)</em>. Similarly 3 is the answer for this query. <br>\n<em>Query #5</em> <code>Node = 2+3 = 5</code>, <code>k = 1</code>: Subordinates are <em>(6, 20)</em>. <em>6<sup>th</sup></em> employee has the most, and only, lowest salary. <br>\n<em>Query #6</em> <code>Node = -5+6 = 1</code>, <code>k = 4</code>: Subordinates are <em>(5, 10), (6, 20), (7, 30), (2, 40), (8, 50), (3, 60), (4, 80)</em>.  2 is answer of this query. <br>\n<em>Query #7</em> <code>Node = 2+2 = 4</code>, <code>k = 2</code>: Subordinates are <em>(7, 30), (8, 50)</em>. Employee <em>8</em> has the second lowest salaries among the subordinates of 4.  </p>\n\n<hr>\n\n<p><strong>Tested by:</strong> <a href=\"/scturtle\">scturtle</a></p></div></div></div>", 
        "hacker": {
            "username": "HackerRank", 
            "is_admin": true, 
            "id": 15055, 
            "avatar": "https://hrcdn.net/s3_pub/hr-avatars/4c95f96b-1ff9-46ed-98f8-cb3cb4ed8834/150x150.png"
        }, 
        "id": 2590, 
        "leaderboard_out_of_sync": null, 
        "has_ended": false, 
        "languages": [
            "haskell", 
            "clojure", 
            "scala", 
            "erlang", 
            "sbcl", 
            "ocaml", 
            "fsharp", 
            "racket", 
            "elixir"
        ], 
        "is_custom": false, 
        "compile_and_test": true, 
        "default_language": null, 
        "migrated_resource": null, 
        "submit_disabled": false, 
        "expert_solution_status": false, 
        "can_solve": true, 
        "company_id": null, 
        "custom": true, 
        "can_be_viewed": true, 
        "track": {
            "name": "Persistent Structures", 
            "taxonomy": 3, 
            "track_slug": "fp", 
            "track_id": 5, 
            "track_name": "Functional Programming", 
            "id": 50, 
            "rewards_system_enabled": null, 
            "slug": "persistent-ds"
        }, 
        "primary_contest": {
            "migration_status": null, 
            "contest_broadcast": null, 
            "hacker_timelimit": null, 
            "notification": null, 
            "qualification_rule_value": null, 
            "leaderboard_backend": null, 
            "expose_stats": null, 
            "updated_at": "2016-05-06T21:52:39.000Z", 
            "custom_leaderboard_column_name": null, 
            "organization_type": null, 
            "ended": true, 
            "epoch_starttime": 1403245800, 
            "timezone": "PST", 
            "disable_forum": null, 
            "id": 950, 
            "primary_track_id": 5, 
            "limited_participants": null, 
            "school_leaderboard_enabled": false, 
            "time_limited_contest": false, 
            "archived": true, 
            "rated": null, 
            "parent_contest_id": null, 
            "leaderboard_out_of_sync_message": null, 
            "leaderboard_type": "country", 
            "tagline": "A contest for functional programming enthusiasts.", 
            "effective_epoch_endtime": 1404109800, 
            "show_participants_info": null, 
            "homepage_background_color": "", 
            "organization_name": null, 
            "track": {
                "name": "Functional Programming", 
                "id": 5, 
                "priority": 2, 
                "descriptions": "The art of programming with expressions and functions. Experience the challenge of programming without state. A good paradigm for those interested in Map-Reduce and parallel computing.", 
                "rewards_system_enabled": null, 
                "slug": "fp"
            }, 
            "primary_tag_id": null, 
            "hide_navigation": null, 
            "show_penalty": null, 
            "effective_time_left": -99247042.10109253, 
            "hidden": null, 
            "homepage": "", 
            "public": true, 
            "testers_contest": null, 
            "description": "Functional programming is an elegant programming style where we use functional languages to write mathematically pure functions. The outputs of these pure functions depend only on the input parameters and not on the state of the program. Hence, these programs have almost negligible side effects.  \n<br>  \n<br>  \n<strong>Problem Setters</strong> <a href=\"/boleyn_su\"> Boleyn Su</a>, <a href=\"/AlMag\">Alex</a>, <a href=\"/gman007\">Grant Boudreaux</a>, <a href=\"/deepakgupta\">Deepak Gupta</a> and <a href=\"/abhiranjan\">Abhiranjan</a>.  \n<br>  \n\n<strong>Problem Testers</strong>  <a href=\"/scturtle\">scturtle</a>, <a href=\"/stimim\">Stimim Chen</a>, <a href=\"/darkshadows\">Lalit Kundu</a> and <a href=\"/abhiranjan\">Abhiranjan</a>. \n<br>  \n<br>\nYou can solve this contest in any of these functional languages: <i>Haskell, Scala, Lisp, Erlang, Clojure, OCaml and F#</i>.", 
            "hide_difficulty": null, 
            "started": true, 
            "time_left": -99247042.09886333, 
            "challenges_count": 5, 
            "qualification_rule_msg": null, 
            "leaderboard_out_of_sync": null, 
            "team_event": false, 
            "disable_fsi": null, 
            "hide_submissions": null, 
            "leaderboard_format": "", 
            "leaderboard_broadcast_message": null, 
            "has_tracks": null, 
            "college_public": null, 
            "endtime": "2014-06-30T06:30:00.000Z", 
            "qualification_rule_type": null, 
            "slug": "lambda-calculi-jun14", 
            "hide_leaderboard": null, 
            "kind": null, 
            "comment_live_sync": null, 
            "name": "Functional Programming Contest - June'14", 
            "is_multi_round": false, 
            "created_at": "2014-05-27T12:24:32.000Z", 
            "epoch_endtime": 1404109800, 
            "company_associated_contest": null, 
            "rating_category": null, 
            "has_codesprint_reg_page": null, 
            "starttime": "2014-06-20T06:30:00.000Z", 
            "is_rating_updated": true, 
            "leaderboard_freeze_time": null, 
            "migration_disabled": null, 
            "template_id": 153
        }, 
        "factor": 100, 
        "is_solution_unlocked": false, 
        "preview": "K'th lowest salary.", 
        "is_editorial_available": true, 
        "status": null, 
        "category": "ai", 
        "public_solutions": true, 
        "color": null, 
        "deleted": false, 
        "dynamic": true, 
        "company": null, 
        "moderator_or_support": false, 
        "is_text": false, 
        "solved_score": 0.5, 
        "difficulty_score": "0.357", 
        "difficulty": 0.5769230769230769, 
        "active": true, 
        "show_skeliton": null, 
        "max_score": 100, 
        "slug": "boleyn-salary", 
        "contest_slug": "master", 
        "user_score": 0, 
        "real_dynamic": false, 
        "kind": "code", 
        "player_count": 2, 
        "submitted_hackers_count": 103, 
        "name": "Boleyn Salary", 
        "is_preview_contest": false, 
        "level": 94, 
        "success_ratio": 0.5436893203883495, 
        "total_count": 103, 
        "created_at": "2014-06-10T10:02:53.000Z", 
        "epoch_endtime": null, 
        "judgebot": null, 
        "available_translations": [], 
        "codechecker_handle": null, 
        "countdown_time": 0, 
        "author_avatar": "https://secure.gravatar.com/avatar/bc84d17aff91caf88e4465d3135ab25e?d=https://d3rpyts3de3lx8.cloudfront.net/hackerrank/assets/gravatar.jpg&s=150", 
        "custom_tabs": null, 
        "judgebot_language": null, 
        "custom_case": true, 
        "requirements_description": null, 
        "is_skip_band_challenge": false, 
        "custom_checker_language": null
    }
}